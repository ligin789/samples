import React from "react";
import Chart from "react-apexcharts";
import { Area, AreaChart, CartesianGrid, Tooltip } from "recharts";
import { useNavigate } from "react-router-dom";

const LineGraph = (props: any) => {
  const {
    hightPoint,
    chartHeight,
    chartwidth,
    timeIs,
    graphViewData,
    graphStart,
    graphEnd,
    fltLegId
  } = props;
  console.log("chartHeight", chartHeight,props)
  const navigate = useNavigate();
  //   const options = {
  //     chart:{
  //       toolbar:{
  //         show:false
  //       }
  //     },
  //     dataLabels: {
  //       enabled: false
  //     },
  //     stroke:{
  //       width:0.5,
  //       curve:'stepline'
  //     },
  //     fill: {
  //       type: "gradient",
  //       gradient: {
  //         shadeIntensity: 1,
  //         opacityFrom: 0.7,
  //         opacityTo: 0.9,
  //         stops: [0, 90, 100]
  //       }
  //     },
  //     xaxis: {
  //       min:0,
  //       max:8,
  //       stepSize:2,
  //       labels: {
  //         show: false
  //       },
  //       categories: [
  //         "01 Jan",
  //         "02 Jan",
  //         "03 Jan",
  //         "04 Jan"
  //       ],
  //       axisBorder:{
  //         show:false
  //       },
  //       axisTicks:{
  //         show:false
  //       }
  //     },
  //     yaxis: {
  //       labels:{
  //         show:false
  //       },
  //       min: 0,
  //       max: 100,
  //       tickAmount: 10,
  //       axisBorder:{
  //         show:false
  //       },
  //       axisTicks:{
  //         show:false
  //       }
  //     }
  //   }
  //   const series = [
  //     {
  //       name: "Series 1",
  //       data: [45, 100, 38, 45, 19, 23, 2],
  //       labels: { show: false }
  //     }
  //   ]

  const data = [
    { name: "Page A", uv: 98 },
    { name: "Page B", uv: 82 },
    { name: "Page C", uv: 64 },
    { name: "Page D", uv: 26 },
    { name: "Page E", uv: 19 },
    { name: "Page F", uv: 12 },
    { name: "Page G", uv: 10 },
    { name: "Page H", uv: 8 },
    { name: "Page I", uv: 0 },
  ];

  let finalData: any[] = [];
  let endEntery = false;

  console.log("check the valuec====> ", graphViewData);
  graphViewData &&
    graphViewData.map((el: any, i: number) => {
      console.log(
        "check the value in line graph =====> ",
        graphViewData[i + 1] ? graphViewData[i + 1] : "no",
        graphViewData,
        i + 1
      );

      console.log(el.value,'check the graph issue here ==> ',Date.UTC(0,0,0,Number(graphStart?.substring(0, 2)),Number(graphStart?.substring(3, 5))) <=Date.UTC(0,0,0,Number(el.time?.substring(0, 2)),Number(el.time?.substring(3, 5))))
      if (
        endEntery === false &&
        Date.UTC(0,0,0,Number(graphStart?.substring(0, 2)),Number(graphStart?.substring(3, 5))) <=Date.UTC(0,0,0,Number(el.time?.substring(0, 2)),Number(el.time?.substring(3, 5)))
      ) {
        let temp = { value: 0, time: "", stemp: 0 };
        if (
          Date.UTC(0,0,0,Number(el.time.substring(0, 2)),Number(el.time.substring(3, 5))) <Date.UTC(0,0,0,Number(graphEnd.substring(0, 2)), Number(graphEnd.substring(3, 5)))
        ) {
          if (i === 0) {
            temp.value = el?.value
            // temp.value = el.value / 250;
            // temp.value = el.value/50
            // finalData[finalData.length-1]&&(finalData[finalData.length-1].value = el.value/10)
            // temp.value = graphViewData[i+1]?graphViewData[i+1]['value']?graphViewData[i+1]['value']/100:0:0
            temp.time = el.time;
            temp.stemp = Math.abs(
              (Date.UTC(0,0,0,Number(el.time.substring(0, 2)),Number(el.time.substring(3, 5))) -Date.UTC(0,0,0,Number(graphStart.substring(0, 2)),Number(graphStart.substring(3, 5)))) /60000);
          } else {
            temp.value = el?.value
            // temp.value = el.value / 250;
            // temp.value = el.value/50
            // finalData[finalData.length-1]&&(finalData[finalData.length-1].value = el.value/10)
            // temp.value = graphViewData[i+1]?graphViewData[i+1]['value']?graphViewData[i+1]['value']/100:0:0
            temp.time = el.time;
            temp.stemp = Math.abs((Date.UTC(0,0,0,Number(el.time.substring(0, 2)),Number(el.time.substring(3, 5))) -Date.UTC(0,0,0,Number(graphViewData[i - 1].time.substring(0, 2)),Number(graphViewData[i - 1].time.substring(3, 5)))) /60000);
          }
        } else {
          temp.value = el?.value
          // temp.value = el.value / 250;
          // temp.value = el.value/50
          // finalData[finalData.length-1]&&(finalData[finalData.length-1].value = el.value/10)
          // temp.value = graphViewData[i+1]?graphViewData[i+1]['value']?graphViewData[i+1]['value']/100:0:0
          temp.time = el.time;
          temp.stemp = Math.abs((Date.UTC(0,0,0,Number(graphEnd.substring(0, 2)),Number(graphEnd.substring(3, 5))) -Date.UTC(0,0,0,Number(graphViewData[i - 1]?.time.substring(0, 2)),Number(graphViewData[i - 1]?.time.substring(3, 5)))) /60000);
          endEntery = true;
        }
        finalData.push(temp);
      }
      else{
        if(Date.UTC(0,0,0,Number(graphStart?.substring(0, 2)),Number(graphStart?.substring(3, 5))) <Date.UTC(0,0,0,Number(graphViewData[i+1]?.time?.substring(0, 2)),Number(graphViewData[i+1]?.time?.substring(3, 5)))){
          let temp = { value: 0, time: "", stemp: 0 };
          temp.value = el?.value;
          temp.time = graphStart;
          temp.stemp = Math.abs((Date.UTC(0,0,0,Number(graphViewData[i+1]?.time?.substring(0, 2)),Number(graphViewData[i+1]?.time?.substring(3, 5))) -Date.UTC(0,0,0,Number(graphStart.substring(0, 2)),Number(graphStart.substring(3, 5)))) /60000);
          finalData.push(temp);
        }
      }
    });

  let lastFinalData: any[] = [];
  console.log("check line graph view ===> ",finalData)
  finalData.length > 0 &&
    finalData.map((el: any, i: number) => {
      let temp = el;
      if (i + 1 === finalData.length) {
        temp.stemp = 0;
      } else {
        temp.stemp = Math.abs((Date.UTC(0,0,0,Number(finalData[i + 1].time?.substring(0, 2)),Number(finalData[i + 1].time?.substring(3, 5))) -Date.UTC(0,0,0,Number(el.time?.substring(0, 2)),Number(el.time?.substring(3, 5)))) /60000);
      }
      lastFinalData.push(temp);
    });
  finalData = lastFinalData;

  let dataFinal1: any[] = [];
  lastFinalData?.length>0&&lastFinalData.map((el:any,ind:number)=>{
    if(ind===0){dataFinal1.push(el)}else{
      if(Date.UTC(0,0,0,Number(dataFinal1[dataFinal1.length-1]?.time?.substring(0, 2)),Number(dataFinal1[dataFinal1.length-1]?.time?.substring(3, 5))) <Date.UTC(0,0,0,Number(el?.time?.substring(0, 2)),Number(el?.time?.substring(3, 5)))){
        dataFinal1.push(el)
      }
    }
    // if(Date.UTC(0,0,0,Number(graphEnd?.substring(0, 2)),Number(graphEnd?.substring(3, 5))) >Date.UTC(0,0,0,Number(el?.time?.substring(0, 2)),Number(el?.time?.substring(3, 5)))){
    //   dataFinal1.push(el);
    // }
  })

  let dataFinal: any[] = [];
  dataFinal1?.length>0&&dataFinal1.map((el:any)=>{
    if(Date.UTC(0,0,0,Number(graphEnd?.substring(0, 2)),Number(graphEnd?.substring(3, 5))) >Date.UTC(0,0,0,Number(el?.time?.substring(0, 2)),Number(el?.time?.substring(3, 5)))){
      dataFinal.push(el);
    }
  })

  finalData = dataFinal;
  console.log(
    "check line graph view ===> ",
    timeIs,
    graphViewData,
    graphStart,
    graphEnd,
    finalData,
    lastFinalData,
    dataFinal1,
    dataFinal,
    fltLegId
  );
  return (
    //     <div style={{marginLeft:'-5px',marginTop:'4px'}}>
    //     {/* <div style={{ position: 'absolute', left: 450 }}> */}
    //     {/* <Chart options={options} series={series} type='area' width={200} height={100}/> */}

    //     {/* <AreaChart width={480} height={200} data={data}> */}
    //     <AreaChart width={chartwidth} height={chartHeight} data={data}>
    //         <defs>
    //             <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
    //                 <stop offset="5%" stopColor="#006CEA" stopOpacity={0.8} />
    //                 <stop offset="95%" stopColor="#006CEA" stopOpacity={0} />
    //             </linearGradient>
    //         </defs>
    //         {/* <CartesianGrid strokeDasharray="3 3" horizontal={false} vertical={false}/> */}
    //         {/* <Tooltip /> */}
    //         <Area type="step" dataKey="uv" stroke="#006CEA" fillOpacity={1} fill="url(#colorUv)" />
    //     </AreaChart>
    //   </div>

    <div
      style={{
        width: chartwidth,
        height: chartHeight,
        display: "flex",
        // borderLeft: "1px solid #0981FD",
        // borderLeft: "1px solid red",
      }}
    >
      {/* <div style={{position:'absolute',width:'1px',backgroundColor:'#0981FD',height:`${chartHeight-(((chartHeight / 100) * (finalData[0]?.value*2.5)) - 3)}px`}}></div> */}
      {finalData.length > 0 &&
        finalData.map((el, i) => {
          console.log("LineGraph  finalData ==>", el,chartHeight,((chartHeight / 100) * el.value) - 3,el.value,el.value*2.5);
          console.log(chartwidth,timeIs,"LineGraph  finalData ==>###",el,(chartwidth / timeIs) * el.stemp)
          return (
            <>
            {/* <div style={{width: `${(chartwidth / timeIs) * el.stemp}px`}}> */}
              <div
                style={{
                  // width: `${(chartwidth / timeIs) * el.stemp - 2}px`,
                  width: `${((chartwidth / timeIs) * el.stemp)}px`,
                  // height: `${(chartHeight / 10) * el.value - 3}px`,
                  // height: `${((chartHeight / 100) * (el.value*2.5)) - 3}px`,
                  
                  // height: `${(((chartHeight) / 100) * (el.value)) - 3}px`,
                  height: `${(((chartHeight) / hightPoint) * (el.value)) - 3}px`,

                  // height: `${(((chartHeight *2) / 100) * (el.value)) - 3}px`,
                  // marginTop: `${
                  //   (chartHeight / 10) * (10 - el.value) -
                  //   (i === finalData.length - 1 ? 1 : 0)
                  // }px`,
                  marginTop: `${
                    // (chartHeight / 100) * (100 - (el.value*2.5)) -
                    
                    // (chartHeight/ 100) * (100 - (el.value)) -
                    (chartHeight/ hightPoint) * (hightPoint - (el.value)) -

                    // (chartHeight/ 100) * (100 - (el.value*2)) -
                    (i === finalData.length - 1 ? 1 : 0)
                  }px`,
                  // width:`${((chartwidth/timeIs)*el.stemp)-2}px`,height:`${((chartHeight/100)*(i===0?el.value:finalData[i-1].value))-1}px`,marginTop:`${(chartHeight/100)*(100-(i===0?el.value:finalData[i-1].value))-((i===finalData.length-1)?1:0)}px`
                  background: "linear-gradient(180deg, #0981FD4D, transparent)",
                  borderTop: "1px solid #0981FD",
                }}
              >
                {i === 0 && (
                  <div
                    style={{position: "absolute",marginTop: "-30px",marginLeft: "-7px",}}
                  >
                    <div
                      style={{fontFamily: "Roboto",fontWeight: "500",fontSize: "15px",color: "#1D1D1D",}}
                    >
                      {/* {((el.value * 2.5)-Math.floor(el.value * 2.5))>0.50?Math.ceil(el.value * 2.5):Math.floor(el.value * 2.5)} */}
                      {el?.value}
                      
                    </div>
                    {/* <div style={{fontFamily:'Roboto',fontWeight:'500',fontSize:'15px',color:'#1D1D1D'}}>{(i===0?el.value:finalData[i-1].value)}</div> */}
                    <div
                      style={{width: "10px",height: "10px",borderRadius: "50%",backgroundColor: "#DE9100",border: "2px solid #F3F4FB",cursor: "pointer",}}
                      onClick={() =>
                        navigate(
                          `/flightScoreDetails?queryParamName=${fltLegId}`
                        )
                      }
                    ></div>
                  </div>
                )}
              </div>
              <div
                style={{
                  width: "2px",
                  // height: `${(chartHeight / 10) * el.value - 1}px`,
                  // marginTop: `${(chartHeight / 10) * (10 - el.value)}px`,
                  // height: `${(chartHeight / 100) * (el.value*2.5) - 1}px`,
                  // height: `${(chartHeight / 100) * (el.value) - 1}px`,
                  
                  // height: `${(chartHeight / 100) * (el.value)}px`,
                  height: `${(chartHeight / hightPoint) * (el.value)}px`,

                  // height: `${((chartHeight*2) / 100) * (el.value)}px`,
                  // marginTop: `${(chartHeight / 100) * (100 - (el.value*2.5))}px`,
                  
                  // marginTop: `${(chartHeight / 100) * (100 - (el.value))}px`,
                  marginTop: `${(chartHeight / hightPoint) * (hightPoint - (el.value))}px`,

                  // marginTop: `${(chartHeight / 100) * (100 - (el.value*2))}px`,
                  // marginTop: `-${(chartHeight / 100) * el.value}px`,
                  // <div style={{width:'2px',height:`${((chartHeight/100)*(i===0?el.value:finalData[i-1].value))-1}px`,marginTop:`${(chartHeight/100)*(100-(i===0?el.value:finalData[i-1].value))}px`
                  borderTop: "1px solid #0981FD",
                  background: "linear-gradient(180deg, #0981FD4D, transparent)",
                }}
              >
                <div
                  style={{
                    width: "2px",
                    height: `${
                      // (chartHeight / 100) *
                      (chartHeight / hightPoint) *

                      // ((chartHeight*2) / 100) *
                      (i != finalData.length - 1
                        // ? (el.value*2.5) - (finalData[i + 1].value*2.5)
                        ? (el.value) - (finalData[i + 1].value)
                        // : (el.value*2.5) - 0)
                        : (el.value) - 0)
                    }px`,
                    borderRight: "1px solid #0981FD",
                  }}
                ></div>
                {/* <div style={{width:'1px',height:`${(chartHeight/100)*(i!==finalData.length-1?(i===0?el.value:finalData[i-1].value)-finalData[i+1].value:(i===0?el.value:finalData[i-1].value)-0)}px`,borderRight:'1px solid #0981FD'}}></div> */}
                <div
                  style={{
                    width: "2px",
                    height: `${
                      // (chartHeight / 100) *
                      (chartHeight / hightPoint) *

                      // ((chartHeight*2) / 100) *
                      (el.value -
                        (i !== finalData.length - 1
                          // ? (el.value*2.5) - (finalData[i + 1].value*2.5)
                          ? (el.value) - (finalData[i + 1].value)
                          // : (el.value*2.5) - 0))
                          : (el.value) - 0))
                    }px`,
                  }}
                ></div>
                {/* <div style={{width:'2px',height:`${(chartHeight/100)*((i===0?el.value:finalData[i-1].value)-(i!==finalData.length-1?(i===0?el.value:finalData[i-1].value)-finalData[i+1].value:(i===0?el.value:finalData[i-1].value)-0))}px`}}></div> */}
              </div>
              {/* </div> */}
            </>
          );
        })}
    </div>
  );
};
export default LineGraph;

// import { Area, AreaChart, CartesianGrid, Tooltip } from 'recharts'

// const LineGraph = () => {
//     const data = [
//         {
//             "name": "Page A",
//             "uv": 98,
//         },
//         {
//             "name": "Page B",
//             "uv": 82,
//         },
//         {
//             "name": "Page C",
//             "uv": 64,
//         },
//         {
//             "name": "Page D",
//             "uv": 26,
//         },
//         {
//             "name": "Page E",
//             "uv": 19,
//         },
//         {
//             "name": "Page F",
//             "uv": 12,
//         },
//         {
//             "name": "Page G",
//             "uv": 10,
//         },
//         {
//             "name": "Page H",
//             "uv": 8,
//         },
//         {
//             "name": "Page I",
//             "uv": 0,
//         }
//     ]
//     return (
//         <div style={{ position: 'absolute', left: 500 }}>
//             <div style={{ display: 'flex', flexDirection: 'row' }}>
//                 <div style={{ width: 480 }} />
//                 <AreaChart width={480} height={200} data={data}>
//                     <defs>
//                         <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />
//                         </linearGradient>
//                         <linearGradient id="colorPv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#82ca9d" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#82ca9d" stopOpacity={0} />
//                         </linearGradient>
//                     </defs>
//                     {/* <XAxis dataKey="name" /> */}
//                     {/* <YAxis /> */}
//                     <CartesianGrid strokeDasharray="3 3" horizontal={false} />
//                     <Tooltip />
//                     <Area type="step" dataKey="uv" stroke="#8884d8" fillOpacity={1} fill="url(#colorUv)" />
//                 </AreaChart>
//                 <AreaChart width={480} height={200} data={data} style={{ marginLeft: 40 }}>
//                     <defs>
//                         <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />
//                         </linearGradient>
//                         <linearGradient id="colorPv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#82ca9d" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#82ca9d" stopOpacity={0} />
//                         </linearGradient>
//                     </defs>
//                     {/* <XAxis dataKey="name" /> */}
//                     {/* <YAxis /> */}
//                     <CartesianGrid strokeDasharray="3 3" horizontal={false} />
//                     <Tooltip />
//                     <Area type="step" dataKey="uv" stroke="#8884d8" fillOpacity={1} fill="url(#colorUv)" />
//                 </AreaChart>
//                 <div style={{ width: 120 }} />
//                 <AreaChart width={480} height={200} data={data} style={{ marginLeft: 40 }}>
//                     <defs>
//                         <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />
//                         </linearGradient>
//                         <linearGradient id="colorPv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#82ca9d" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#82ca9d" stopOpacity={0} />
//                         </linearGradient>
//                     </defs>
//                     {/* <XAxis dataKey="name" /> */}
//                     {/* <YAxis /> */}
//                     <CartesianGrid strokeDasharray="3 3" horizontal={false} />
//                     <Tooltip />
//                     <Area type="step" dataKey="uv" stroke="#8884d8" fillOpacity={1} fill="url(#colorUv)" />
//                 </AreaChart>
//                 <div style={{ width: 480 }} />
//             </div>
//             <div style={{ width: '100%', height: 1, backgroundColor: 'red', marginTop: -5 }} />
//             <div style={{ display: 'flex', flexDirection: 'row',marginTop:50 }}>
//                 <div style={{ width: 480 }} />
//                 <AreaChart width={480} height={200} data={data}>
//                     <defs>
//                         <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />
//                         </linearGradient>
//                         <linearGradient id="colorPv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#82ca9d" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#82ca9d" stopOpacity={0} />
//                         </linearGradient>
//                     </defs>
//                     {/* <XAxis dataKey="name" /> */}
//                     {/* <YAxis /> */}
//                     <CartesianGrid strokeDasharray="3 3" horizontal={false} />
//                     <Tooltip />
//                     <Area type="step" dataKey="uv" stroke="#8884d8" fillOpacity={1} fill="url(#colorUv)" />
//                 </AreaChart>
//                 <AreaChart width={480} height={200} data={data} style={{ marginLeft: 40 }}>
//                     <defs>
//                         <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />
//                         </linearGradient>
//                         <linearGradient id="colorPv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#82ca9d" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#82ca9d" stopOpacity={0} />
//                         </linearGradient>
//                     </defs>
//                     {/* <XAxis dataKey="name" /> */}
//                     {/* <YAxis /> */}
//                     <CartesianGrid strokeDasharray="3 3" horizontal={false} />
//                     <Tooltip />
//                     <Area type="step" dataKey="uv" stroke="#8884d8" fillOpacity={1} fill="url(#colorUv)" />
//                 </AreaChart>
//                 <div style={{ width: 120 }} />
//                 <AreaChart width={480} height={200} data={data} style={{ marginLeft: 40 }}>
//                     <defs>
//                         <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />
//                         </linearGradient>
//                         <linearGradient id="colorPv" x1="0" y1="0" x2="0" y2="1">
//                             <stop offset="5%" stopColor="#82ca9d" stopOpacity={0.8} />
//                             <stop offset="95%" stopColor="#82ca9d" stopOpacity={0} />
//                         </linearGradient>
//                     </defs>
//                     {/* <XAxis dataKey="name" /> */}
//                     {/* <YAxis /> */}
//                     <CartesianGrid strokeDasharray="3 3" horizontal={false} />
//                     <Tooltip />
//                     <Area type="step" dataKey="uv" stroke="#8884d8" fillOpacity={1} fill="url(#colorUv)" />
//                 </AreaChart>
//                 <div style={{ width: 480 }} />
//             </div>
//             <div style={{ width: '100%', height: 1, backgroundColor: 'red', marginTop: -5 }} />
//         </div>
//     )
// }
// export default LineGraph
