import React, { useEffect, useMemo, useRef, useState } from "react";
import type { ColDef, RowSelectionOptions, SizeColumnsToContentStrategy, SizeColumnsToFitGridStrategy, SizeColumnsToFitProvidedWidthStrategy } from "ag-grid-community";
import { AllCommunityModule, ModuleRegistry, themeQuartz } from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import './styles.css'
import moment from "moment";
import { getFormatData, refArrayOfDates } from "../../utils/GetFormatData";
import CustomNoRowsOverlay from "./noRowData";
import Loader from "../loader";
import { useTranslation } from "react-i18next";
import Colors from "../../global/Color";
import CountdownTimer from "./countdowntimer";
import PaxConxObModal from "../paxmisconxob";
import PaxConxIbModal from "../paxmisconxib";
import RunwayPopup from "../runwayClickPopup";
import RenderRunwayCell from "./renderRunwayCell";
import RenderLink from "./renderLink";
import RenderDateAndTime from "./renderDateAndTime";
import RenderPilotCrewConnection from "./renderPilotCrewConnection";
import RenderToolTipModal from "./renderToolTipModal";
import RenderPetd from "./renderPetd";
import RenderPeta from "./renderPeta";
import WeatherPopup from "../weatherPopup";
import WeatherPopupNotam from "../weatherPopupNotam";
import { getImage, getJsonData } from "../../global/tenantConfig";
import i18n from "../../i18n";
import WeatherIcon from "../../assets/images/imagesComponents/weatherIcon";
import CriticalIcon from "../../assets/images/imagesComponents/criticalImage";
import RunwayCloseIcon from "../../assets/images/imagesComponents/runwayClose";
import { ExportGridToExcel } from "../../utils/ExportAsExcel";

ModuleRegistry.registerModules([AllCommunityModule]);

const myTheme = themeQuartz.withParams({
  accentColor: Colors.common,
  backgroundColor: "#EFF0F4",
  cellTextColor: Colors.cellTextColor,
  dataFontSize: 16,
  fontFamily: {
    googleFont: "Roboto",
  },
  foregroundColor: "#FFFFFF",
  headerBackgroundColor: Colors.tableHeaderBgColor,
  headerFontFamily: {
    googleFont: "Roboto"
  },
  headerTextColor: Colors.tableHeaderTextColor,
  headerHeight: '75px',
  headerFontSize: 14,
  headerFontWeight: 400,
  oddRowBackgroundColor: "#FFFFFF",
  spacing: 6,
  wrapperBorderRadius: 0,
  rowHoverColor: Colors.menuItemHover,
  selectedRowBackgroundColor: 'none',
  inputFocusBorder: 'none',
  checkboxUncheckedBorderColor: Colors.tableCheckboxUncheckedBorderColor,
  checkboxCheckedBorderColor: Colors.common,
  checkboxCheckedBackgroundColor: Colors.common,
  checkboxBorderWidth: 1,
});

const cellStyle = (param: any) => {
  const columnHeader = param?.colDef?.key
  const color = param?.data?.[columnHeader]?.color
  if (color) {
    return { backgroundColor: color };
  }
  return null
}


const InfiniteScrollGrid = (props: any) => {
  const {
    data,
    userPreference,
    noOfRowsSelected,
    setNoOfRowsSelected,
    isUTCToggled,
    showLoader,
    handleLoader,
    handleNotesClick,
    setCriticalPopupVisible,
    flightNoValue,
    setFlightFeedClick,
    setFlightNoValue,
    createAlertClicked,
    setCreateAlertClicked,
    dropDownIndex,
    handleDropDownIndex,
    carrierCodeValue,
    setCarrierCodeValue,
    gridDataIdValue,
    setGridDataIdValue,
    fromscreen,
    userConfirmAlert,
    setUserConfirmAlert,
    crewPopup,
    setCrewPopup,
    connectionsPopup,
    setConnectionsPopup,
    setFocusClick,
    runwayModal,
    setRunwayModal,
    weatherHoverModal,
    setWeatherHoverModal,
    paxConxIbModal,
    paxConxObModal,
    setPaxConxIbModal,
    setPaxConxObModal,
    runWayClickModal,
    setRunwayClickModal,
    scrollToObject,
    setScrollToObject,
    downloadExcelClicked,
    setDownloadExcelClicked,
    chatClickHandler
  } = props;
  const gridRef = useRef<AgGridReact>(null);
  const tippyRef = useRef<any>()
  const tippyWeatherRef = useRef<any>()

  const [rowData, setRowData] = useState<any>([]);
  const [colDefs, setColDefs] = useState<any>([]);
  const [columnsToShow, setColumnsToShow] = useState<any>([])
  const [arrFlights, setArrFlights] = useState(0)
  const [depFlights, setDepFlights] = useState(0)
  const [avgTaxiout, setAvgTaxiout] = useState(0)
  const [avgTaxiin, setAvgTaxiin] = useState(0)
  const [avgDepartureDelay, setAvgDepartureDelay] = useState(0)
  const [avgArrivalDelay, setAvgArrivalDelay] = useState(0)
  const [overlayPosition, setOverlayPosition] = useState<any>(null)
  const [isWeatherClicked, setIsWeatherClicked] = useState(false)
  const [weatherClickFlightNo, setWeatherClickFlightNo] = useState('')
  const [runwayHoverFlightNo, setRunwayHoverFlightNo] = useState('')
  const [paxMisConxHoverFlightNo, setPaxMisConxHoverFlightNo] = useState('')
  const [hoverColName, setHoverColName] = useState('')


  type TranslationKey = '';
  const { t } = useTranslation<TranslationKey>();

  const defaultColDef: ColDef = {
    resizable: false,
    suppressMovable: true,
    lockPinned: true,
    maxWidth: 110,
    minWidth: 50,
    headerCheckboxSelection: true,
    loadingCellRenderer: true,
  };

  const renderIsCriticalCell = (p: any) => {
    return p.value == "Y" && <CriticalIcon styles={{ width: 23, height: 20 }} />
  }

  const renderIndicatorCell = (props: any) => {
    return Array.isArray(props.value) &&
      <div style={{ display: 'flex', alignItems: 'center' }}>{props.value.map((indicator) => {
        if (indicator?.toLowerCase() === 'runwayclose') {
          return <div title="Runway Close">
            <RunwayCloseIcon className="indicatorIcon" key={indicator} />
          </div>
        } else if (indicator === 'weather') {
          return <div title="Weather">
            <WeatherIcon className="indicatorIcon" key={indicator} />
          </div>
        }
      })
      }
      </div>
  }
  const runwayMouseEnter = (e: any, p: any, colName: string) => {
    setRunwayHoverFlightNo(p.data["flightib"]?.value)
    setHoverColName(colName)
    setRunwayModal(true)
  }

  const runwayMouseExit = (e: any) => {
    setRunwayHoverFlightNo('')
    setHoverColName('')
    setRunwayModal(false)
  }

  useEffect(() => {
    const { columnDefinition, formatRows, flight_ib = 0, flight_ob = 0, taxiout = 0, taxiin = 0, avgArrDel = 0, avgDepDel = 0 } = getFormatData(data, columnsToShow, isUTCToggled)
    let formatColumnDefinitions = [];
    formatColumnDefinitions = columnDefinition?.map((column: any) => {
      if (column.cellRenderer === 'renderDateAndTime') {
        column.cellRenderer = RenderDateAndTime;
        column.cellRendererParams = {
          isUTCToggled
        }
        column.comparator = handleSort;
      } else if (column.cellRenderer === 'linkRenderer') {
        column.cellRenderer = RenderLink;
        column.cellRendererParams = {
          handleArrClick,
          flightNoValue,
          carrierCodeValue,
          setCriticalPopupVisible,
          setFlightFeedClick,
          createAlertClicked,
          setCreateAlertClicked,
          gridDataIdValue,
          overlayPosition,
          userConfirmAlert,
          setUserConfirmAlert,
          crewPopup,
          setCrewPopup,
          connectionsPopup,
          setConnectionsPopup,
          setFocusClick,
          setGridDataIdValue,
          setFlightNoValue,
          setCarrierCodeValue,
          chatClickHandler
        }
      } else if (column.cellRenderer === 'countdownTimer') {
        column.cellRenderer = renderCountdownTimer
      }

      if (column.key === 'arrrwy') {
        column.cellRenderer = RenderRunwayCell;
        column.cellRendererParams = {
          hoverColName,
          runwayModal,
          runwayHoverFlightNo,
          handleRunwayClick,
          runwayMouseEnter,
          runwayMouseExit
        }
      } else if (column.key === "notes") {
        column.cellRenderer = renderNoteCell;
      } else if (column.key === "CRITICAL") {
        column.cellRenderer = renderIsCriticalCell;
      } else if (column.key === "Indicator") {
        column.cellRenderer = renderIndicatorCell;
      } else if (column.key === 'pilotconxob' || column.key === 'pilotconxib' || column.key === 'ccconxob' || column.key === 'ccconxib') {
        column.cellRenderer = RenderPilotCrewConnection;
        column.cellRendererParams = {
          setCrewPopup
        }
      } else if (column.key === 'paxmisconxib') {
        column.cellRenderer = RenderLink;
        column.cellRendererParams = {
          handlePaxMisConnectIbClick
        }
      } else if (column.key === 'paxmisconxob') {
        column.cellRenderer = RenderLink;
        column.cellRendererParams = {
          handlePaxMisConnectObClick
        }
      } else if (column.key === 'groundtime' || column.key === 'paxdoorclosed' || column.key === 'cargodoorclosed') {
        column.cellRenderer = RenderToolTipModal;
        column.cellRendererParams = {
          isUTCToggled
        }
      } else if (column.key === 'predetdob') {
        column.cellRenderer = RenderPetd
        column.cellRendererParams = {
          isUTCToggled
        }
      } else if (column.key === 'predetaob') {
        column.cellRenderer = RenderPeta
        column.cellRendererParams = {
          isUTCToggled
        }
      }
      column.cellStyle = cellStyle;
      column.headerName = t(column.tKey)
      column.sortable = true;
      return column
    })
    setColDefs(formatColumnDefinitions)
    setRowData(formatRows)
    setArrFlights(flight_ib)
    setDepFlights(flight_ob)
    setAvgTaxiin(taxiin)
    setAvgTaxiout(taxiout)
    setAvgDepartureDelay(avgDepDel)
    setAvgArrivalDelay(avgArrDel)
    setNoOfRowsSelected(0)
  }, [data, columnsToShow, isUTCToggled, i18n.language])

  useEffect(() => {
    let col = colDefs.find((col: any) => col.keyToScroll === scrollToObject.key)
    gridRef?.current?.api?.ensureColumnVisible(col?.field, "middle");
  }, [scrollToObject])

  
  useEffect(()=>{
    if(downloadExcelClicked){
      ExportGridToExcel(rowData,colDefs);
      setDownloadExcelClicked(false)
    }
  },[downloadExcelClicked])

  useEffect(() => {
    const columnsArray: string[] = []
    userPreference?.grid_columns?.forEach((option: any) => {
      if (option.columns) {
        option.columns.forEach((subOption: any) => {
          subOption.isSelected && columnsArray.push(subOption.key)
        })
      } else {
        if (option.isSelected) {
          columnsArray.push(option.name)
        }
      }
    })
    setColumnsToShow(columnsArray)
  }, [userPreference])

  useEffect(() => {
    if (noOfRowsSelected === 0) {
      gridRef?.current?.api?.deselectAll();
    }
  }, [noOfRowsSelected])

  const rowSelection = useMemo<RowSelectionOptions | "single" | "multiple">(() => {
    return {
      mode: rowData.length ? "multiRow" : "singleRow"
    };
  }, [rowData]);

  const autoSizeStrategy = useMemo<| SizeColumnsToFitGridStrategy | SizeColumnsToFitProvidedWidthStrategy | SizeColumnsToContentStrategy>(() => {
    return {
      type: "fitCellContents",
    };
  }, []);

  const handleSort = (valueA: any, valueB: any) => {
    if (valueA === '-' && valueB === '-') return 0;
    if (valueA === '-') return 1;
    if (valueB === '-') return -1;

    const dateA: any = new Date(valueA);
    const dateB: any = new Date(valueB);

    if (isNaN(dateA) && isNaN(dateB)) return 0;
    if (isNaN(dateA)) return 1;
    if (isNaN(dateB)) return -1;

    return dateA.getTime() - dateB.getTime();
  }

  const rowClassRules = {
    'lastRowBorder': (params: any) => {
      return params.rowIndex === rowData.length - 1
    },
    'redBg': (params: any) => {
      return Object.keys(params?.data).every((val) => {
        return params?.data[val].color === '#FF7272'
      })
    },
  };

  const renderCountdownTimer = (p: any) => {
    if (p?.data?.['etdactob']?.valueLocal || p?.data?.['scheddepob']?.valueLocal) {
      const [hrs = 0, mins = 0] = moment.utc(moment.utc(p.data['etdactob'].valueLocal ?? p.data['scheddepob'].valueLocal).diff(moment.utc(new Date()))).format('HH:mm').split(':')
      return <CountdownTimer hr={hrs} min={mins} sec={0} />
    }
    return <span>{"—"}</span>;
  }

  const handleRunwayClick = () => {
    setRunwayClickModal(true);
  }


  const handleArrClick = (p: any) => {
    setWeatherClickFlightNo(p.data["flightob"].value)
    setIsWeatherClicked(true);
  }

  const handlePaxMisConnectIbClick = () => {
    setConnectionsPopup(true)
  }

  const handlePaxMisConnectObClick = () => {
    setConnectionsPopup(true)
  }

  const onSelectionChanged = (e: any) => {
    const selectedRows = e.api.getSelectedRows();
    setNoOfRowsSelected(selectedRows.length)
  }

  const renderNoteCell = (p: any) => {
    setCarrierCodeValue(p.data["carriata"]?.value)
    //or condition needs to be commented
    // if(p?.value||p?.data["flightob"]?.value==="306/08"){
    if (p?.value) {
      return (
        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', cursor: "pointer" }} onClick={() => { handleNotesClick(p) }}>
          <img src={getImage("noteIcon")} alt="note" width={18} height={20} />
        </div>
      )
    } else {
      return (
        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', cursor: "pointer" }} onClick={() => { handleNotesClick(p) }}>
          <img src={getImage("editPenIcon")} alt="note add" width={14} height={13} />
        </div>
      )
    }
  }

  return (
    showLoader ?
      <Loader /> :
      <div style={{ height: '100%', width: '100%', zoom: 'var(--zoomPercentage)', userSelect: "none" }} onClick={(e) => { dropDownIndex !== -1 && handleDropDownIndex(-1); }}>
        <div className="grid" style={fromscreen == "map" ? { height: "129px", scrollbarWidth: "none" } : { position: 'relative' }}>
          <AgGridReact
            ref={gridRef}
            theme={myTheme}
            rowData={rowData}
            columnDefs={colDefs}
            defaultColDef={defaultColDef}
            // autoSizeStrategy={autoSizeStrategy}
            rowSelection={rowSelection}
            rowClassRules={rowClassRules}
            suppressMoveWhenColumnDragging={true}
            suppressDragLeaveHidesColumns={true}
            suppressCellFocus={true}
            onSelectionChanged={onSelectionChanged}
            // onSortChanged={onSortChanged}
            noRowsOverlayComponent={CustomNoRowsOverlay}
          />
          {isWeatherClicked && (weatherClickFlightNo?.startsWith('1907') || weatherClickFlightNo?.startsWith('261')) &&
            <>
              <div
                style={{
                  position: "fixed",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                  background: "rgba(0, 0, 0, 0.5)",
                  zIndex: 5
                }}
              />
              {weatherClickFlightNo?.startsWith('1907') ?
                <WeatherPopupNotam setIsWeatherClicked={setIsWeatherClicked} setWeatherClickFlightNo={setWeatherClickFlightNo} />
                : weatherClickFlightNo?.startsWith('261') ?
                  <WeatherPopup setIsWeatherClicked={setIsWeatherClicked} />
                  : null}
            </>
          }
          {paxConxObModal &&
            <>
              <div
                style={{
                  position: "fixed",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                  background: "rgba(0, 0, 0, 0.5)",
                  zIndex: 5
                }}
              />
              <PaxConxObModal setPaxConxObModal={setPaxConxObModal} setPaxMisConxHoverFlightNo={setPaxMisConxHoverFlightNo} />
            </>
          }
          {paxConxIbModal &&
            <>
              <div
                style={{
                  position: "fixed",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                  background: "rgba(0, 0, 0, 0.5)",
                  zIndex: 5
                }}
              />
              <PaxConxIbModal setPaxConxIbModal={setPaxConxIbModal} setPaxMisConxHoverFlightNo={setPaxMisConxHoverFlightNo} />
            </>
          }
          {
            runWayClickModal &&
            <>
              <div
                style={{
                  position: "fixed",
                  top: 0,
                  left: 0,
                  width: "100%",
                  height: "100%",
                  background: "rgba(0, 0, 0, 0.5)",
                  zIndex: 5
                }}
              />
              <RunwayPopup setRunwayClickModal={setRunwayClickModal} />
            </>
          }
        </div>
        {fromscreen !== "map" &&
          <div className='tableDetail' style={{ position: 'absolute', bottom: 0, height: 40, width: '100%', backgroundColor: '#FFFFFF', borderTop: '1px solid #B7B7B7', borderBottom: '1px solid #B7B7B7', display: 'flex', alignItems: 'center' }}  >
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ fontSize: 16, color: '#5A5A5A', fontWeight: '400', marginLeft: 40 }}>{`${t("totalRecords")}`}</span>
              <span style={{ fontSize: 16, color: '#000000', fontWeight: '600', marginLeft: 5 }}>{`${rowData.length}`}</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ fontSize: 16, color: '#5A5A5A', fontWeight: '400', marginLeft: 30 }}>{`${t("arrFlightsLabel")}`}</span>
              <span style={{ fontSize: 16, color: '#000000', fontWeight: '600', marginLeft: 5 }}>{`${arrFlights}`}</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ fontSize: 16, color: '#5A5A5A', fontWeight: '400', marginLeft: 30 }}>{`${t("depFlightsLabel")}`}</span>
              <span style={{ fontSize: 16, color: '#000000', fontWeight: '600', marginLeft: 5 }}>{`${depFlights}`}</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ fontSize: 16, color: '#5A5A5A', fontWeight: '400', marginLeft: 30 }}>{`${t("avgDepLabel")}`}</span>
              <span style={{ fontSize: 16, color: '#000000', fontWeight: '600', marginLeft: 5 }}>{`${avgDepartureDelay}`}</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ fontSize: 16, color: '#5A5A5A', fontWeight: '400', marginLeft: 30 }}>{`${t("avgArrLabel")}`}</span>
              <span style={{ fontSize: 16, color: '#000000', fontWeight: '600', marginLeft: 5 }}>{`${avgArrivalDelay}`}</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ fontSize: 16, color: '#5A5A5A', fontWeight: '400', marginLeft: 30 }}>{`${t("avgTaxioutLabel")}`}</span>
              <span style={{ fontSize: 16, color: '#000000', fontWeight: '600', marginLeft: 5 }}>{`${avgTaxiout}`}</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <span style={{ fontSize: 16, color: '#5A5A5A', fontWeight: '400', marginLeft: 30 }}>{`${t("avgTaxiinLabel")}`}</span>
              <span style={{ fontSize: 16, color: '#000000', fontWeight: '600', marginLeft: 5 }}>{`${avgTaxiin}`}</span>
            </div>
          </div>
        }
      </div>
  );
};

export default InfiniteScrollGrid;
