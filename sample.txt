import {getByAltText, getByTestId, render, screen,fireEvent} from '@testing-library/react'
import React from 'react'
import Dropdown2 from '../../../src/components/Dropdown2'
import '@testing-library/jest-dom';

describe('Testing Dropdown2 component', () => {
    it('should search input field had been changed one time', async () => {
        const mockOnChange=jest.fn()
        let props={
            colSearchText:"Sample",
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"Sample",
                columns:[{
                    key:"Sample"
                }]}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn()
        }
       const {rerender}=  render(<Dropdown2 {...props}/>)
        props={
        colSearchText:"Test",
        setColSearchText:mockOnChange,
        userPreference:{
            grid_columns:[{name:"Test",
            columns:[{
                key:"Test"
            }]}]
        }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn()
    }
        // expect(getByText('Default View')).toBeInTheDocument();
        rerender(<Dropdown2 {...props}/>)
      
        expect(screen.getByText("nwjdn")).toBeDefined();
    })
    it('should search input field had been changed one time', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"sample"}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByPlaceholderText('Search');
        fireEvent.change(textarea, { target: { value: 'Hello, world!' } });
        expect(mockOnChange).toHaveBeenCalledTimes(1);
    })
    it('should render the Default View button', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"ALL"}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByTestId('inputhandleselect');
        fireEvent.click(textarea);
        // expect(mockOnChange).toHaveBeenCalledTimes(1);
    })
    it('should inputhandleselect input method has been checked with sample data', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"sample",isMandatory:true}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByTestId('inputhandleselect');
        fireEvent.click(textarea);
        expect(textarea.checked).toBe(true);
    })
    it('should inputhandleselect input method has been checked with sample data and isMandatory:false', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"sample",isMandatory:false}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByTestId('inputhandleselect');
        fireEvent.click(textarea);
        expect(textarea.checked).toBe(true);
    })
    it('should inputhandleselect input method has been checked with sample data and isMandatory:true', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"sample",isMandatory:true,columns:[{key:"sample",isMandatory:false}]}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByTestId('inputhandleselect');
        fireEvent.click(textarea);
        expect(textarea.checked).toBe(true);
    })
    it('should inputhandleselect input method has been checked with sample data', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"sample",isMandatory:true}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByTestId('toggleSubOptions');
        fireEvent.click(textarea);
        expect(screen.getByText('SAMPLE')).toBeInTheDocument()
    })
    it('should inputhandleselect input method has been checked with sample data', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"sample",isMandatory:true}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByTestId('MenuDropdown2 input');
        fireEvent.click(textarea);
        expect(screen.getByText('SAMPLE')).toBeInTheDocument()
    }),
    it('should inputhandleselect input method has been checked with sample data', async () => {
        const mockOnChange=jest.fn()
        const props={
            setColSearchText:mockOnChange,
            userPreference:{
                grid_columns:[{name:"sample",isMandatory:true,columns :[{key:1}]}]
            }, setUserPreference:jest.fn(), setSelectedColumnsArray:jest.fn(),colSearchText:"Search"
        }
         render(<Dropdown2 {...props}/>)
        // expect(getByText('Default View')).toBeInTheDocument();
        const textarea:any = screen.getByTestId('MenuDropdown2 input');
        fireEvent.click(textarea);
        expect(screen.getByText('SAMPLE')).toBeInTheDocument()
    })
})

