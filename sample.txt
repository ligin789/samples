import "./AddRule.css";
import { useEffect, useState } from "react";
import Dropdown from "./dropDown/DropDownComponent";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPen, faTrash } from "@fortawesome/free-solid-svg-icons";
import VerticalLine from "../../atoms/verticalLine";
import Strings from "../../globals/Strings";
import Colors from "../../globals/Colors";
import Styles from './styles';
import DeleteEditButtonContainer from "../deleteEditButtonContainer";
import { useDispatch, useSelector } from "react-redux";
import { Reducer } from "../../globals/PropTypes";
import { configurationTabDetails } from "../../store/configurationTab/action";

const AddRule = (props: any) => {
    const {listItemData,isFormEditable,setShowForm,handleSaveAction,handleCancelAction} = props;

    const dispatch = useDispatch()
    const configurationTabListReferenceData = useSelector((state:Reducer) => state.configurationTabViewReducer.configurationTabReferenceData)
    console.log("configurationTabListReferenceData",configurationTabListReferenceData)
    
    const {fltPriority,starFltIndicator,domain,travelType,acType,weightageHierarchy,threshold}:any = configurationTabListReferenceData
    console.log(fltPriority,starFltIndicator,domain,travelType,acType,weightageHierarchy,threshold)
    useEffect(() => {
        dispatch(configurationTabDetails.getConfigListReferenceData())
    },[])
    
    const emptyValuestoFill = Strings.ADD_RULE.DEFAULT_DATA
    const Flight_Priority = fltPriority || []
    const Star_flight = starFltIndicator || []
    const TravelType =  travelType || []
    const Aircraft_type = acType || []
    const Weight_level = weightageHierarchy || []
    const Threshold_options = threshold || []
    const Domain = domain || []
    const defaultDataFill= listItemData ? listItemData : emptyValuestoFill
    const editable = isFormEditable ? Strings.ADD_RULE.AUTO : Strings.ADD_RULE.NONE
    const [onEdit, setOnEdit] = useState<any>(editable)
    const [finalObject,setFinalObject] = useState <any> (defaultDataFill)
    const id = defaultDataFill['id'] || '' ;
    
    const handleChange = (e: any) => {
        let tempArray = e.target.name.split('_')
        let tempObj: any = { ...finalObject[tempArray[0]] }
        if (tempArray[2] !== null && tempArray[2] !== undefined) {
            if(tempArray[2]===Strings.ADD_RULE.ISGREATER) {
                tempObj[tempArray[1]][tempArray[2]] = e.target.value===Strings.ADD_RULE.GREATER_THEN ? true : false;
            }else{
                tempObj[tempArray[1]][tempArray[2]] = e.target.value;
            }
            setFinalObject({ ...finalObject, [tempArray[0]]: tempObj })
        } else if (tempArray[1] !== null && tempArray[1] !== undefined) {
            tempObj[tempArray[1]] = e.target.value;
            setFinalObject({ ...finalObject, [tempArray[0]]: tempObj })
        }
        else {
            setFinalObject({ ...finalObject, [e.target.name]: e.target.value })
        }
    }

    const handleSave = () =>{
        if(finalObject.Description.trim().length && finalObject.expression.trim().length && finalObject.threshold.low.value.trim().length && finalObject.threshold.medium.value.trim().length && finalObject.threshold.high.value.trim().length && finalObject.cost.low.trim().length && finalObject.cost.medium.trim().length && finalObject.cost.high.trim().length){
            handleSaveAction({formData:finalObject,isUpdateDataAction:id.trim() !== ''})
            setShowForm(false)
        }else {
            alert("Please enter all the required fields...")
        }
    }
    const renderDropDownView = (title: any, dropdownOptionsList: any, className: any,defaultValue:any,name:any,value:any) => {
        return (
            <div className="common-flexcolumn" >
                <text className="dropdown-title" >{title}</text>
                <Dropdown className={className} name={name} handleChange={handleChange} options={dropdownOptionsList} pointerEvents={onEdit} defaultValue={defaultValue} value={value}/>
            </div>
        )
    }
    return (
       <div style={Styles.addruleContainer}>
            <div className="addrule-titleView">
                <>
                    <text className="addrule-title">{listItemData ? Strings.ADD_RULE.RULE_NAME : Strings.ADD_RULE.NEW_RULE}</text>
                </>
                {
                    onEdit === Strings.ADD_RULE.NONE ?
                        <div className="buttonView">
                            <DeleteEditButtonContainer onDeleteClick={handleCancelAction} onEditClick={() => { setOnEdit(Strings.ADD_RULE.AUTO) }} />
                        </div>

                        : <></>
                }
            </div>
            <div className="addrule-bag" style={ { ...Styles.descriptionView, pointerEvents: onEdit }} >
                <div className="common-flexcolumn" >
                    <text className="descrp-title">{Strings.ADD_RULE.DESCRIPTION_TEXT}</text>
                    <input type="text" placeholder="Enter" className="description-text" style={{ backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }} name={Strings.ADD_RULE.DESCRIPTION} value={finalObject.Description} onChange={handleChange} />
                </div>
                <div className="first-dropdownsView" style={Styles.firstDropdownsView}>
                    {renderDropDownView(Strings.ADD_RULE.FLIGHT_PROPRITY, Flight_Priority, "dropdown-one",Flight_Priority[0],Strings.ADD_RULE.FLT_PRIORITY,finalObject.fltPriority)}
                    {renderDropDownView(Strings.ADD_RULE.STAR_FLIGHT_INDICATOR, Star_flight, "dropdown-one",Star_flight[0],Strings.ADD_RULE.STAR_FLT_INDICATOR,finalObject.starFltIndicator)}
                    {renderDropDownView(Strings.ADD_RULE.DOM_INT_INDICATOR, TravelType, 'dropdown-one',TravelType[0],Strings.ADD_RULE.TRAVEL_TYPE,finalObject.travelType)}
                    {renderDropDownView(Strings.ADD_RULE.AIRCRAFT_TYPE, Aircraft_type, 'dropdown-one',Aircraft_type[0],Strings.ADD_RULE.AC_TYPE,finalObject.acType)}
                    {renderDropDownView(Strings.ADD_RULE.WEIGHTAGE, Weight_level, 'dropdown-two',Weight_level[0],Strings.ADD_RULE.WEIGHTAGE_HIERARCHY,finalObject.weightageHierarchy )}
                    {renderDropDownView(Strings.ADD_RULE.DOMAIN_TITLE, Domain, 'dropdown-two',Domain[0],Strings.ADD_RULE.DOMAIN,finalObject.Domain )}
                </div>
                <div className="second-dropdownView" style={Styles.secondDropdownView}>
                    <div className="common-flexcolumn" >
                        <text className="dropdown-title">{Strings.ADD_RULE.THRESHOLD_LOW}</text>
                        <div className="drodownwithtext" style={{...Styles.dropdownwithtext, backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }}>
                            <Dropdown className="dropdown-combine" name='threshold_low_isGreater' handleChange={handleChange} options={Threshold_options} pointerEvents={onEdit} defaultValue={Threshold_options[0]} value={finalObject[Strings.ADD_RULE.THRESHOLD][Strings.ADD_RULE.LOW][Strings.ADD_RULE.ISGREATER] ? Strings.ADD_RULE.GREATER_THEN : Strings.ADD_RULE.LESS_THEN} />
                            <VerticalLine className="verticalLine"/>
                            <input type="text" placeholder="" className="textValue" style={{ backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }} name="threshold_low_value" value={finalObject[Strings.ADD_RULE.THRESHOLD][Strings.ADD_RULE.LOW][Strings.ADD_RULE.VALUE]} onChange={handleChange} />
                        </div>
                    </div>
                    <div className="common-flexcolumn" >
                        <text className="dropdown-title">{Strings.ADD_RULE.COST_LOW}</text>
                        <input type="text" placeholder="" className="thrshold-text" style={{ backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }} name="cost_low" value={finalObject[Strings.ADD_RULE.COST][Strings.ADD_RULE.LOW]} onChange={handleChange} />
                    </div>

                </div>
                <div className="second-dropdownView" style={Styles.secondDropdownView}>

                    <div className="common-flexcolumn" >
                        <text className="dropdown-title">{Strings.ADD_RULE.THRESHOLD_MEDIUM}</text>
                        <div className="drodownwithtext" style={{ ...Styles.dropdownwithtext, backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }}>
                            <Dropdown className="dropdown-combine" name='threshold_medium_isGreater' handleChange={handleChange} options={Threshold_options} pointerEvents={onEdit} defaultValue={Threshold_options[0]} value={finalObject[Strings.ADD_RULE.THRESHOLD][Strings.ADD_RULE.MEDIUM][Strings.ADD_RULE.ISGREATER] ? Strings.ADD_RULE.GREATER_THEN  : Strings.ADD_RULE.LESS_THEN} />
                            <div className="verticalLine" />
                            <input type="text" placeholder="" className="textValue" style={{ backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }} name="threshold_medium_value" value={finalObject[Strings.ADD_RULE.THRESHOLD][Strings.ADD_RULE.MEDIUM][Strings.ADD_RULE.VALUE]} onChange={handleChange} />
                        </div>
                    </div>
                    <div className="common-flexcolumn">
                        <text className="dropdown-title">{Strings.ADD_RULE.COST_MEDIUM}</text>
                        <input type="text" placeholder="" className="thrshold-text" style={{ backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }} name="cost_medium" value={finalObject[Strings.ADD_RULE.COST][Strings.ADD_RULE.MEDIUM]} onChange={handleChange} />
                    </div>
                </div>
                <div className="second-dropdownView" style={Styles.secondDropdownView}>
                    <div className="common-flexcolumn" >
                        <text className="dropdown-title">{Strings.ADD_RULE.THRESHOLD_HIGH}</text>
                        <div className="drodownwithtext" style={{ ...Styles.dropdownwithtext, backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }}>
                            <Dropdown className="dropdown-combine" name='threshold_high_isGreater' handleChange={handleChange} options={Threshold_options} pointerEvents={onEdit} defaultValue={Threshold_options[0]} value={finalObject[Strings.ADD_RULE.THRESHOLD][Strings.ADD_RULE.HIGH][Strings.ADD_RULE.ISGREATER] ? Strings.ADD_RULE.GREATER_THEN  : Strings.ADD_RULE.LESS_THEN} />
                            <div className="verticalLine" />
                            <input type="text" placeholder="" className="textValue" style={{ backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }} name="threshold_high_value" value={finalObject[Strings.ADD_RULE.THRESHOLD][Strings.ADD_RULE.HIGH][Strings.ADD_RULE.VALUE]} onChange={handleChange} />
                        </div>
                    </div>
                    <div className="common-flexcolumn"  style={{}}>
                        <text className="dropdown-title">{Strings.ADD_RULE.COST_HIGH}</text>
                        <input type="text" placeholder="" className="thrshold-text" style={{ backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }} name="cost_high" value={finalObject[Strings.ADD_RULE.COST][Strings.ADD_RULE.HIGH]} onChange={handleChange} />
                    </div>

                </div>

                <div style={{ display: 'flex', flexDirection: 'column', marginTop: 19 }}>
                    <text className="expresTitle">{Strings.ADD_RULE.EXPRESSION_TEXT}</text>
                    <textarea name={Strings.ADD_RULE.EXPRESSION} placeholder="Enter" className="expresInput" style={{font: 'normal normal normal 14px Roboto', backgroundColor: onEdit === Strings.ADD_RULE.NONE ? Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_VIEWONLY : Colors.ADD_RULE.ADD_RULE_INPUT_BG_COLOR_EDITABLE }}
                    onChange={handleChange}
                    >{finalObject.expression}</textarea>
                </div>
                {
                    onEdit !== 'none' ?
                        <div className="saveandcancelView" style={{ display: 'flex', flexDirection: 'row-reverse', marginTop: 30 }}>
                            <button onClick={handleSave} className="save-button" >
                                <text className="save-buttonText">{Strings.ADD_RULE.SAVE}</text>
                            </button>

                            <button onClick={handleCancelAction} className="cancel-button"> 
                                <text className="cancel-buttonText">{Strings.ADD_RULE.CANCEL}</text>
                            </button>
                        </div>
                        : <></>
                }
            </div>
        </div>
    );
}

export default AddRule;
