import React, { useEffect, useRef } from "react";
import mapboxgl from "mapbox-gl";
import { ScatterplotLayer, ArcLayer } from "@deck.gl/layers";
import { MapboxOverlay } from "@deck.gl/mapbox";
import "mapbox-gl/dist/mapbox-gl.css";
 import './App.css'
const arcData = [
  {
    source: [76.391948, 10.155136],
    destination: [76.921474, 8.482045],
  },
  {
    source: [76.391948, 10.155136],
    destination: [78.634644,15.082732],
  },
];
 
const MapWithDeckGL: React.FC = () => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const overlayRef = useRef<MapboxOverlay | null>(null);
 
  useEffect(() => {
    mapboxgl.accessToken = "pk.eyJ1IjoicHJhdmVlbmFtYmFkeSIsImEiOiJjbGkyd3FlazgwOXpuM2puMGFjZjJxNTg2In0.AmDB8VR5ARnytVldY_dZdQ";
 
    const map = new mapboxgl.Map({
      container: mapContainer.current as HTMLDivElement,
      style: "mapbox://styles/mapbox/streets-v10",
      zoom: 11,
      center: [76.391948, 10.155136],
      maxZoom: 21,
      pitch: 60,
      // antialias: true,
    });
 
    mapRef.current = map;
 
    const scatterLayer = new ScatterplotLayer({
      id: "scatterplot-layer",
      data: arcData,
      opacity: 0.8,
      stroked: true,
      filled: true,
      radiusScale: 6,
      radiusMinPixels: 1,
      radiusMaxPixels: 100,
      lineWidthMinPixels: 3,
      getPosition: (d: any) => d.destination,
      getRadius: () => 6,
      getFillColor: () => [184, 134, 11],
      getLineColor: () => [222, 0, 130],
    });
 
    const arcLayer = new ArcLayer({
      id: "arc-layer",
      data: arcData,
      getWidth: 10,
      getSourcePosition: (d: any) => d.source,
      getTargetPosition: (d: any) => d.destination,
      getSourceColor: () => [220, 20, 60],
      getTargetColor: () => [0, 0, 139],
    });
 
// Initialize Deck.gl overlay
    const overlay = new MapboxOverlay({
      layers: [scatterLayer, arcLayer],
    });
 
    overlayRef.current = overlay;
    map.addControl(overlay);
 
    return () => map.remove();
  }, []);
 
  const display2dBuilding = () => {
    if (overlayRef.current) {
      overlayRef.current.setProps({ layers: [] }); // Remove layers
    }
  };
 
  const display3dBuilding = () => {
    if (overlayRef.current) {
      const arcLayer = new ArcLayer({
        id: "arc-layer",
        data: arcData,
        getWidth: 7,
        getSourcePosition: (d: any) => d.source,
        getTargetPosition: (d: any) => d.destination,
        getSourceColor: () => [220, 20, 60],
        getTargetColor: () => [0, 0, 139],
      });
 
      overlayRef.current?.setProps({ layers: [arcLayer] });
    }
  };
 
  return (
    <div>
      <div ref={mapContainer} style={{ width: "100%", height: "100vh" }} />
      <button
        onClick={display2dBuilding}
        style={{
          position: "fixed",
          top: "20px",
          right: "10px",
          zIndex: 1000,
          fontSize: "20px",
        }}
      >
        2D View
      </button>
      <button
        onClick={display3dBuilding}
        style={{
          position: "fixed",
          top: "70px",
          right: "10px",
          zIndex: 1000,
          fontSize: "20px",
        }}
      >
        3D View
      </button>
    </div>
  );
};
 
export default MapWithDeckGL;
