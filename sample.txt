import { createContext, useState, ReactNode, useContext } from 'react';
 
type dataTypeOf = any;
 
interface FilterContextType {
  data: dataTypeOf;
  filterData: dataTypeOf;
  filterDataFunction: (responseContext:any,airLineContext:any,stationContext:any,tailsContext:any,flightContext:any) => void;
}
 
const FilterContext = createContext<FilterContextType | undefined>(undefined);
 
export const FilterProvider = ({ children }: { children: ReactNode }) => {
  const [fullData, setFullData] = useState()
  const [contextFilterData, setcontextFilterData] = useState()
 
  const filterDataFunction = () => {
    // setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
  };
 
  return (
    <FilterContext.Provider value={{ data, filterData ,filterDataFunction}}>
      {children}
    </FilterContext.Provider>
  );
};
 
// Custom hook (optional)
export const useFilter = () => {
  const context = useContext(FilterContext);
  if (!context) throw new Error('useTheme must be used within ThemeProvider');
  return context;
};
 
