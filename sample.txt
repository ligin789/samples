const refArrayOfDates = ["ETA (IB)", "SCHED DEP (OB)", "ETD/ACT (OB)", "SCHED ARR (OB)", "ETA/ACT (OB)", "OUT (OB)", "OFF (OB)", "ON (OB)", "IN (OB)", "PRED ETD (OB)", "PRED ETA (OB)"];
const refArrayForIcons = ["NOTES", "CRITICAL", "INDICATOR"]
const refArrayForLink = ['FLIGHT (IB)','ORIG (IB)','FLIGHT (OB)','DEP (OB)', 'ARR (OB)']
export const getFormatData = (arrayData: any, referenceColArray: any = [],isUTCToggled:boolean) => {
    let columnDefinition: any = []
    const array = JSON.parse(JSON.stringify(arrayData)) || []
    const formatRows = array.map((row: any, rowIndex: number) => {
        const newRow: any = {}
        let lengthOfColumns = 0;
        row.gridColumns = row.gridColumns.map((columnGroups: any) => {
            columnGroups.columns = columnGroups.columns.filter((column: any) => {
                return referenceColArray.includes(column.label.toLocaleUpperCase())
            })
            return columnGroups;
        })
        row.gridColumns.forEach((columnGroups: any, gridColumnIndex: number) => {
            const lengthOfGroupCol = columnGroups.columns.length;
            columnGroups.columns.forEach((column: any, colIndex: number) => {
                if (rowIndex === 0) {
                    const columnDef: any = {};
                    columnDef['field'] = column.label + ".value";;
                    columnDef['headerName'] = column.label.toLocaleUpperCase();
                    columnDef['sortable'] = false;
                    columnDef['type'] = column.type;
                    if (refArrayOfDates.includes(column.label.toLocaleUpperCase())) {
                        columnDef['cellRenderer'] = 'renderDateAndTime';
                        if(!isUTCToggled){
                            columnDef['field'] = column.label + ".valueLocal"
                        }
                    } else if(refArrayForLink.includes(column.label.toLocaleUpperCase())) {
                        columnDef['cellRenderer'] = 'linkRenderer';
                    }
                    if (lengthOfGroupCol > 1 && lengthOfGroupCol - 1 === colIndex && gridColumnIndex !== row.gridColumns.length - 1) {
                        columnDef['cellClass'] = 'separator';
                        columnDef['headerClass'] = 'separator';
                    }
                    if (lengthOfColumns === 1 && lengthOfGroupCol > 1 && gridColumnIndex !== row.gridColumns.length - 1) {
                        const object = columnDefinition[columnDefinition.length - 1]
                        if (object.type === 'icon') {
                            object['cellClass'] = 'icon_separator';
                            object['headerClass'] = 'icon_separator';
                        } else {
                            object['cellClass'] = 'separator';
                            object['headerClass'] = 'separator';
                        }
                        columnDefinition[columnDefinition.length - 1] = object;
                    }
                    columnDefinition.push(columnDef);
                    lengthOfColumns = lengthOfGroupCol;
                }
                if (!refArrayForIcons.includes(column.label.toLocaleUpperCase())) {
                    if (!column.value.length) {
                        column.value = "â€”";
                    }
                }
                newRow[column.label] = column
            })
        })
        return newRow
    })
    // console.log("column definition:", JSON.stringify(columnDefinition))
    // console.log("data:", JSON.stringify(formatRows))
    return { columnDefinition, formatRows }
}

