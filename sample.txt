import React, { useEffect, useState } from "react";
import DynamicRender from "../dynamicrenderer";
import NotificationJson from "../../assets/jsons/notification.json";
import CloseButton from "../../assets/images/closeWhite.svg"
import SearchGrey from "../../assets/images/searchGrey.svg"
import "./index.css"
import { t } from "i18next";
import Colors from "../../global/Color";
import SettingsIcon from "../../assets/images/settingsImage.svg"
import whiteBack from "../../assets/images/whiteBack.png"
import backArrow from "../../assets/images/backArrow.svg";


const Notification = (props: any) => {
  const [jsonData, setJsonData] = useState(NotificationJson);
  const [selectedCategoryOption, setSelectedCategoryOption]: any = useState(null);
  const [selectedSeverity, setSelectedSeverity] = useState("high")
  const [filteredArr, setFilteredArr] = useState([])
  const [selectedStatus, setSelectedStatus] = useState('open')
  const [selectedPeriod, setSelectedPeriod] = useState("1 - 3 Hours")
  const [searchText, setSearchText]:any = useState("")
  const [selectedView, setSelectedView] = useState("defaultView")
  const [settingsData, setSettingsData] = useState([
    { "category": "Flight Ops", isSelected: false, "subCategory": [{ "category": "sub category1", isSelected: false }, { "category": "sub category2", isSelected: false }, { "category": "sub category3", isSelected: false }] },
    { "category": "IRROPS", isSelected: false, "subCategory": [{ "category": "sub category2", isSelected: false }] },
    { "category": "Crew Ops", isSelected: false, "subCategory": [{ "category": "sub category3", isSelected: false }] },
    { "category": "Pax Ops", isSelected: false, "subCategory": [{ "category": "sub category4", isSelected: false }] },
    { "category": "Ops Restrictions", isSelected: false, "subCategory": [{ "category": "sub category5", isSelected: false }] },
    { "category": "Ops Milestones", isSelected: false, "subCategory": [{ "category": "sub category5", isSelected: false }] },

  ]);
  const statusArray = ["all", "open", "closed", "resolved", "information"]
  const severityDropdownData = ["all", "high", "medium", "low"]
  const [selectedCategory, setSelectedCategory]: any = useState(null)
  const periodArray = ["- 48 to -24 Hours", "1 - 3 Hours", "3 - 6 Hours","all"]
  const [isCateogorySelected, setIsCateogorySelected] = useState(false)
  const [selectedCategoryData, setSelectedCategoryData]: any = useState([])
  const handleCategoryClick = (category: any) => {
    setSelectedCategoryData(category)
    setIsCateogorySelected(!isCateogorySelected)
  };
  
  useEffect(() => {
    const newFilteredArr:any = jsonData.map((item: any) => ({
      ...item,
      data: item.data.filter((dataItem:any) =>
        (selectedSeverity === "all" || dataItem.widgetAttributes.severity === selectedSeverity) &&
        (selectedStatus === "all" || dataItem.widgetAttributes.notificationStatus === selectedStatus) &&
        (selectedPeriod === "all" || item.period === selectedPeriod)
      ),
    }));
  
    console.log("Filtered Array:", JSON.stringify(newFilteredArr));
    if(searchText.length){
      let searchTerm = searchText.toLowerCase();
    
const searchFilteredArray=newFilteredArr.map(period => {
        // Filter the data array for matching items
const filteredData = period.data.filter(item => {
            const widgetAttrs = item.widgetAttributes;
            
            // Check all string properties in widgetAttributes
            for (const key in widgetAttrs) {
                const value = widgetAttrs[key];
                if (typeof value === 'string' &&
                    value.toLowerCase().includes(searchTerm)) {
                    return true;
                }
            }
            return false;
        });
        
        // Return a new period object with filtered data
        return {
            ...period,
            data: filteredData
        };
    });
    setFilteredArr(searchFilteredArray)
    }
    else{
    setFilteredArr(newFilteredArr);
    }

  }, [selectedStatus, selectedSeverity, selectedPeriod, jsonData,searchText]);
  const mapFunctions = {
    closeButtonClick: () => {
      props.setNotificationClick(false);
    },
    acknowledgeIconClick: (data: any) => {
      let { widgetAttributes, mainListIndex, childComponent } = data;
      let array = JSON.parse(JSON.stringify(jsonData));

      array = array?.map((item: any, index: any) => {
        if (item.isSelected) {
          return {
            ...item,
            data: item.data.map((dataItem: any, dataIndex: any) =>
              dataIndex === mainListIndex
                ? {
                  ...dataItem,
                  widgetAttributes: {
                    ...dataItem.widgetAttributes,
                    acknowledgeIconClicked: true,
                  },
                }
                : dataItem
            ),
          };
        }
        return item;
      });
      setJsonData(array);
    },
    snoozeIconClick: (data: any) => {
      let { widgetAttributes, mainListIndex, childComponent } = data;
      let array = JSON.parse(JSON.stringify(jsonData));

      array = array?.map((item: any, index: any) => {
        if (item.isSelected) {
          return {
            ...item,
            data: item.data.map((dataItem: any, dataIndex: any) =>
              dataIndex === mainListIndex
                ? {
                  ...dataItem,
                  widgetAttributes: {
                    ...dataItem.widgetAttributes,
                    snoozeIconClicked: true,
                  },
                }
                : dataItem
            ),
          };
        }
        return item;
      });
      setJsonData(array);
    },
    timeButton: (data: any) => {
      let { widgetAttributes, mainListIndex, childComponent } = data;

      // Deep clone using JSON.parse to avoid direct mutation
      let array = JSON.parse(JSON.stringify(jsonData));

      array = array?.map((item: any, index: any) => {
        // Check if item is selected
        if (item.isSelected) {
          return {
            ...item,
            data: item.data.map((dataItem: any, dataIndex: any) =>
              dataIndex === mainListIndex
                ? {
                  ...dataItem,
                  widgetAttributes: {
                    ...dataItem.widgetAttributes,
                    selectedTimeValue: data.widgetAttributes.timeValue,
                    snoozeIconClicked: false,
                  },
                }
                : dataItem
            ),
          };
        }
        return item;
      });
      setJsonData(array);
    },
    resolveButton: (data: any) => {
      let { widgetAttributes, mainListIndex, childComponent } = data;

      // Deep clone using JSON.parse to avoid direct mutation
      let array = JSON.parse(JSON.stringify(jsonData));

      array = array?.map((item: any, index: any) => {
        // Check if item is selected
        if (item.isSelected) {
          return {
            ...item,
            data: item.data.map((dataItem: any, dataIndex: any) =>
              dataIndex === mainListIndex
                ? {
                  ...dataItem,
                  widgetAttributes: {
                    ...dataItem.widgetAttributes,
                    notificationStatus: "resolved"
                  },
                }
                : dataItem
            ),
          };
        }
        return item;
      });
      setJsonData(array);

    },
  };

  let OpenClickHandler = () => {
    setSelectedStatus("open")
  }

  let ResolveClickHandler = () => {
    setSelectedStatus('resolved')
  }
  let closeClickHandler = () => {
    setSelectedStatus('closed')
  }
  const handleCategoryChange = (event: any) => {
    setSelectedCategoryOption(event.target.value);
  };
  const handlePeriodChange = (event: any) => {
    setSelectedPeriod(event.target.value);
    
  };
  const handleSeverityChange = (event: any) => {
    setSelectedSeverity(event.target.value)
  }
  const handleStatusChange = (event: any) => {
    setSelectedStatus(event.target.value);
  };
  const doneHandle = () => {
    setSelectedView("defaultView")
  }
  const handleSearchText = (e: any) => {
    setSearchText(e.target.value)
  }

  const handleToggle = (index: any) => {
    const { item } = props
    // alert(item)
    // setSelectedView("SubCategory")
    setSelectedCategoryData((prevItems) =>
      prevItems.map((item, i) =>
        i === index ? { ...item, isSelected: !item.isSelected } : item
      )
    );
  };

  const handleSnoozeContainer = () => {
    let array = JSON.parse(JSON.stringify(jsonData));

    array = array?.map((item: any) =>
      item.isSelected
        ? {
          ...item,
          data: item.data.map((dataItem: any) => ({
            ...dataItem,
            widgetAttributes: {
              ...dataItem.widgetAttributes,
              snoozeIconClicked: false,
            },
          })),
        }
        : item
    );
    setJsonData(array);
  }
  const handleHourHeaderClick = (selectedIndex) => {
    let previousDataArray = JSON.parse(JSON.stringify(jsonData))
    previousDataArray = previousDataArray.map((item: any, index: any) => {
      if (index == selectedIndex&&!item.isSelected) {
        item.isSelected = true
      } else {
        item.isSelected = false
      }
      return item
    })
    setJsonData(previousDataArray)
  }

  return (
    <div style={{ position: "absolute", zIndex: 99, top: "20%", right: "12px", zoom: 'var(--zoomPercentage)' }}>
      <div className="NotificationView" onClick={(e: any) => { handleSnoozeContainer() }} style={{ background: Colors.notificationsBackground }}>
        <div className="NotificationHeader">
          <div className="HeaderFirstRow">
            <div className="NotificationLabel" style={{ color: Colors.whiteText }}>{t("notifications")}</div>
            <div className="CloseSettingsButton">
              {selectedView === "defaultView" && <img src={SettingsIcon} alt="settingsButton" style={{ cursor: "pointer", marginRight: "10px", height: "20px", width: "20px" }} onClick={() => setSelectedView("settings")} />}
              <img src={CloseButton} alt="CloseButton" style={{ cursor: "pointer", width: "29px", height: "29px", paddingRight: "11px" }} onClick={() => props.setNotificationClick(false)} />
            </div>
          </div>
          <div className="HeaderSecondRow">
            {selectedView === "defaultView" ?
              <div>
                <div className="FilterView">

                  <div className="CategoryFilterView">
                    <label htmlFor="dropdown" className="ByCategoryLabel" >
                      SEVERITY
                    </label>
                    <select
                      id="dropdown"
                      value={selectedSeverity}
                      onChange={handleSeverityChange}
                      aria-placeholder="Select"
                      className="DropDownSeverity"
                    >
                      <option value="" disabled selected hidden>
                        {t("select")}
                      </option>
                      {
                        severityDropdownData?.map((item: any, index: any) => {
                          return (
                            <option key={index} value={item?.value}>
                              {item}
                            </option>
                          );
                        })
                      }
                    </select>
                  </div>
                  <div className="StatusFilterView">
                    <label htmlFor="dropdown" className="ByCategoryLabel" >
                      STATUS
                    </label>
                    <select
                      id="dropdown"
                      value={selectedStatus}
                      onChange={handleStatusChange}
                      aria-placeholder="Select"
                      className="DropDownStatus"
                    >
                      <option value="" disabled selected hidden>
                        {t("select")}
                      </option>
                      {
                        statusArray?.map((item: any, index: any) => {
                          return (
                            <option key={index} value={item?.value}>
                              {item}
                            </option>
                          );
                        })
                      }
                    </select>
                  </div>
                  <div className="StatusFilterView">
                    <label htmlFor="dropdown" className="ByCategoryLabel" >
                      PERIOD
                    </label>
                    <select
                      id="dropdown"
                      value={selectedPeriod}
                      onChange={handlePeriodChange}
                      aria-placeholder="Select"
                      className="DropDownPeriod"
                    >
                      <option value="" disabled selected hidden>
                        {t("select")}
                      </option>
                      {
                        periodArray?.map((item: any, index: any) => {
                          return (
                            <option key={index} value={item?.value}>
                              {item}
                            </option>
                          );
                        })
                      }
                    </select>
                  </div>

                </div>
                <div className="SearchBoxNotification">
                  <img src={SearchGrey} alt="SearchIcon" style={{ cursor: "pointer", width: "13px", height: "13px", paddingRight: "7px", paddingLeft: "18px" }} />
                  <input
                    type="text"
                    placeholder="Search"
                    className="SearchText"
                    value={searchText}
                    // onFocus={()=> dropDownIndex <= 0 && dropDownIndex > 1 && handleDropDownIndex(-1)}
                    onChange={(e) => {
                      // if((e.target.value.toLowerCase().startsWith('c',0) || e.target.value.toLowerCase().startsWith('g',0) || e.target.value.toLowerCase().startsWith('f',0))){
                      //   handleDropDownIndex(1)
                      // } else {
                      //   handleDropDownIndex(-1)
                      // }
                      handleSearchText(e);
                      e.stopPropagation()
                    }}
                    enterKeyHint="search"
                  />
                </div>

              </div>
              : selectedView === "settings" &&
              <>
                <div className="settingsView" onClick={() => isCateogorySelected && setIsCateogorySelected(false)}>
                  {isCateogorySelected && <img src={whiteBack} style={{ width: 10, height: 16, alignSelf: 'center', paddingRight: 5 }} />}
                  Settings</div>
              </>
            }
          </div>
        </div>

        <div className="ListOuterContainer">
          {
            selectedView === "defaultView" ?
              (filteredArr?.length ?
                filteredArr?.map((item: any, index: number) => {
                  return (<div>
                    <div style={{ display: 'flex', flexDirection: "row", justifyContent: 'space-between', alignItems: "center", background: "#203679 0% 0% no-repeat padding-box", opacity: 1, padding: "5px 15px", marginBottom: 5 }} onClick={(e: any) => { handleHourHeaderClick(index); e.stopPropagation() }}>
                      <div style={{ textAlign: "left", font: "normal normal medium 16px/21px Roboto", color: "#FFFFFF", opacity: 1, paddingBottom: 5 }}> {item?.period}</div>
                      <div style={{ display: 'flex', flexDirection: "row", justifyContent: 'space-between', alignItems: "center" }}>
                        <div style={{ background: "#00165A 0% 0% no-repeat padding-box", "borderRadius": "20px", opacity: 1, color: "#FFFFFF", padding: "3px 9px", marginRight: 10 }}> {item.data.length}  </div>
                        <img src={backArrow} style={{ width: 10, height: 16, alignSelf: 'center', transform: item.isSelected ? "rotate(90deg)" : "rotate(270deg)" }} />
                      </div>
                    </div>
                    {item.isSelected && item?.data?.map((item1: any, index: number) =>
                      <DynamicRender data={item1} mainListIndex={index} mappedFunctions={mapFunctions} />
                    )}
                  </div>)
                }
                )
                : <div style={{ marginTop: "40%", textAlign: "center", color: "#FFFFFF", font: "normal normal normal 19px/15px Roboto" }}>No New Notifications</div>) :
              selectedView === "settings" &&
              <div style={{ paddingLeft: 15 }}>
                {
                  !isCateogorySelected ?
                    <div>
                      {settingsData?.map((item: any, index: any) => {
                        return (
                          <div className="settingsRow" onClick={() => handleCategoryClick(item.subCategory)}>
                            <label className="categoryList">{item.category}</label>
                            <div style={{ marginRight: "17px" }}>
                              <div style={{ color: "#FFFFFF", cursor: "pointer" }} >&#10095;</div>

                            </div>
                          </div>
                        )
                      })}
                      <div className="DoneButton" onClick={doneHandle}>
                        <label className="DoneLabel">Done</label>
                      </div>
                      <div className="CancelButton" onClick={() => setSelectedView("defaultView")}>
                        <label className="CancelLabel">Cancel</label>
                      </div>
                    </div>
                    :
                    selectedCategoryData && selectedCategoryData.map((itemData: any, index: any) => {
                      return (
                        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: "space-between", alignItems: "center", borderBottom: "1px solid #405287", paddingBottom: "7px" }}>
                          <span className="subCategoryLabel">{itemData.category} </span>
                          <label className={`subCategorySwitch ${itemData.isSelected ? "subCategoryChecked" : ""}`} style={{ backgroundColor: itemData.isSelected ? Colors.white : Colors.common }}>
                            <input
                              type="checkbox"
                              checked={itemData.isSelected}
                              onChange={() => handleToggle(index)}
                            />
                            <span className="subCategorySlider" style={{ backgroundColor: itemData.isSelected ? Colors.common : Colors.white }}></span>
                          </label>
                        </div>
                      )
                    })
                }

              </div>
          }
        </div>
      </div>
    </div>
  );
};

export default Notification;
