import  { useEffect, useState } from "react";
import HomeComponent from "./HomeComponent";
import Header from "../../components/header";
import { Dashboard } from "../../components/dahboard";
import homeComponentDataJson from '../../assets/jsons/flightCard.json'
import resolverComponentData from '../../assets/jsons/swapJson.json'
import ResolverComponent from "../resolverScreen/index";
import DashboardColored from "../../components/dashboardColored/dashboardColoredComponent";
import referenceData from "../../components/data.json";
import { filterFlightData } from "../../utils/datafilterCommon";
import data from "../../assets/jsons/data.json"
import moment from "moment";

let checker=true
let filter=false
const index = () => {
  useEffect(() => {
    checker=true
  }, [window.location.pathname])
  
  
  const homeComponentData=homeComponentDataJson
  const [tab, setTab] = useState(1);
  const [runResolver, setRunResolver] = useState(false);
  const [selectedStation,setSelectedStation] = useState("ALL")
  const [showPopup, setShowPopup] = useState(false);
  const [popupData, setPopupData] = useState(null);
  const [resolveOptionData, setResolveOptionData] = useState(null);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [stationData, setStationData] = useState(referenceData.header.station);
  const [airlineData, setAirlineData] = useState(referenceData.header.airline);
  const [tailData, setTailData] = useState<any>([] );
  const [flightData, setFlightData] = useState<any>([] );
  const [filterdData,setFilterdData] = useState(null)
  const [dashbordData,setDashboradData]= useState<any>(null)
  const [isGanttClicked, setIsGanttClicked] = useState(false);

  useEffect(() => {
    const formatStartDate = moment().format('YYYY-MM-DDT13:20:00Z'); // 'YYYY-MM-DDTHH:MM'
    const formatEndDate = moment().add(1,'day').format('YYYY-MM-DDT13:20:00Z'); // 'YYYY-MM-DDTHH:MM'
    setStartDate(formatStartDate);
    setEndDate(formatEndDate)
    setTimeout(()=>{setTab(0)},10)
  }, []);
  useEffect(()=>{
    console.log("useEffect")
    if(checker&&tailData.length>0){
      checker=false
      let selectedTail = tailData.filter((item:any)=> item.isSelected).map((ite:any) => ite.value)
      let selectedFlight = flightData.filter((item:any)=> item.isSelected).map((ite:any) => ite.value)
      let selectedAirline = airlineData.filter((item:any)=> item.isSelected).map((ite:any) => ite.value)
      let prepareFilterdata = filterFlightData(data,selectedStation,selectedAirline[0],selectedTail[0],selectedFlight[0])
      setFilterdData(prepareFilterdata)
    }
    
  },[data,tailData,airlineData,selectedStation,flightData])

  // useEffect(()=>{
  //   console.log("useEffect")
  //   if(checker&&tailData.length>0){
  //     checker=false
  //     let selectedTail = tailData.filter(item=> item.isSelected).map(ite => ite.value)
  //     let selectedFlight = flightData.filter(item=> item.isSelected).map(ite => ite.value)
  //     let selectedAirline = airlineData.filter(item=> item.isSelected).map(ite => ite.value)
  //     let prepareFilterdata = filterFlightData(data,selectedStation,selectedAirline[0],selectedTail[0],selectedFlight[0])
  //     setFilterdData(prepareFilterdata)
  //   }
    
  // },[data,tailData,airlineData,selectedStation])

  useEffect(()=>{
    // if(checker&& filterdData){
    // checker=false
    if(!filter){
      // filter=false
      const { flights, tails } = extractFlightAndTailOptions(filterdData)
      setFlightData(flights)
      setTailData(tails)
    }
      

    // }
    const dashboard = dashboardData(filterdData)

    setDashboradData(dashboard)
    
  },[filterdData])

  useEffect(() => {
    if(runResolver){
      let data=resolverComponentData.filter(item=>item.baseStation===selectedStation)
      console.log(data,"popupData")
      setPopupData(data?.[0]?.options)
      setResolveOptionData(data)
    }


  }, [selectedStation,runResolver,resolverComponentData])

  const showPopupFunction = (data:any)=> {
    console.log(data)
    // setPopupData(data)
    setShowPopup((prev)=>!prev)
  }
  const resolveClickFunction=()=>{
    setRunResolver(true)
  }
  const statusData = [
    { label: 'PUBLISHED', value: 6, color: '#249015' },
    { label: 'ADVISED', value: 4, color: '#F5760B' },
    { label: 'PENDING', value: 3, color: '#E63B3B' },
    { label: 'TOTAL', value: 13, color: '#2B2B2B' },
  ];
  const statusData2 = [
    { label: 'MAX DELAY', value: 60, color: '#E63B3B' },
    { label: 'MIN DELAY', value: 10, color: '#F5760B' },
    { label: 'AVG. DELAY', value: 20, color: '#2B2B2B' },
  ];
  const  extractFlightAndTailOptions = (data:any) => {
    const flightSet:any = new Set()
    const tailSet:any = new Set()
  
    data?.forEach((item:any) => {
      item.flights.forEach((flight:any) => {
        flightSet.add(flight.carrierCode+flight.flightNumber);
        tailSet.add(flight.tailNumber);
      });
  
      // item.alternateTails.forEach(alt => {
      //   flightSet.add(alt.carrierCode+alt.flightNumber);
      //   tailSet.add(alt.tailNumber);
      // });
    });
    const flights = [
      { value: "ALL", isSelected: true },
      ...Array.from(flightSet).map(f => ({ value: f, isSelected: false }))
    ];
  
    const tails = [ 
      { value: "ALL", isSelected: true },
      ...Array.from(tailSet).map(t => ({ value: t, isSelected: false }))
    ];
  
    return { flights, tails };
  }
  const dashboardData = (data:any) => {
    const tailSet = new Set();
    let totalFlights = 0;
    let paxConnection = 0;
    let crewConnection = 0;
  
    data?.forEach((entry:any) => {
      entry.flights.forEach((flight:any) => {

        if (flight.tailNumber) {
          tailSet.add(flight.tailNumber);
        }
  
        const stationList = flight.widgetAttributes?.['#stationList'] || [];
        totalFlights += Math.max(0, stationList.length - 1);
  
        paxConnection += flight.widgetAttributes?.paxConx || 0;
        crewConnection += flight.widgetAttributes?.crewConx || 0;
      });
    });
  
    return {
      totalTails: tailSet.size,
      totalFlights,
      paxConnection,
      crewConnection,
      totalConnection: paxConnection + crewConnection
    };
  }
  return (
    <>
      <div style={{ height: tab === 1 && isGanttClicked ? "90px" : tab ===2 ? "90px" :"160px" , zoom: 'var(--zoomPercentage)' }}>
        <Header startDate={startDate} endDate={endDate} stationData={stationData}
        checker={checker}
        airlineData={airlineData}
        setStartDate={(value: any) => { setStartDate(value) }}
        setEndDate={(value: any) => { setEndDate(value) }}
        setStationData={(value: any) => { setFilterdData(data);setStationData(value);checker=true;filter=false;setTailData([])}}
        setAirlineData={(value: any) => { setFilterdData(data);setAirlineData(value);checker=true;filter=false ;setFilterdData(data) }}
         showPopupFunction={showPopupFunction}  
        setTab={(tabValue: number) => { setTab(tabValue); setRunResolver(false) }} tab={tab} setSelectedStation={setSelectedStation}/>
        {tab!==2 &&(!runResolver ? tab ===1 && isGanttClicked ?null: <Dashboard
        tailData={tailData}
        flightData={flightData}
        setTailData={(value: any) => {console.log(value,"value"); setFilterdData(data) ;setTailData(value);checker=true;filter=true }}
        setFlightData={(value: any) => { setFlightData(value);checker=true;filter=true; setFilterdData(data) }}
        dashbordData={dashbordData}
         />:
        <div className="coloredDashboardContainer">
          <div className="coloredDashboard"> <DashboardColored data={statusData} /></div>
          <div className="coloredDashboard"> <DashboardColored data={statusData2} /></div>
        </div>)}
      </div>

     {!runResolver || tab!=1  ?
      <HomeComponent filterdData={!checker? filterdData:[]} showPopupFunction={showPopupFunction} resolveClickFunction={resolveClickFunction} runResolver={runResolver} flightcardJson={homeComponentData} tab={tab} selectedStation={selectedStation} showPopup={showPopup}   isGanttClicked={isGanttClicked} setIsGanttClicked={setIsGanttClicked}/>
     :
     <ResolverComponent popupData={popupData} setPopupData={setPopupData} showPopupFunction={showPopupFunction} resolveClickFunction={resolveClickFunction} runResolver={runResolver} flightcardJson={resolveOptionData} tab={tab} selectedStation={selectedStation} showPopup={showPopup} />

      } 
    </>
  );
};

export default index;



error TS2345: Argument of type '({ baseStation: string; flights: ({ carrierCode: string; flightNumber: string; aircraftType: string; tailNumber: string; id: string; origin: number[]; destination: number[]; speed: number; distance: number; time: number; widgetAttributes: { ...; }; widgetTemplate: { ...; }; ganttData: { ...; }; } | { ...; })[]; alte...' is not assignable to parameter of type 'SetStateAction<null>'.
  Type '({ baseStation: string; flights: ({ carrierCode: string; flightNumber: string; aircraftType: string; tailNumber: string; id: string; origin: number[]; destination: number[]; speed: number; distance: number; time: number; widgetAttributes: { ...; }; widgetTemplate: { ...; }; ganttData: { ...; }; } | { ...; })[]; alte...' provides no match for the signature '(prevState: null): null'.

192         setFlightData={(value: any) => { setFlightData(value);checker=true;filter=true; setFilterdData(data) }}
                              
