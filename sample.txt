import moment from 'moment';
import './addEdit.css';
import React from 'react';
import Colors from '../../../global/Color';
import { referenceViewAction } from '../../../redux/referenceData/action';
import { connect } from 'react-redux';

const DomainAddEdit = (props: any) => {
    let { domain, cancelHandel, selectedObject, selectedType } = props;
    const origList = ['LIS', 'FAO', 'FNC', 'LIS', 'PDL', 'OPD', 'PXO', 'TER'];
    const destList = ['LIS', 'FAO', 'FNC', 'LIS', 'PDL', 'OPD', 'PXO', 'TER'];
    const countryList = ['Portugal', 'India'];
    const cityList = ['Faro', 'Funchal', 'Lisbon'];
    const airportList = ['Gago Coutinho Airport', 'Cristiano Ronaldo International Airport', 'Humberto Delgado Airport'];
    const regions = ['Europe', 'America', 'Asia'];
    const crewTypeList = ['Cabin Crew', 'Flight Crew'];
    const CONX_STATUS = ['II', 'DD', 'DI', 'ALL'];
    const countryCodeList = ['GB', 'BR'];
    const codeShare = ['Y', 'N'];

    // for MGT domain state
    const [aircraftType, setAircraftType] = React.useState('');
    const [fSeatsCapacity, setfSeatsCapacity] = React.useState(0);
    const [bSeatsCapacity, setbSeatsCapacity] = React.useState(0);
    const [eSeatsCapacity, seteSeatsCapacity] = React.useState(0);
    const [overallPayload, setOverallPayload] = React.useState(0);
    const [cargoPayload, setCargoPayload] = React.useState(0);
    const [MGT, setMGT] = React.useState(0);

    // for Airport domain state 
    const [iata, setIata] = React.useState('');
    const [icao, setIcao] = React.useState('');
    const [country, setCountry] = React.useState('');
    const [region, setRegion] = React.useState('');
    const [city, setCity] = React.useState('');
    const [airport, setAirport] = React.useState('');

    // for Crew MCT domain state
    const [mct, setMct] = React.useState(0);
    const [crewType, setCrewType] = React.useState('');
    const [arrStn, setArrStn] = React.useState('');
    const [depStn, setDepStn] = React.useState('');
    const [conxStatus, setConxStatus] = React.useState('');
    const [rangeStart, setRangeStart] = React.useState(0);
    const [rangeEnd, setRangeEnd] = React.useState(0);
    const [effFrom, setEffFrom] = React.useState('');
    const [effTo, setEffTo] = React.useState('');
    const [arrTerminal, setArrTerminal] = React.useState('');
    const [depTerminal, setDepTerminal] = React.useState('');

    // for PAX MCT domain state
    const [arrCarrier, setArrCarrier] = React.useState('');
    const [arrCodeShareIND, setArrCodeShareIND] = React.useState('');
    const [arrCodeShareOP, setArrCodeShareOP] = React.useState('');
    const [arrFltRangeStart, setArrFltRangeStart] = React.useState('');
    const [arrFltRangeEnd, setArrFltRangeEnd] = React.useState('');
    const [depCarrier, setDepCarrier] = React.useState('');
    const [depCodeShareIND, setDepCodeShareIND] = React.useState('');
    const [depCodeShareOP, setDepCodeShareOP] = React.useState('');
    const [depFltRangeStart, setDepFltRangeStart] = React.useState('');
    const [depFltRangeEnd, setDepFltRangeEnd] = React.useState('');
    const [prevCountry, setPrevCountry] = React.useState('');
    const [nextCountry, setNextCountry] = React.useState('');
    const [paxId, setPaxId] = React.useState("")
    const [crewId, setCrewId] = React.useState("")

    const doneHandle: any = () => {
        if (domain === 'MGT') {
            console.log("selectedType", selectedType)
            if (aircraftType == '' || fSeatsCapacity == 0 || bSeatsCapacity == 0 || eSeatsCapacity == 0 || overallPayload == 0 || cargoPayload == 0 || MGT == 0) {
                alert("Please enter the valid fields")
            } else if (selectedType == 'Add') {
                props.insertMgtData({ aircraftType: aircraftType, fSeatsCapacity: fSeatsCapacity, bSeatsCapacity: bSeatsCapacity, eSeatsCapacity: eSeatsCapacity, overallPayload: overallPayload, cargoPayload: cargoPayload, MGT: MGT })
                props.setShowDetail(false)
                // props.retrieveMgtData()
            } else if (selectedType == "Edit") {
                props.updateMgtData({ aircraftType: aircraftType, fSeatsCapacity: fSeatsCapacity, bSeatsCapacity: bSeatsCapacity, eSeatsCapacity: eSeatsCapacity, overallPayload: overallPayload, cargoPayload: cargoPayload, MGT: MGT })
                props.setShowDetail(false)
                // props.retrieveMgtData()
            }
        }
        else if (domain === 'Airports') {
            if (iata == '' || country == '' || city == '' || airport == '' || icao == '') {
                alert("Please enter the valid fields")
            } else if (selectedType == 'Add') {
                props.insertAirportData({ iata: iata, country: country, city: city, airport: airport, icao: icao })
                props.setShowDetail(false)
                // props.retrieveAirportData()
            } else if (selectedType == "Edit") {
                props.updateAirportData({ iata: iata, country: country, city: city, airport: airport, icao: icao })
                props.setShowDetail(false)
                // props.retrieveMgtData()
            }
        } else if (domain === 'PAX MCT') {
            if (mct == 0 || arrStn == '' || depStn == '' || conxStatus == '' || arrCarrier == '' || arrCodeShareIND == '' || arrCodeShareOP == '' || arrFltRangeStart == '' || arrFltRangeEnd == '' || depCarrier == '' || depCodeShareIND == '' || depCodeShareOP == '' || depFltRangeStart == '' || depFltRangeEnd == '' || prevCountry == '' || nextCountry == '' || effFrom == '' || effTo == '' || arrTerminal == '' || depTerminal == '') {
                alert("Please enter the valid fields")
            } else if (selectedType == 'Add') {
                props.insertPaxData({ id: selectedObject.id, mct: mct, arrStn: arrStn, depStn: depStn, conxStatus: conxStatus, arrCarrier: arrCarrier, arrCodeShareIND: arrCodeShareIND, arrCodeShareOP: arrCodeShareOP, arrFltRangeStart: arrFltRangeStart, arrFltRangeEnd: arrFltRangeEnd, depCarrier: depCarrier, depCodeShareIND: depCodeShareIND, depCodeShareOP: depCodeShareOP, depFltRangeStart: depFltRangeStart, depFltRangeEnd: depFltRangeEnd, prevCountry: prevCountry, nextCountry: nextCountry, effFrom: effFrom, effTo: effTo, arrTerminal: arrTerminal, depTerminal: depTerminal })
                props.setShowDetail(false)
            } else if (selectedType == "Edit") {
                props.updatePaxData({ id: selectedObject.id, mct: mct, arrStn: arrStn, depStn: depStn, conxStatus: conxStatus, arrCarrier: arrCarrier, arrCodeShareIND: arrCodeShareIND, arrCodeShareOP: arrCodeShareOP, arrFltRangeStart: arrFltRangeStart, arrFltRangeEnd: arrFltRangeEnd, depCarrier: depCarrier, depCodeShareIND: depCodeShareIND, depCodeShareOP: depCodeShareOP, depFltRangeStart: depFltRangeStart, depFltRangeEnd: depFltRangeEnd, prevCountry: prevCountry, nextCountry: nextCountry, effFrom: effFrom, effTo: effTo, arrTerminal: arrTerminal, depTerminal: depTerminal })
                props.setShowDetail(false)
            }
        }
        else if (domain === 'Crew MCT') {
            if (mct == 0 || crewType == '' || arrStn == '' || conxStatus == '' || depStn == '' || rangeStart == 0 || rangeEnd == 0 || effFrom == '' || effTo == '' || arrTerminal == '' || depTerminal == '') {
                alert("Please enter the valid fields")
            } else if (selectedType == 'Add') {
                props.insertCrewData({ mct: mct, crewType: crewType, arrStn: arrStn, conxStatus: conxStatus, depStn: depStn, rangeStart: rangeStart, rangeEnd: rangeEnd, effFrom: effFrom, effTo: effTo, arrTerminal: arrTerminal, depTerminal: depTerminal })
                props.setShowDetail(false)
            } else if (selectedType == "Edit") {
                props.updateCrewData({ id: selectedObject.id, mct: mct, crewType: crewType, arrStn: arrStn, conxStatus: conxStatus, depStn: depStn, rangeStart: rangeStart, rangeEnd: rangeEnd, effFrom: effFrom, effTo: effTo, arrTerminal: arrTerminal, depTerminal: depTerminal })
                props.setShowDetail(false)
            }
        }
    }
    if (Object.keys(selectedObject)?.length > 0) {
        if (domain === 'MGT' && aircraftType === '') {
            setAircraftType(selectedObject?.aircraftType);
            setfSeatsCapacity(selectedObject?.fseatCapacity);
            setbSeatsCapacity(selectedObject?.bseatCapacity);
            seteSeatsCapacity(selectedObject?.eseatCapacity);
            setOverallPayload(selectedObject?.overallpayload);
            setCargoPayload(selectedObject?.cargoPayload);
            setMGT(selectedObject?.mgt);
        }
        if (domain === 'Airports' && iata === '' && country === '' && city === '' && airport === '' && region === '' && icao === '') {
            setIata(selectedObject?.iataCode);
            setIcao(selectedObject?.icaoCode);
            setCountry(selectedObject?.Country);
            setRegion(selectedObject?.region);
            setCity(selectedObject?.City);
            setAirport(selectedObject?.Airport);
        }
        if (domain === 'Crew MCT' && crewType === '' && arrStn === '' && depStn === '' && conxStatus === '' && effFrom === '' && effTo === '' && arrTerminal === '' && depTerminal === '') {
            setMct(Number(selectedObject?.mct));
            setCrewType(selectedObject?.crewtype);
            setArrStn(selectedObject?.arrstn);
            setDepStn(selectedObject?.depstn);
            setConxStatus(selectedObject?.conxstatus);
            setRangeStart(Number(selectedObject?.rangestart));
            setRangeEnd(Number(selectedObject?.rangeend));
            setEffFrom(moment(selectedObject?.efffrom, 'mm/dd/yyyy').format('YYYY-MM-DD'));
            setEffTo(moment(selectedObject?.effto, 'mm/dd/yyyy').format('YYYY-MM-DD'));
            setArrTerminal(selectedObject?.arrterminal);
            setDepTerminal(selectedObject?.depterminal);
        }
        if (domain === 'PAX MCT' && arrStn === '' && depStn === '') {
            // {"mct","arrStn","depStn","conxStatus","arrCarrier","arrCodeShareIND","arrCodeShareOP","arrFltRangeStart","arrFltRangeEnd","depCarrier","depCodeShareIND","depCodeShareOP","depFltRangeStart","depFltRangeEnd","prevCountry","nextCountry","effFrom","effTo","arrTerminal","depTerminal"}
            setMct(selectedObject?.mct);
            setArrStn(selectedObject?.arrstn);
            setDepStn(selectedObject?.depstn);
            setConxStatus(selectedObject?.conxstatus);
            setArrCarrier(selectedObject?.arrcarrier);
            setArrCodeShareIND(selectedObject?.arrcodeshareind);
            setArrCodeShareOP(selectedObject?.arrcodeshareop);
            setArrFltRangeStart(selectedObject?.arrfltrangestart);
            setArrFltRangeEnd(selectedObject?.arrfltrangeend);
            setDepCarrier(selectedObject?.depcarrier);
            setDepCodeShareIND(selectedObject?.depcodeshareind);
            setDepCodeShareOP(selectedObject?.depcodeshareop);
            setDepFltRangeStart(selectedObject?.depfltrangestart);
            setDepFltRangeEnd(selectedObject?.depfltrangeend);
            setPrevCountry(selectedObject?.prevcountry);
            setNextCountry(selectedObject?.nextcountry);
            setEffFrom(moment(selectedObject?.efffrom, 'mm/dd/yyyy').format('YYYY-MM-DD'));
            setEffTo(moment(selectedObject?.effto, 'mm/dd/yyyy').format('YYYY-MM-DD'));
            setArrTerminal(selectedObject?.arrterminal);
            setDepTerminal(selectedObject?.depterminal);
        }
    }
    return (
        <div style={{ margin: '20px' }}>
            {domain === 'MGT' ?
                <div>
                    <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>
                        <div>
                            <div className='addEdit_label_text'>Aircraft Type</div>
                            <input data-testid='AircraftTypeInput' value={aircraftType} disabled={selectedType == "Edit"} placeholder='Enter' onChange={(e) => { setAircraftType(e.target.value) }} className='addEdit_date_input_big' style={{ borderColor: Colors.searchBoxBorder }} />
                        </div>
                    </div>
                    <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>
                        <div>
                            <div className='addEdit_label_text'>F Seats Capacity</div>
                            <input data-testid='FSeatsCapacityInput' value={fSeatsCapacity} placeholder='Enter' onChange={(e) => { setfSeatsCapacity(Number(e.target.value)) }} type='number' className='addEdit_date_input' style={{ borderColor: Colors.searchBoxBorder }} />
                        </div>
                        <div>
                            <div className='addEdit_label_text'>B Seats Capacity</div>
                            <input data-testid='BSeatsCapacityInput' value={bSeatsCapacity} placeholder='Enter' onChange={(e) => { setbSeatsCapacity(Number(e.target.value)) }} type='number' className='addEdit_date_input' style={{ borderColor: Colors.searchBoxBorder }} />
                        </div>
                        <div>
                            <div className='addEdit_label_text'>E Seats Capacity</div>
                            <input data-testid='ESeatsCapacityInput' value={eSeatsCapacity} placeholder='Enter' onChange={(e) => { seteSeatsCapacity(Number(e.target.value)) }} type='number' className='addEdit_date_input' style={{ borderColor: Colors.searchBoxBorder }} />
                        </div>
                    </div>
                    <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>
                        <div>
                            <div className='addEdit_label_text'>Overall Payload</div>
                            <input data-testid='overallPayloadInput' value={overallPayload} placeholder='Enter' onChange={(e) => { setOverallPayload(Number(e.target.value)) }} type='number' className='addEdit_date_input' style={{ borderColor: Colors.searchBoxBorder }} />
                        </div>
                        <div>
                            <div className='addEdit_label_text'>Cargo Payload</div>
                            <input data-testid='cargoPayloadInput' value={cargoPayload} placeholder='Enter' onChange={(e) => { setCargoPayload(Number(e.target.value)) }} type='number' className='addEdit_date_input' style={{ borderColor: Colors.searchBoxBorder }} />
                        </div>
                        <div>
                            <div className='addEdit_label_text'>MGT</div>
                            <input data-testid='MGTInput' value={MGT} placeholder='Enter' onChange={(e) => { setMGT(Number(e.target.value)) }} type='number' className='addEdit_date_input' style={{ borderColor: Colors.searchBoxBorder }} />
                        </div>
                    </div>
                    <div style={{ display: 'flex', gap: '10px' }}>
                        <div data-testid='cancelButton' className='addEdit_cancel' style={{ borderColor: Colors.cancelButtonBorder, color: Colors.themeText }} onClick={() => { cancelHandel() }}>Cancel</div>
                        <div data-testid='doneButton' className='addEdit_done' style={{ backgroundColor: Colors.common, color: Colors.whiteText, borderColor: Colors.cancelButtonBorder }} onClick={doneHandle}>Done</div>
                    </div>
                </div>
                : domain === 'Airports' ?
                    <div>
                        <div style={{ display: 'flex', gap
