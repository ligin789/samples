import { put, takeLatest } from "redux-saga/effects";
import { APIcall } from "../../environments/Service";
import configuration from "../../environments/Configuration";
import { getPayloadOther } from "../../globals/Common";
import { CustomResponseType} from "../../globals/PropTypes";
// import TestData from './data.json';
// import TestData from './data1.json';
import TestData from './data2.json';
import TestDataExplain from './explainData.json';
import axios from "axios";

export const timerAction = {
  storeTimer: (data:any)=>({
    type:'TIMER_STORE',
    payload:data
  }),
  storeTimeLine: (data:any)=>({
    type:'TIME_LINE_STORE',
    payload:data
  }),
  timerStore: (data:any)=>({
    type:'STORE_TIMER_DATA',
    payload:data
  }),
  timeLineStore: (data:any)=>({
    type:'STORE_TIME_LINE_DATA',
    payload:data
  }),

  // for history pop up
  openHistoryPopUp:()=>({
    type:'HISTORY_POPUP_OPEN'
  }),
  historyPopUpOpen:()=>({
    type:'OPEN_HISTORY_POPUP'
  }),
  closeHistoryPopUp:()=>({
    type:'HISTORY_POPUP_CLOSE'
  }),
  historyPopUpClose:()=>({
    type:'CLOSE_HISTORY_POPUP'
  }),
  storeHistoryPopUpData:(data:any)=>({
    type:'HISTORY_POPUP_DATA_STORE',
    payload:data
  }),
  historyPopUpDataStore:(data:any)=>({
    type:'STORE_HISTORY_DATA',
    payload:data
  }),

  // for Explain pop up
  openExplainPopUp:()=>({
    type:'EXPLAIN_POPUP_OPEN'
  }),
  explainPopUpOpen:()=>({
    type:'OPEN_EXPLAIN_POPUP'
  }),
  closeExplainPopUp:()=>({
    type:'EXPLAIN_POPUP_CLOSE'
  }),
  explainPopUpClose:()=>({
    type:'CLOSE_EXPLAIN_POPUP'
  }),
  storeExplainPopUpData:(data:any)=>({
    type:'EXPLAIN_POPUP_DATA_STORE',
    payload:data
  }),
  explainPopUpDataStore:(data:any)=>({
    type:'STORE_EXPLAIN_DATA',
    payload:data
  })
}

function* storeTimer({payload}:any){
    yield put(timerAction.timerStore(payload.time))
}
function* storeTimeLine({payload}:any){
  yield put(timerAction.timeLineStore(payload.data))
}

// for historyPopUp
function* storeHistoryPopUpData({payload}:any){
  console.log('we are checking workspase api response =>#### ',payload)
  // try {
    // axios({
    //   method: "post",
    //   url: `/token`,
    //   headers: '',
    //   data : {},
    // }).then(())
    // axios({
    //   method:'post',
    //   url:configuration.url.getgatehistorydata,
    //   data:{iaoFlightLegId:payload.iaoFlightLegId?payload.iaoFlightLegId:''}
    // }).then(function(response:any){
    let response: CustomResponseType = yield APIcall(
      // let res: CustomResponseType = yield APIcall(
      //   let res: CustomResponseType = APIcall(
      'POST', 
      configuration.url.getgatehistorydata,
      // {iaoFlightLegId:payload.iaoFlightLegId}
      {iaoFlightLegId:payload.iaoFlightLegId?payload.iaoFlightLegId:''}
      // getPayloadOther()
    )
    console.log('we are checking workspase api response => ',response);
    if (response.status === 200) {
        // yield put({type: Constants.SAVE_WORK_SPACE_VIEW_DETAIL, payload: response.data})
        yield put(timerAction.historyPopUpDataStore({iaoFlightLegId:payload.iaoFlightLegId,data:response.data}))
        // put(timerAction.historyPopUpDataStore({iaoFlightLegId:payload.iaoFlightLegId,data:response.data}))
    } else if (response?.response?.status === 401 || response?.response?.status === 403) {
      yield put({type: 'UPDATE_ALERT', payload: {title: 'Session Timeout',content: 'Login to start a new session'}})
      // put({type: 'UPDATE_ALERT', payload: {title: 'Session Timeout',content: 'Login to start a new session'}})
    } else {
      yield put({type:'UPDATE_ALERT', payload:{title: 'Alert',content: 'Oops, something went wrong. Please try again later.'}})
      // put({type:'UPDATE_ALERT', payload:{title: 'Alert',content: 'Oops, something went wrong. Please try again later.'}})
    }
  // }).catch(function(error){
  //   console.log('this is the store History PopUp Data ERROR => ',error);
  //   // put(timerAction.historyPopUpDataStore({iaoFlightLegId:"UA::517::2025-02-25::MIA::IAH::0::0",data:TestData}))
  // })
  // } catch (error) {
  // 
  // }

  // after work we need to comment below line
  // yield put(timerAction.historyPopUpDataStore({iaoFlightLegId:"UA::517::2025-02-25::MIA::IAH::0::0",data:TestData}))
  // setTimeout(()=>{
  //   yield put(timerAction.historyPopUpDataStore({iaoFlightLegId:"UA::517::2025-02-25::MIA::IAH::0::0",data:TestData}))
  // },3000)
}
function* openHistoryPopUp({payload}:any){
  console.log('in side setIsHistoryPopUpShow ##')
  yield put(timerAction.historyPopUpOpen())
}
function* closeHistoryPopUp({payload}:any){
  yield put(timerAction.historyPopUpDataStore({}))
  yield put(timerAction.historyPopUpClose())
}

// for Explain PopUp
function* storeExplainPopUpData({payload}:any){
  console.log('we are checking workspase api response =>#### simulationId',payload)
  let response: CustomResponseType = yield APIcall(
    'POST', 
    configuration.url.getgateExplaindata,
    // {iaoFlightLegId:payload.iaoFlightLegId}
    {simulationId:payload.simulationId?payload.simulationId:''}
    // getPayloadOther()
  )
  console.log('we are checking workspase api response => ',response);
  if (response.status === 200 || response.status === 304 || response.status === 202) {
      // yield put({type: Constants.SAVE_WORK_SPACE_VIEW_DETAIL, payload: response.data})
      yield put(timerAction.explainPopUpDataStore({simulationId:payload.simulationId,data:response.data}))
  } else if (response?.response?.status === 401 || response?.response?.status === 403) {
    yield put({type: 'UPDATE_ALERT', payload: {title: 'Session Timeout',content: 'Login to start a new session'}})
  } else {
    yield put({type:'UPDATE_ALERT', payload:{title: 'Alert',content: 'Oops, something went wrong. Please try again later.'}})
  }

  // after work we need to comment below line
  // yield put(timerAction.explainPopUpDataStore({simulationId:payload.simulationId,data:TestDataExplain}))
}
function* openExplainPopUp({payload}:any){
  console.log('in side setIsExplainPopUpShow ##')
  yield put(timerAction.explainPopUpOpen())
}
function* closeExplainPopUp({payload}:any){
  yield put(timerAction.explainPopUpDataStore({}))
  yield put(timerAction.explainPopUpClose())
}

export function* timer() {
yield takeLatest('TIMER_STORE', storeTimer)
yield takeLatest('TIME_LINE_STORE', storeTimeLine)

// for history pop up
yield takeLatest('HISTORY_POPUP_OPEN', openHistoryPopUp)
yield takeLatest('HISTORY_POPUP_CLOSE', closeHistoryPopUp)
yield takeLatest('HISTORY_POPUP_DATA_STORE', storeHistoryPopUpData)

// for Explain pop up
yield takeLatest('EXPLAIN_POPUP_OPEN', openExplainPopUp)
yield takeLatest('EXPLAIN_POPUP_CLOSE', closeExplainPopUp)
yield takeLatest('EXPLAIN_POPUP_DATA_STORE', storeExplainPopUpData)
}
