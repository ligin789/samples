import React, { useEffect, useMemo, useRef, useState } from "react";
import type { ColDef, RowSelectionOptions, SizeColumnsToContentStrategy, SizeColumnsToFitGridStrategy, SizeColumnsToFitProvidedWidthStrategy } from "ag-grid-community";
import { AllCommunityModule, ModuleRegistry, themeQuartz } from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import './styles.css'
import tableData from '../../assets_Air_India/jsons/tableDuplicate.json'
import moment from "moment";
import { getFormatData } from "../../utils/GetFormatData";
import CustomNoRowsOverlay from "./noRowData";
import Loader from "../loader";
import HyperLinkPopup from "../hyperlinkPopUp";
import { useTranslation } from "react-i18next";
import Colors from "../../global/Color";
import CountdownTimer from "./countdowntimer";
ModuleRegistry.registerModules([AllCommunityModule]);
// [
//   { field: "notes", headerName: "NOTES", cellRenderer: renderNoteCell, sortable: false, headerClass:'notes', cellClass:'notes'},
//   { field: "criticalIndicator", headerName: "CRITICAL", cellRenderer: renderIsCriticalCell, sortable: false,  headerClass:'critical', cellClass:'critical' },
//   { field: "ssr", headerName: "SSR", cellRenderer: renderSSRCell, sortable: false},
//   { field: "carr_IATA", headerName: "CARR (IATA)", headerClass:'carr_iata', cellClass:'carr_iata' },
//   { field: "aircraft", headerName: "AIRCRAFT" },
//   { field: "fleet", headerName: "FLEET", cellClass: 'separator', headerClass: 'separator' },
//   { field: "origin_IB", headerName: "ORIG (IB)" },
//   { field: "flight_IB", headerName: "FLIGHT (IB)" },
//   { field: "eta_IB", headerName: "ETA (IB)", cellRenderer: renderDateAndTime },
//   { field: "arrGate", headerName: "ARR GATE (IB)" },
//   { field: "flightStatus_IB", headerName: "FLIGHT STATUS (IB)" },
//   { field: "arrDelay", headerName: "ARR DELAY (IB)", cellRenderer: renderDateAndTime, },
//   { field: "groundTime", headerName: "GROUND TIME", cellRenderer: renderDateAndTime, cellClass: 'separator', headerClass: 'separator' },
//   { field: "depGate", headerName: "DEP GATE (OB)" },
//   { field: "flightStatus_OB", headerName: "FLIGHT STATUS (OB)" },
//   { field: "flight_OB", headerName: "FLIGHT (OB)" },
//   { field: "dep_OB", headerName: "DEP (OB)" },
//   { field: "arr_OB", headerName: "ARR (OB)" },
//   { field: "schDep_OB", headerName: "SCHED DEP (OB)", cellRenderer: renderDateAndTime },
//   { field: "etd_act_OB", headerName: "ETD/ACT (OB)", cellRenderer: renderDateAndTime },
// ]



const renderIsCriticalCell = (p: any) => {
  return !p.value && <img src={require('../../assets_Air_India/images/critical.png')} alt="note" width={23} height={20} />
}

const myTheme = themeQuartz.withParams({
  accentColor: Colors.accentColor,
  backgroundColor: "#EFF0F4",
  cellTextColor: Colors.cellTextColor,
  dataFontSize: 16,
  fontFamily: {
    googleFont: "Roboto",
  },
  foregroundColor: "#FFFFFF",
  headerBackgroundColor: Colors.tableColumnHeader,
  headerFontFamily: {
    googleFont: "Roboto"
  },
  headerTextColor: Colors.tableColumnHeaderText,
  headerHeight: '55px',
  headerFontSize: 14,
  headerFontWeight: 400,
  oddRowBackgroundColor: "#FFFFFF",
  spacing: 6,
  wrapperBorderRadius: 0,
  rowHoverColor: '#E4EBFF',
  selectedRowBackgroundColor: 'none',
  inputFocusBorder: 'none',
  checkboxUncheckedBorderColor: Colors.tableCheckboxUncheckedBorderColor,
  checkboxCheckedBorderColor: Colors.tableCheckboxCheckedBorderColor,
  checkboxCheckedBackgroundColor: Colors.tableCheckBoxCheckedColor,
  checkboxBorderWidth: 1,
});



const defaultColDef: ColDef = {
  resizable: false,
  suppressMovable: true,
  lockPinned: true,
  maxWidth: 110,
  minWidth: 50,
  headerCheckboxSelection: true,
  loadingCellRenderer: true
};

const cellStyle = (param: any) => {
  const columnHeader = param?.colDef?.headerName
  const color = param?.data?.[columnHeader]?.color
  if (color) {
    return { backgroundColor: color };
  }
  return null
}


const InfiniteScrollGrid = (props: any) => {
  const {
    data,
    userPreference,
    noOfRowsSelected,
    setNoOfRowsSelected,
    isUTCToggled,
    showLoader,
    handleLoader,
    handleNotesClick,
    setCriticalPopupVisible,
    setFlightLinkModel,
    flightNoValue,
    setFlightFeedClick,
    setFlightNoValue,
    flightLinkModal,
    createAlertClicked,
    setCreateAlertClicked,
    dropDownIndex,
    handleDropDownIndex
  } = props;
  const gridRef = useRef<AgGridReact>(null);
  const [rowData, setRowData] = useState<any>([]);
  const [colDefs, setColDefs] = useState<any>([]);
  const [columnsToShow, setColumnsToShow] = useState<any>([])
  const [carrierCodeValue, setCarrierCodeValue] = useState()

  type TranslationKey = '';
  const { t } = useTranslation<TranslationKey>();

  useEffect(() => {
    const { columnDefinition, formatRows } = getFormatData(data, columnsToShow, isUTCToggled)
    let formatColumnDefinitions = [];
    formatColumnDefinitions = columnDefinition?.map((column: any) => {
      // column.headerName=t(column.tKey).toUpperCase()
      if (column.cellRenderer === 'renderDateAndTime') {
        column.cellRenderer = renderDateAndTime;
        // column.sortable = true;
        column.comparator = handleSort;
      } else if (column.cellRenderer === 'linkRenderer') {
        column.cellRenderer = renderLink;
      } else if (column.cellRenderer === 'countdownTimer') {
        column.cellRenderer = renderCountdownTimer
      }

      if (column.headerName === "NOTES") {
        column.cellRenderer = renderNoteCell;
      }
      if (column.headerName === "CRITICAL") {
        column.cellRenderer = renderIsCriticalCell;
      }
      column.cellStyle = cellStyle;
      column.sortable = true;
      return column
    })
    setColDefs(formatColumnDefinitions)
    setRowData(formatRows)
  }, [data, columnsToShow, isUTCToggled])

  useEffect(() => {
    const columnsArray: string[] = []
    userPreference?.grid_columns?.forEach((option: any) => {
      if (option.columns) {
        option.columns.forEach((subOption: any) => {
          subOption.isSelected && columnsArray.push(subOption.key)
        })
      } else {
        if (option.isSelected) {
          columnsArray.push(option.name)
        }
      }
    })
    setColumnsToShow(columnsArray)
  }, [userPreference])

  useEffect(() => {
    if (noOfRowsSelected === 0) {
      gridRef?.current?.api?.deselectAll();
    }
  }, [noOfRowsSelected])

  const rowSelection = useMemo<RowSelectionOptions | "single" | "multiple">(() => {
    return {
      mode: "multiRow"
    };
  }, []);

  const autoSizeStrategy = useMemo<| SizeColumnsToFitGridStrategy | SizeColumnsToFitProvidedWidthStrategy | SizeColumnsToContentStrategy>(() => {
    return {
      type: "fitCellContents",
    };
  }, []);

  const handleSort = (valueA: any, valueB: any) => {
    if (valueA === '-' && valueB === '-') return 0;
    if (valueA === '-') return 1;
    if (valueB === '-') return -1;

    const dateA: any = new Date(valueA);
    const dateB: any = new Date(valueB);

    if (isNaN(dateA) && isNaN(dateB)) return 0;
    if (isNaN(dateA)) return 1;
    if (isNaN(dateB)) return -1;

    return dateA.getTime() - dateB.getTime();
  }
  const rowClassRules = {
    'lastRowBorder': (params: any) => {
      return params.rowIndex === rowData.length-1
    },
  };

  const renderDateAndTime = (p: any) => {
    if (p.value === '—' || !p.value) {
      return <span>{'—'}</span>
    }
    if (isUTCToggled) {
      return <span>{moment.utc(p.value).format('HH:mm')}</span>
    }
    return <span>{moment(p.value).format('HH:mm')}</span>
  }

  const renderCountdownTimer = (p: any) => {
    if (p?.value?.includes(':')) {
      const [hrs = 0, mins = 0] = p?.value?.split(':')
      return <CountdownTimer hr={hrs} min={mins} sec={0} />
    }
    return <span>{"—"}</span>;
  }

  const renderLink = (p: any) => {
    const flightNoOnClickHandler = (e: any) => {
      handleDropDownIndex(10)
      setFlightLinkModel(true)
      e.stopPropagation()
      setFlightNoValue(p.value)
      setCarrierCodeValue(p?.data["CARR(IATA)"]?.value)
    }
    if (p.value === "—" || !p.value) {
      return <span>{"—"}</span>;
    }
    if (p.colDef.headerName == "FLIGHT (OB)" || p.colDef.headerName == "FLIGHT (IB)") {
      return (
        <div onClick={(e: any) => { flightNoOnClickHandler(e) }} style={{ cursor: 'pointer' }}>
          <a href="" style={{ pointerEvents: "none", color: "#0000EE", }}>{p.value} </a>
        </div>
      );
    }
    return (
      <a href="" style={{ pointerEvents: "none", color: "#0000EE" }}>{p.value} </a>
    );
  };

  const onSelectionChanged = (e: any) => {
    const selectedRows = e.api.getSelectedRows();
    setNoOfRowsSelected(selectedRows.length)
  }

  const renderNoteCell = (p: any) => {
    return p.value.length ?
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', cursor: "pointer" }} onClick={() => { handleNotesClick(p) }}>
        <img src={require('../../assets_Air_India/images/note.png')} alt="note" width={18} height={20} />
      </div> :
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', cursor: "pointer" }} onClick={() => { handleNotesClick(p) }}>
        <img src={require('../../assets_Air_India/images/editPen.png')} alt="note add" width={14} height={13} />
      </div>
  }

  return (
    showLoader ?
      <Loader /> :
      <div className="tablecontaine-view" onClick={(e) => { dropDownIndex !== -1 && handleDropDownIndex(-1); }}>
        <AgGridReact
          ref={gridRef}
          theme={myTheme}
          rowData={rowData}
          columnDefs={colDefs}
          defaultColDef={defaultColDef}
          // autoSizeStrategy={autoSizeStrategy}
          rowSelection={rowSelection}
          rowClassRules={rowClassRules}
          suppressMoveWhenColumnDragging={true}
          suppressDragLeaveHidesColumns={true}
          suppressCellFocus={true}
          onSelectionChanged={onSelectionChanged}
          // onSortChanged={onSortChanged}
          noRowsOverlayComponent={CustomNoRowsOverlay}
        />
        <div>
          {flightLinkModal && dropDownIndex === 10 &&
            <HyperLinkPopup
              flightNoValue={flightNoValue}
              carrierCodeValue={carrierCodeValue}
              setFlightLinkModel={setFlightLinkModel}
              setCriticalPopupVisible={setCriticalPopupVisible}
              setFlightFeedClick={setFlightFeedClick}
              createAlertClicked={createAlertClicked}
              setCreateAlertClicked={setCreateAlertClicked}
            />
          }
        </div>
        <div style={{ position: 'relative', width: '100%', backgroundColor: '#FFFFFF', border: '1px solid #B7B7B7' }}>
          <div style={{ position: 'absolute', right: 30, top: 5 }}>
            <span style={{ fontSize: 16, color: '#434343', fontWeight: '600' }}>{`${t("totalRecords")} : ${rowData.length}`}</span>
          </div>
        </div>
      </div>
  );
};

export default InfiniteScrollGrid;
