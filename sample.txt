import {fireEvent, getByAltText, getByTestId, render, screen} from '@testing-library/react'
import React from 'react'
import FocusFlight from '../../../src/components/focusFlights'
import '@testing-library/jest-dom';
import { configureStore ,createSlice, createStore} from "@reduxjs/toolkit";
import { Provider } from 'react-redux';
import reducer from '../../../src/redux/referenceData/reducer';

// Mock the DynamicRender component
jest.mock('../../../src/components/dynamicrenderer', () => {
  return jest.fn(() => <div data-testid="dynamic-render-mock">Dynamic Render</div>);
});
 
// Mock the props for the FocusFlight component
const mockFocusFlightData = [
  {
    widgetAttributes: {
      defaltSelected: 'curr',
      taskType: 'Critical',
    },
    widgetTemplate: {
      cardView: {},
      detailView: {},
    },
  },
];
 
const mockFlightDetailData = [
  {
    widgetAttributes: {
      defaltSelected: 'prev',
      taskType: 'All',
    },
    widgetTemplate: {
      cardView: {},
      detailView: {},
    },
  },
];
 
const mockStore = createStore(reducer, {
  FlightReducer: {
    focusFlightData: mockFocusFlightData,
    flightDetailData: mockFlightDetailData,
    taskTypeTabData: [],
    deptTypeTabData: [],
  },
});
 
describe('FocusFlight Component', () => {
  it('should render the correct title when in detail view', () => {
    render(
      <Provider store={mockStore}>
        <FocusFlight focusFlightData={mockFocusFlightData} flightDetailData={mockFlightDetailData} />
      </Provider>
    );
 
    // Set the detail view state to true
    const backButton = screen.getByText(/back/i);
    expect(backButton).toBeInTheDocument();
 
    // Ensure the "Back" button is shown by interacting with it
fireEvent.click(backButton); // This will simulate the toggle and update the state
    expect(screen.getByText(/focusFlights/i)).toBeInTheDocument();
  });
 
  it('should render DynamicRender with correct data', () => {
    render(
      <Provider store={mockStore}>
        <FocusFlight focusFlightData={mockFocusFlightData} flightDetailData={mockFlightDetailData} />
      </Provider>
    );
 
    // Check if DynamicRender component is rendered
    expect(screen.getByTestId('dynamic-render-mock')).toBeInTheDocument();
  });
 
  it('should toggle detail view when clicking "Back" button', () => {
    render(
      <Provider store={mockStore}>
        <FocusFlight focusFlightData={mockFocusFlightData} flightDetailData={mockFlightDetailData} />
      </Provider>
    );
 
    const backButton = screen.getByText(/back/i);
fireEvent.click(backButton); // Click the "Back" button
 
    // Check if the title changes to "Focus Flights" after toggling the view
    expect(screen.getByText(/focusFlights/i)).toBeInTheDocument();
  });
 
  it('should trigger flight feed click when the flight feed tab is clicked', () => {
    // Mocking setFlightFeedClick and setFocusClick
    const setFlightFeedClickMock = jest.fn();
    const setFocusClickMock = jest.fn();
 
    render(
      <Provider store={mockStore}>
        <FocusFlight
          focusFlightData={mockFocusFlightData}
          flightDetailData={mockFlightDetailData}
          setFlightFeedClick={setFlightFeedClickMock}
          setFocusClick={setFocusClickMock}
        />
      </Provider>
    );
 
    // Simulate clicking on the flight feed tab (ensure the correct element is being clicked)
    const flightFeedTab = screen.getByTestId('flight-feed-tab'); // Adjust the test id as needed
fireEvent.click(flightFeedTab);
 
    // Check that setFlightFeedClick and setFocusClick were called with the correct arguments
    expect(setFlightFeedClickMock).toHaveBeenCalledWith(true);
    expect(setFocusClickMock).toHaveBeenCalledWith(false);
  });
});

