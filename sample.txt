You're right — thank you for catching that. Let me give you a clean and corrected version of Canvas.tsx with all JSX tags properly closed and formatted.


---

✅ Final Cleaned Canvas.tsx

import { useRef, useState } from "react";
import {
  DndContext,
  PointerSensor,
  useSensor,
  useSensors,
  closestCenter,
  useDroppable,
} from "@dnd-kit/core";
import {
  SortableContext,
  verticalListSortingStrategy,
  arrayMove,
} from "@dnd-kit/sortable";
import { useFormStore } from "../store/useFormStore";
import SortableElement from "./SortableElement";
import ElementEditor from "./ElementEditor";
import FormPreview from "./FormPreview";
import { downloadJSON, parseJSONFile } from "../utils/jsonHelpers";

export default function Canvas() {
  const elements = useFormStore((s) => s.elements);
  const reorder = useFormStore((s) => s.reorderElements);
  const add = useFormStore((s) => s.addElement);
  const fileRef = useRef<HTMLInputElement>(null);
  const [preview, setPreview] = useState(false);

  const sensors = useSensors(useSensor(PointerSensor));
  const { setNodeRef: setCanvasRef } = useDroppable({ id: "canvas-drop-area" });

  const handleDragEnd = ({ active, over }: any) => {
    if (!over) return;

    // Handle drag from Sidebar to Canvas
    if (active.id.startsWith("sidebar-") && over.id === "canvas-drop-area") {
      const type = active.data.current?.type;
      if (type) add(type);
      return;
    }

    // Handle reorder inside Canvas
    if (active.id !== over.id) {
      const oldIdx = elements.findIndex((e) => e.id === active.id);
      const newIdx = elements.findIndex((e) => e.id === over.id);
      if (oldIdx !== -1 && newIdx !== -1) {
        reorder(arrayMove(elements, oldIdx, newIdx));
      }
    }
  };

  return (
    <div className="flex-grow p-4 flex flex-col">
      {/* Header Section */}
      <div className="flex justify-between mb-4">
        <div>
          <button onClick={() => downloadJSON({ elements })} className="btn mx-1">
            Export JSON
          </button>
          <button className="btn mx-1" onClick={() => fileRef.current?.click()}>
            Import JSON
          </button>
          <input
            ref={fileRef}
            type="file"
            className="hidden"
            accept=".json"
            onChange={(e) => {
              const file = e.target.files?.[0];
              if (!file) return;
              parseJSONFile(file, (json) => {
                if (json.elements) reorder(json.elements);
              });
            }}
          />
        </div>
        <button
          className="w-16 h-8 items-center bg-blue-600 text-white rounded"
          onClick={() => setPreview((prev) => !prev)}
        >
          {preview ? "Edit" : "Preview"}
        </button>
      </div>

      {/* Main Content */}
      {preview ? (
        <FormPreview elements={elements} />
      ) : (
        <div className="flex flex-grow">
          {/* Left: Canvas */}
          <div className="w-2/3 pr-4">
            <DndContext
              sensors={sensors}
              collisionDetection={closestCenter}
              onDragEnd={handleDragEnd}
            >
              <SortableContext
                items={elements.map((e) => e.id)}
                strategy={verticalListSortingStrategy}
              >
                <div
                  ref={setCanvasRef}
                  id="canvas-drop-area"
                  className="min-h-[300px] border-2 border-dashed border-gray-400 p-2"
                >
                  {elements.length === 0 ? (
                    <p className="text-gray-400 text-center">
                      Drag elements here from the sidebar
                    </p>
                  ) : (
                    elements.map((el) => (
                      <SortableElement key={el.id} element={el} />
                    ))
                  )}
                </div>
              </SortableContext>
            </DndContext>
          </div>

          {/* Right: Property Editor */}
          <div className="w-1/3 pl-4">
            <ElementEditor />
          </div>
        </div>
      )}
    </div>
  );
}


---

✅ Recap of What This Does:

Allows dragging components from the Sidebar into the Canvas.

Handles reordering within the Canvas.

Includes working Export/Import, and Preview/Edit toggles.


Let me know if you'd like to:

Drag into nested divs,

Add placeholder indicators when dragging,

Implement deletion on drop to trash.


I'm here to help!

