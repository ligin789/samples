import { getActualDifference, getActualDifferenceInMin, getActualDifferenceInMinSec, getLocalDateStringValue, getLocalTimeStringValueInHHmm } from "./GetIsoString"


export const GetListData = (key: any, data: any) => {
  return data?.[key]
}

export const FetchDataFromKey = (key: string, data: any, childComponent: any = null) => {
  const array = ["schActivityStartTime", "schActivityEndTime", "schdeputcdttm", "estdeputcdttm", "scharrutcdttm", "estarrutcdttm", "actActivityStartTime", "actActivityEndTime", "referenceStartTimeUTC", "referenceEndTimeUTC", "arrivalTimeUTCDttm", "departureTimeUTCDttm", "actualEndTimeUTC", "petd", "delayTime", "actualStartTimeUTC", "actualEndTimeUTC"]
  const percentagearray =["turnaroundPercentage","boardingPercentage","dispatchPercentage","baggagePecentage"]
  if (array.includes(key) && data?.[key]) {
    if (childComponent?.props?.type === 'date') {
      return getLocalDateStringValue(data?.[key])
    }
    return getLocalTimeStringValueInHHmm(data?.[key])
  } else if (key === 'availablegroundtime' && data?.[key]) {
    let hrs = `${Math.floor(data?.[key] / 60)}` || "00";
    let minutes = `${data?.[key] % 60}` || "00";
    return `${hrs.padStart(2, '0')}:${minutes.padStart(2, '0')}`
  } else if (key === 'dept') {
    const selectedTab = data?.['#percentage']?.filter((item: any) => item.isDepartmentTabSelected === true)?.[0]
    return `${selectedTab.dept}`
  } else if (key === 'percentage') {
    //const selectedTab = data?.['#activityList']?.filter((item: any) => item.activityTabSelected === true)?.[0]
    return `${data?.percentage ?? 0}%`
  } else if (key === 'tabPercentage') {
    //const selectedTab = data?.['#activityList']?.filter((item: any) => item.activityTabSelected === true)?.[0]
    return data?.percentage || 0
  } else if (key === "delayTime" && childComponent?.props?.type === 'delayTime') {
    const actualDelayOfTask = getActualDifferenceInMin(data?.["departureTimeUTCDttm"])
    if (actualDelayOfTask > 0) {
      return `${Math.floor(actualDelayOfTask / 60).toString().padStart(2, '0')}:${Math.floor(actualDelayOfTask % 60).toString().padStart(2, '0')}`
    }
    return '0'
  } else if (key === 'moreInfoLabel') {
    return data?.['showContextualInfo'] === true ? 'Show Less' : 'More Info'
  }else if(percentagearray.includes(key)  && childComponent?.type === "RsLabel"){
    return `${data?.[key]}%`
  } else if(data?.[key]==="DELAY"){
    return `${data?.[key]} - ${data?.["delatTime"]}`
  }
  return data?.[key]
}

export const isComponentVisible = (key: string, data: any, childComponent: any = null) => {
  if (key === 'viewNotesClickHandler' && data?.['#comments']) {
    // console.log("isComponentVisible", key, data, childComponent);
    // return !!(data?.['#comments']?.length)
    return false
  }
  if(key === 'actualActivityCompleteTimer' || key === 'actualActivityStartTimeContainer'){
    return !!(data?.['actualStartTimeUTC'])
  }
  if (childComponent?.props?.type === 'actualEndTimeUTC') {
    return !!data?.[childComponent?.props?.type]
  }
  if(childComponent?.extraKey){
    console.log("hhhhh",data?.[childComponent?.extraKey],data)
    return data?.[childComponent?.extraKey]
  }
  if(key=="resolveButton"&&data?.acknowledgeIconClicked==true&&childComponent?.props?.extraStyleKey=="acknowledgeIconClicked"){
  return !childComponent?.props?.visible?.value
  }
  if(key=="snoozeDropDown"){
  return data?.snoozeIconClicked
  }
}

export const getValuesForCountdownTimer = (key:string, data:any) => {
  const actActivityStartTime = data?.['actActivityStartTime']
  return getActualDifferenceInMinSec(actActivityStartTime)
}
