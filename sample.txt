import React from "react";
import { useDispatch } from "react-redux";
import { flightCardViewAction } from "../../store/flightcardview/action";
import moment from 'moment';
import { ValueSetter } from "date-fns/parse/_lib/Setter";


const TwinDropDown = (props:any) =>{
  console.log('check TwinDropDown TwinDropDown ==> ',props);
    // const {styles,optionStyles,buttonStyles,optionValue,data,widgetConversationId}=props;
    const {styles,optionStyles,buttonStyles,data,widgetConversationId}=props;

    const optionValue :any = data?.flight?.gateCompactability? data.flight.gateCompactability : [];
    // const optionValue :any = [
    //   {
    //     "gateNum": "C13",
    //     "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
    //     "iaoLclEstArrDtTm": "2024-12-30T15:48:00Z"
    //   },
    //   {
    //     "gateNum": "C08",
    //     "iaoGmtEstArrDtTm": "2024-12-30T21:30:00Z",
    //     "iaoLclEstArrDtTm": "2024-12-30T15:30:00Z"
    //   },
    //   {
    //     "gateNum": "C23",
    //     "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
    //     "iaoLclEstArrDtTm": "2024-12-30T15:20:00Z"
    //   }
    // ]
    const [selectedLclEstArrValue,setSelectedLclEstArrValue]=React.useState('');
    const [selectedGmtEstArrValue,setSelectedGmtEstArrValue]=React.useState('');
    const [selectedGateNumValue,setSelectedGateNumValue]=React.useState('');
    const [requestBody,setRequestBody]=React.useState({});
    const [showOptionValue, setShowOptionValue] = React.useState(false);
    const [isShowDropDown,setIsShowDropDown]=React.useState(false);
    const [isSubmit,setIsSubmit]=React.useState(false);


    const dispatch = useDispatch();
    console.log('check the getComponent props ======> props',props,optionValue);
    
    

    let optionValueRefer = [
        {
          "gateNum": "C12",
          "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T12:00:00Z"
        },
        {
          "gateNum": "C9",
          "iaoGmtEstArrDtTm": "2024-12-30T21:30:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T16:30:00Z"
        },
        {
          "gateNum": "C3",
          "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T12:00:00Z"
        },
        {
          "gateNum": "C12",
          "iaoGmtEstArrDtTm": "2024-12-30T21:30:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T16:30:00Z"
        },
        {
          "gateNum": "C2",
          "iaoGmtEstArrDtTm": "2024-12-30T18:25:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T13:25:00Z"
        }
      ]

    React.useEffect(()=>{

      
        // needto you also check the request variable once and you got all required variable in data
        let tempObj = {
            "eventTimeUTC":new Date().toISOString(),
            "iaoAdvisedGate":selectedGateNumValue,
            "widgetConversationId":widgetConversationId,
            // needto you will check , what status we need to pass here
            "status":"override",
            "iaoOldGate":data?.flight?.iaoAdvisedGate,
            "iaoLclEstArrDtTm": selectedLclEstArrValue,
            "iaoGmtEstArrDtTm": selectedGmtEstArrValue,
            "iaoGateWaitingTime": `${data?.flight?.iaoGateWaitingTime}`,
            "iaoArrPrdctGmt": data?.flight?.iaoArrPrdctGmt,
            "iaoArrPrdctLcl": data?.flight?.iaoArrPrdctLcl,
            "simulationId":data?.flight?.simulationId,
            "simulationTimeStamp":data?.flight?.simulationTimeStamp
          }
        setRequestBody(tempObj);
    },[props]);


    const onChangeHandel = (e:any,)=>{

      
      console.log("checking ValueSetter", e)
      let selectedObj = JSON.parse(e)
        console.log("onChangeHandel", selectedObj.iaoLclEstArrDtTm, e)
        setSelectedLclEstArrValue(selectedObj.iaoLclEstArrDtTm);
        setSelectedGmtEstArrValue(selectedObj.iaoGmtEstArrDtTm);
        setSelectedGateNumValue(selectedObj.gateNum);
        let tempObj = requestBody;
        // needto here also you will check which variable we need to change in request body 
        setRequestBody(tempObj);
    }
    const onSubmitHandel = (data:any)=>{
        dispatch(flightCardViewAction.widgetUpdate(data))
    }

    const selectOnchange = (e:any)=>{
      console.log("chooseSelection",e)
      setShowOptionValue(true)
  }
    return(
        // <div data-testid="Dot" className="circular" style={{...Styles.defaultDot,...props.styles}}/>
        <div style={{display:'flex',gap:'5px',alignItems:'center'}}>
           {/* {showOptionValue !== true ?<select style={styles} onChange={(e)=>{selectOnchange(e.target.value)}}> */}
           {optionValue?.length===0&&false?<select style={{...styles,...{cursor:'pointer'}}} onChange={(e)=>{selectOnchange(e.target.value)}}>
                  <option style={optionStyles} value="1">Override</option>
            </select> :<>

            {/* <select style={styles} onChange={(e)=>{
                 onChangeHandel(e.target.value)
                 }}>
                 <option style={optionStyles} value="">Override</option>
                 {optionValue?.length>0&&optionValue.map((el:any)=>{
                     return(
                     <option style={optionStyles} value={JSON.stringify(el)}>{`${el?.gateNum}, ${moment.utc(el.iaoLclEstArrDtTm).format('HH:mm')}`}</option>
                 )})}
             </select> */}
          <div style={{...styles,...{display:'flex',justifyContent:'space-around',font:'normal normal normal 15px/20px Roboto'}}} onClick={()=>{setIsShowDropDown(true)}}>
            <div>{'Override'}</div>
            <div style={{rotate:'90deg',color:'#3382F2'}}>&#10095;</div>
          </div>
          {<div>
            {isShowDropDown===true&&<div style={{width:'0px',height:'0px',position:'relative',zIndex:5}}><div style={{textAlign:'center',backgroundColor:'#FFFFFF',width:'150px',marginLeft:'-155px',marginTop:'30px',boxShadow:'0px 0px 10px #0000005F',borderRadius:'10px'}}>
              {optionValue?.length>0&&optionValue.map((el:any)=>{
              {/* {optionValueRefer?.length>0&&optionValueRefer.map((el:any)=>{ */}
                     return(
                     <div style={{...optionStyles,...{display:'flex',justifyContent:'space-evenly',paddingTop:'5px',paddingBottom:'5px',marginLeft:'10px',borderBottom:'1px solid #DDDDDD'}}} onClick={()=>{onChangeHandel(JSON.stringify(el))}}>
                        <input type="radio" value={JSON.stringify(el)} name="radioGroup"/>
                        <div>{`${el?.gateNum}, ${moment.utc(el.iaoLclEstArrDtTm).format('HH:mm')}`}</div>
                      </div>
                 )})}
              <div style={{display:'flex',justifyContent:'space-around',height:'40px',alignItems:'center',font:'normal normal normal 15px/20px Roboto',color:'#0780FC'}}>
                <div style={{width:'50%',cursor:'pointer'}}  onClick={()=>{setIsShowDropDown(false)}}>Cancel</div>
                <div style={{width:'50%',cursor:optionValue?.length>0?'pointer':'no-drop',borderLeft:'1px solid #DDDDDD',height:'100%'}} onClick={()=>{setIsShowDropDown(false);onSubmitHandel([requestBody])}}>
                {/* <div style={{width:'50%',cursor:optionValueRefer?.length>0?'pointer':'no-drop',borderLeft:'1px solid #DDDDDD',height:'100%'}} onClick={()=>{setIsShowDropDown(false);onSubmitHandel([requestBody])}}> */}
                {/* <div style={{width:'50%',cursor:'pointer',borderLeft:'1px solid #DDDDDD',height:'100%'}} onClick={()=>{setIsShowDropDown(false);onSubmitHandel(requestBody)}}> */}
                  <div style={{marginTop:'10px'}}>Submit</div>
                </div>
              </div>
              </div>
              </div>
            }
          </div>}
            
            </>
            }
            
            {/* {selectedGateNumValue!=''&&<div style={buttonStyles} onClick={()=>{onSubmitHandel([requestBody])}}>Submit</div>} */}
        </div>
    )
}
export default TwinDropDown;
