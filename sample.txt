import { useEffect, useState, useRef } from "react";
import moment from "moment";

const FlightListTooltip = ({
  isTooltipEnabled,
  xAxisTooltipData,
  flightDetailData,
}: FlightListTooltipProps) => {
  let displayInterval: number = 5;
  let totalNoOfDisplayRecord: number = 10;
  const [extendedTimeList, setExtendendTimeList] = useState<any>([]);
  const [isComponentVisible, setIsComponentVisible] = useState(true);
  const ref:any = useRef(null);

  let listArray: any = [1, 2, 3, 4, 5, 6];

  const handleClickOutside = (event: any) => {
    if (ref.current && !ref.current.contains(event.target)) {
    console.log("isComponentVisible", isComponentVisible, ref.current)
      
      setIsComponentVisible(false);
    }
  };

  useEffect(() => {
    document.addEventListener("click", handleClickOutside, true);
    return () => {
      document.removeEventListener("click", handleClickOutside, true);
    };
  }, []);

  useEffect(() => {
      console.log("tooltipData", extendedTimeList[4])
    if (isTooltipEnabled && xAxisTooltipData !== "") {
      let selectedTime: any = new Date(xAxisTooltipData);
      let selectedTimeInMin: any = selectedTime.getMinutes();
      selectedTime.setMinutes(selectedTimeInMin + displayInterval);

      let displayValues: any = [];
      for (let index = 0; index < totalNoOfDisplayRecord; index++) {
        let selectedStartTime: any = new Date(selectedTime);
        let selectedStartTimeMin: any = selectedStartTime.getMinutes();
        selectedStartTime.setMinutes(selectedStartTimeMin - index);

        let hrs: any = `0${selectedStartTime.getUTCHours()}`.slice(-2);
        let min: any = `0${selectedStartTime.getUTCMinutes()}`.slice(-2);
        displayValues.unshift(`${hrs}:${min}`);
      }
      setExtendendTimeList(displayValues);
    }
  }, [xAxisTooltipData]);

  return (
    <>
    { isComponentVisible && <div  className="extension-container">
      {isTooltipEnabled && (
        <>
          <div ref={ref} className="tooltip-info">
            <div className="tooltip-txt">
              <div>80</div>
              <div>UA1018-30</div>
            </div>
            <div className="tooltip-txt">
              <div>75</div>
              <div>UA1086-30</div>
            </div>
          </div>

          <div className="extend-xaxis">
            {extendedTimeList.map((value: any, index: any) => {
              return <div className={`${index === 4 ? "xaxis-highlight-label" : ""}`} key={index}>{value}</div>;
            })}
          </div>
          
        </>
      )}
    </div>}
    </>
  );
};

interface FlightListTooltipProps {
  isTooltipEnabled: boolean;
  xAxisTooltipData: string;
  flightDetailData: any;
}

export default FlightListTooltip;
