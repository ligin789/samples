import { useRef, useEffect } from "react";
import mapboxgl from "mapbox-gl";
import "mapbox-gl/dist/mapbox-gl.css";
import * as turf from "@turf/turf";
import "./mapStyle.css";
import "./style.css";

//import flightData from "../../assets/jsons/data.json"; // adjust path if needed

mapboxgl.accessToken =
  "pk.eyJ1IjoicHJhdmVlbmFtYmFkeSIsImEiOiJjbGkydmlzdTMwOXFzM2VtdnUyMnpyOGQ4In0.bWuINnmssNAZbp1zdLkhhg";

const popupContent = `<div style="
  font-family: sans-serif;
  font-size: 12px;
  padding: 2px 2px;
 
" >
<div style="text-align:center;font-size:14px!important;font-weight:bold";>Den</div>
  
 <div style=" display: flex;
  align-items: center;
  gap: 1px;
  text-align: center;">
 <div style="display: flex; flex-direction: column; min-width: 50px;">
    <span style="font-weight: bold; color: #555;">TASK</span><span>02</span>
  </div>
  <div style="display: flex; flex-direction: column; min-width: 50px;">
    <span style="font-weight: bold; color: #555;">Defect</span><span>01</span>
  </div>
  <div style="display: flex; flex-direction: column; min-width: 50px;">
    <span style="font-weight: bold; color: #555;">ET</span><span>120m</span>
  </div>
  <div style="display: flex; flex-direction: column; min-width: 50px;">
    <span style="font-weight: bold; color: #555;">Mhrs</span><span>1:20</span>
  </div>
  <div style="display: flex; flex-direction: column; min-width: 60px;">
    <span style="font-weight: bold; color: #555;">Skills</span><span>Avn, M</span>
  </div>
  <div style="display: flex; flex-direction: column; min-width: 50px;">
    <span style="font-weight: bold; color: #555;">Parts</span><span>02</span>
  </div>
  <div style="display: flex; flex-direction: column; min-width: 50px;">
    <span style="font-weight: bold; color: #555;">Tools</span><span>-</span>
  </div>
  <div style="display: flex; flex-direction: column; min-width: 50px;">
    <span style="font-weight: bold; color: #555;">GSEs</span><span>-</span>
  </div>
 
 </div>
  
</div>`;
const MapboxMap = (props: any) => {
  console.log(props.selectedItems);
  const { flightData, isTwoHeader = false } = props;
  const mapContainer = useRef(null);
  const map: any = useRef(null);
  const routesRef = useRef<any[]>([]);
  const pointsRef = useRef<Record<string, any>>({});
  useEffect(() => {
    map?.current?.api?.resize();
  }, []);
  useEffect(() => {
    map.current = null;
    if (map.current) return;
    map.current = new mapboxgl.Map({
      container: mapContainer.current!,
      style: "mapbox://styles/mapbox/satellite-streets-v12",
      center: [-104.97967799461988, 39.73348630179578],
      zoom: 4,
      pitch: 0,
      bearing: 0,
      antialias: true,
      projection: "mercator",
    });

    map.current.on("load", () => {
      const redDotFeatures: any[] = [];
      flightData?.forEach(({ flights }: any) => {
        flights.forEach(({ id, origin, destination, speed }: any) => {
          const route: any = {
            id,
            type: "FeatureCollection",
            features: [
              {
                type: "Feature",
                geometry: {
                  type: "LineString",
                  coordinates: [origin, destination],
                },
              },
            ],
          };

          const lineDistance = turf.length(route.features[0]);
          const arc: any[] = [];

          for (let i = 0; i < lineDistance; i += lineDistance / speed) {
            const segment = turf.along(route.features[0], i);
            arc.push(segment.geometry.coordinates);
          }

          route.features[0].geometry.coordinates = arc;
          routesRef.current.push(route);

          // Add route source + layer
          map.current!.addSource(id + "-route", {
            type: "geojson",
            data: route,
          });

          map.current!.addLayer({
            id: id + "-route",
            source: id + "-route",
            type: "line",
            paint: {
              "line-width": 4,
              "line-color": "#FF1D00",
              "line-dasharray": [2, 1],
            },
          });

          // Midpoint plane
          const midIndex = Math.floor(arc.length / 2);
          const midPoint = arc[midIndex];
          const nextPoint = arc[midIndex + 1] || midPoint;

          const bearing = turf.bearing(
            turf.point(midPoint),
            turf.point(nextPoint)
          );

          const point = {
            type: "FeatureCollection",
            features: [
              {
                type: "Feature",
                properties: { bearing },
                geometry: {
                  type: "Point",
                  coordinates: midPoint,
                },
              },
            ],
          };

          pointsRef.current[id] = point;

          map.current!.addSource(id, { type: "geojson", data: point });
          map.current!.addLayer({
            id: id,
            source: id,
            type: "symbol",
            layout: {
              "icon-image": "airport",
              "icon-size": 1.5,
              "icon-rotate": ["get", "bearing"],
              "icon-rotation-alignment": "map",
              "icon-allow-overlap": true,
              "icon-ignore-placement": true,
            },
          });
          //pop up layer
          if (props.SimulateResultAirportDataJson) {
            props.SimulateResultAirportDataJson?.[0].options.forEach(
              (item: any, index: number) => {
                if (
                  props.selectedItems.reverse().includes(item.id) &&
                  item?.coordinates
                ) {
                  // map.current.flyTo({
                  //   zoom: 8,
                  //   speed: 1,
                  //   curve: 1,
                  //   center: item.center,
                  // });
                  // Avoid re-adding the same source/layer
                  new mapboxgl.Popup({ closeButton: false })
                    .setLngLat(item.center)
                    .setHTML(popupContent)
                    .addTo(map.current);
                }
              }
            );
          }

          // Red dots
          redDotFeatures.push(
            {
              type: "Feature",
              geometry: { type: "Point", coordinates: origin },
              properties: {},
            },
            {
              type: "Feature",
              geometry: { type: "Point", coordinates: destination },
              properties: {},
            }
          );
        });
      });

      map.current!.addSource("red-dots", {
        type: "geojson",
        data: {
          type: "FeatureCollection",
          features: redDotFeatures,
        },
      });
      //polygon marking
      props.AirportData?.[0].options.forEach((item: any, index: number) => {
        const sourceId = `states-boundary-${index}`;
        const fillLayerId = `states-fill-${index}`;
        const outlineLayerId = `states-outline-${index}`;
        if (
          props.selectedItems.reverse().includes(item.id) &&
          item?.coordinates
        ) {
          map.current.flyTo({
            zoom: 8,
            speed: 1,
            curve: 1,
            center: item.center,
          });
          // Avoid re-adding the same source/layer
          if (!map.current.getSource(sourceId)) {
            map.current.addSource(sourceId, {
              type: "geojson",
              data: item.coordinates,
            });

            map.current.addLayer({
              id: fillLayerId,
              type: "fill",
              source: sourceId,
              paint: {
                "fill-color": "red",
                "fill-opacity": 0.4,
              },
            });

            map.current.addLayer({
              id: outlineLayerId,
              type: "line",
              source: sourceId,
              paint: {
                "line-color": "#c0392b",
                "line-width": 2,
              },
            });
          }
        }
      });
      map.current!.addLayer({
        id: "red-dots-layer",
        type: "circle",
        source: "red-dots",
        paint: {
          "circle-radius": 5,
          "circle-color": "#FF1D00",
          "circle-stroke-width": 1.5,
          "circle-stroke-color": "#fff",
        },
      });
      map.current.on("click", (e: any) => {
        alert(e.lngLat.lng + "," + e.lngLat.lat);
      });
    });
  }, [flightData, props.selectedItems]);

  return (
    <div
      ref={mapContainer}
      className={isTwoHeader ? "map-container" : "map-container1"}
    />
  );
};

export default MapboxMap;
