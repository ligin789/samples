import React, { Fragment, useEffect, useState } from "react";
import "./index.css";
import ArrowBack from "../../assets_Air_India/images/arrowBack.svg";
import Search from "../../assets_Air_India/images/searchIcon.svg";
import CrossCircle from "../../assets_Air_India/images/close-circle.svg";
import { useTranslation } from "react-i18next";
import Colors from "../../global/Color";

const Dropdown2 = ({ userPreference, setUserPreference, setSelectedColumnsArray, colSearchText, setColSearchText,setSelectedColumnsGroupArray,
  selectedColumnsGroupArray }: any) => {
  const [expandedGroups, setExpandedGroups] = useState<any>([])
  const [colData, setColData] = useState(userPreference?.grid_columns)
  type TranslationKey=''
  const { t, i18n } = useTranslation<TranslationKey>();
  
  useEffect(() => {
    getSelectedColumn(userPreference?.grid_columns ?? [])
  }, [userPreference?.grid_columns])

  const toggleSelection = (selectedItemName: string) => {
    const array = userPreference?.grid_columns ?? [];
    const isAllSelected = array.find((item: any) => item.name === 'ALL')?.isSelected;
    const updatedArray = array.map((item: any) => {
      if (selectedItemName === 'ALL') {
        const isSelected = !isAllSelected;
        return { ...item, isSelected: item.isMandatory ? item.isSelected : isSelected, columns: item.columns ? item.columns.map((subItem: any) => ({ ...subItem, isSelected: item.isMandatory && subItem.isMandatory ? subItem.isSelected : isSelected })) : undefined }
      } else if (item.name === selectedItemName && !item.isMandatory) {
        const isSelected = !item.isSelected;
        return { ...item, isSelected, columns: item.columns ? item.columns.map((subItem: any) => ({ ...subItem, isSelected })) : undefined }
      } else if (item?.columns?.some((subItem: any) => subItem.key === selectedItemName && !subItem.isMandatory)) {
        const updatedColumns = item.columns.map((subItem: any) => {
          if (subItem.key === selectedItemName) {
            return { ...subItem, isSelected: !subItem.isSelected };
          }
          return subItem;
        });
        return { ...item, columns: updatedColumns, isSelected: !item.isMandatory ? updatedColumns.some((subItem: any) => subItem.isSelected) : item.isSelected };
      } else if (item.name === 'ALL' && isAllSelected) {
        return { ...item, isSelected: false };
      } else {
        return item
      }
    })

    const areAllItemsSelected = updatedArray.every(
      (item: any) => item.name === 'ALL' || (item.isSelected && (!item.columns || item.columns.every((subItem: any) => subItem.isSelected)))
    );
    return updatedArray.map((item: any) => {
      if (item.name === 'ALL') {
        return { ...item, isSelected: areAllItemsSelected };
      }
      return item;
    });
  };

  const handleSelect = (selectedItemName: string) => {
    const array = toggleSelection(selectedItemName)
    getSelectedColumn(array)
  }

  const getSelectedColumn = (array: any = []) => {
    const arrayOfSelectedOptions: any = []
    const arrayOfSelectedGroups:any = []
    array.forEach((item: any) => {
      if (item?.columns) {
        item?.columns?.forEach((subItem: any) => {
          if (subItem.isSelected) {
            arrayOfSelectedOptions.push(subItem)
          }
        })
        if(item.isSelected){
          arrayOfSelectedGroups.push(item)
        }
      } else if (item.isSelected) {
        arrayOfSelectedOptions.push(item)
        arrayOfSelectedGroups.push(item)
      }
    })
    setSelectedColumnsArray(arrayOfSelectedOptions)
    setSelectedColumnsGroupArray(arrayOfSelectedGroups)
    setUserPreference((prevState: any) => ({ ...prevState, grid_columns: array }))
    setColData(array)
  }
  const toggleSubOptions = (item: any) => {
    if (!item.columns) {
      return
    }
    const group = item.name;
    if (expandedGroups.includes(group)) {
      setExpandedGroups((prevState: any) => prevState.filter((element: string) => element !== group))
    } else {
      setExpandedGroups((prevState: any) => [...prevState, group])
    }
  };

  useEffect(() => {
    const arr = userPreference?.grid_columns?.filter((item: any) => {
      if (item.name.toLowerCase().includes(colSearchText?.toLowerCase())) {
        return true
      }
      if (item?.columns?.find((subItem: any) => subItem?.key?.toLowerCase()?.includes(colSearchText?.toLowerCase()))) {
        return true
      }
      return false
    })
    setColData(arr)
  }, [colSearchText])

  useEffect(() => {
    setColData(userPreference?.grid_columns)
  }, [userPreference])

  return (
    <div className="addRemoveHeaderContainer">
      <div className="dropdown-content2">
        <div className="searchboxContainer">
          <input type="text" className="columnSearch" placeholder="Search" value={colSearchText} onChange={(e) => setColSearchText(e.target.value)} />.
          {colSearchText.length ?
            <img src={CrossCircle} alt="cross" onClick={() => setColSearchText('')} style={{ width: 16, height: 16 }}/>
            :
            <img src={Search} alt="icon" style={{ width: 12, height: 12 }} />
          }
        </div>
        {colData?.map((option: any, index: number) => (
          <Fragment key={option.name}>
            <div className={`columnItems ${option.columns ? "withDropdown" : ""}`} >
              <label className={`dropDownLabelW ${option.columns ? "withChild" : ""}`}>
                <input data-testid="MenuDropdown2 input" type="checkbox" className="dropDownLabel" checked={option.isSelected} onChange={(e) => { handleSelect(option.name); e.stopPropagation() }} />
                {option.name.toUpperCase()}
              </label>
              {option.columns && (
                <div className="toggle-icon" onClick={(e) => toggleSubOptions(option)}>
                  <img src={ArrowBack} alt="ArrowBack" style={{ width: 13, height: 6 }} />
                </div>
              )}
            </div>
            {option.columns && expandedGroups.includes(option.name) && (
              <div className="sub-options ">
                {option.columns.map((subOption: any) => (
                  <label key={subOption.key} className="sub-options-label">
                    <input type="checkbox" data-testid="inputhandleselectsub" className="dropDownLabelSub" checked={subOption.isSelected} onChange={(e) => handleSelect(subOption.key)} />
                    {subOption.key}
                  </label>
                ))}
              </div>
            )}
          </Fragment>
        ))}
      </div>
    </div>
  );
};

export default Dropdown2;
