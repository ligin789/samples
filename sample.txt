import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import RoleManagementComponent from './RoleManagementComponent';
import * as constants from "../../constants/constants";
import { useDispatch, useSelector } from "react-redux";
import { Radio, Button, Modal, Menu, Input } from "antd";
import AccessManagementJson from "../../store/UserRoleManagement/data.json";
import roleObjectData from "../../store/dashboard/roleObject.json";
import ServiceabilityData from '../../store/dashboard/data.json';

// Mock the Redux hooks
jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

// Mock the antd components
jest.mock("antd", () => {
  const antd = jest.requireActual("antd");
  return {
    ...antd,
    Radio: jest.fn(({ children, ...props }) => (
      <div {...props}>{children}</div>
    )),
    Button: jest.fn(({ children, ...props }) => (
      <button {...props}>{children}</button>
    )),
    Modal: jest.fn(({ children, ...props }) => (
      <div {...props}>{children}</div>
    )),
    Menu: {
      ...antd.Menu,
      Item: jest.fn(({ children, ...props }) => (
        <div {...props}>{children}</div>
      )),
      SubMenu: jest.fn(({ children, ...props }) => (
        <div {...props}>{children}</div>
      )),
    },
    Input: {
      ...antd.Input,
      Search: jest.fn(({ children, ...props }) => (
        <input {...props} type="search" />
      )),
    },
  };
});

// Mock the ant-design icons
jest.mock("@ant-design/icons", () => ({
  SearchOutlined: jest.fn(() => <span>SearchIcon</span>),
}));

describe('RoleManagementComponent', () => {
  const mockDispatch = jest.fn();
  const mockUseSelector = useSelector as jest.Mock;
  
  beforeEach(() => {
    (useDispatch as jest.Mock).mockReturnValue(mockDispatch);
    
    mockUseSelector.mockImplementation((selector) => {
      if (selector === jest.requireActual("react-redux").shallowEqual) {
        return false;
      }
      return {
        UserRoleSource: {
          userRoles: null,
          data: null,
          error: null,
        },
        dashboard: {
          dashboardData: null,
          navbarData: null,
        },
      };
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<RoleManagementComponent />);
    expect(screen.getByTestId('roleManagementPage')).toBeInTheDocument();
  });

  it('dispatches actions on mount', () => {
    render(<RoleManagementComponent />);
    expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function)); // errorReset
    expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function)); // requestUserRoles
  });

  it('renders USER TYPE section with radio buttons', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: null,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: null,
      },
    }));
    
    render(<RoleManagementComponent />);
    expect(screen.getByText('USER TYPE')).toBeInTheDocument();
    ServiceabilityData.role.forEach((role) => {
      expect(screen.getByText(role)).toBeInTheDocument();
    });
  });

  it('handles role change', () => {
    render(<RoleManagementComponent />);
    const radioButtons = screen.getAllByTestId(/rolechange_/);
    fireEvent.click(radioButtons[0]);
    // Add assertions for role change behavior
  });

  it('renders SELECT SCREEN section with menu', () => {
    render(<RoleManagementComponent />);
    expect(screen.getByText('SELECT SCREEN')).toBeInTheDocument();
    expect(screen.getByTestId('handleclick')).toBeInTheDocument();
  });

  it('handles screen selection', () => {
    render(<RoleManagementComponent />);
    const menu = screen.getByTestId('handleclick');
    fireEvent.click(menu);
    // Add assertions for screen selection behavior
  });

  it('renders SELECT FUNCTIONALITY section with search', () => {
    render(<RoleManagementComponent />);
    expect(screen.getByText('SELECT FUNCTIONALITY')).toBeInTheDocument();
    expect(screen.getByTestId('search')).toBeInTheDocument();
  });

  it('handles functionality search', () => {
    render(<RoleManagementComponent />);
    const searchInput = screen.getByTestId('search');
    fireEvent.change(searchInput, { target: { value: 'test' } });
    // Add assertions for search behavior
  });

  it('handles functionality click', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: null,
      },
    }));
    
    render(<RoleManagementComponent />);
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    // Add assertions for functionality click behavior
  });

  it('renders departments when sidebar is selected', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: roleObjectData,
      },
    }));
    
    const { rerender } = render(<RoleManagementComponent />);
    
    // Simulate selecting a functionality to set sidebar
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    
    rerender(<RoleManagementComponent />);
    
    // Check if departments are rendered
    AccessManagementJson.role_management[0].functionalities[0].access_management.forEach((dept) => {
      expect(screen.getByText(dept.department)).toBeInTheDocument();
    });
  });

  it('handles access change via radio buttons', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: roleObjectData,
      },
    }));
    
    render(<RoleManagementComponent />);
    
    // Simulate selecting a functionality to set sidebar
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    
    // Get the first radio button group
    const radioGroups = screen.getAllByTestId('onchange');
    fireEvent.click(radioGroups[0].querySelector('input[value="2"]')!);
    
    // Add assertions for access change behavior
  });

  it('shows save modal when save button is clicked', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: roleObjectData,
      },
    }));
    
    render(<RoleManagementComponent />);
    
    // Simulate selecting a functionality to set sidebar
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    
    // Make a change to enable the save button
    const radioGroups = screen.getAllByTestId('onchange');
    fireEvent.click(radioGroups[0].querySelector('input[value="2"]')!);
    
    // Click the save button
    const saveButton = screen.getByText('Save');
    fireEvent.click(saveButton);
    
    // Check if modal is shown
    expect(screen.getByText('Do you want to save the changes?')).toBeInTheDocument();
  });

  it('handles save confirmation', async () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: roleObjectData,
      },
    }));
    
    render(<RoleManagementComponent />);
    
    // Simulate selecting a functionality to set sidebar
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    
    // Make a change to enable the save button
    const radioGroups = screen.getAllByTestId('onchange');
    fireEvent.click(radioGroups[0].querySelector('input[value="2"]')!);
    
    // Click the save button to show modal
    const saveButton = screen.getByText('Save');
    fireEvent.click(saveButton);
    
    // Click OK in the modal
    const okButton = screen.getByText('OK');
    fireEvent.click(okButton);
    
    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function)); // postUserRoles
    });
  });

  it('handles save cancellation', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: roleObjectData,
      },
    }));
    
    render(<RoleManagementComponent />);
    
    // Simulate selecting a functionality to set sidebar
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    
    // Make a change to enable the save button
    const radioGroups = screen.getAllByTestId('onchange');
    fireEvent.click(radioGroups[0].querySelector('input[value="2"]')!);
    
    // Click the save button to show modal
    const saveButton = screen.getByText('Save');
    fireEvent.click(saveButton);
    
    // Click Cancel in the modal
    const cancelButton = screen.getByText('Cancel');
    fireEvent.click(cancelButton);
    
    // Modal should be closed
    expect(screen.queryByText('Do you want to save the changes?')).not.toBeInTheDocument();
  });

  it('disables save button when no changes are made', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: roleObjectData,
      },
    }));
    
    render(<RoleManagementComponent />);
    
    // Simulate selecting a functionality to set sidebar
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    
    // Save button should be disabled initially
    const saveButton = screen.getByText('Save');
    expect(saveButton).toBeDisabled();
  });

  it('handles write permission correctly', () => {
    mockUseSelector.mockImplementation((selector) => ({
      UserRoleSource: {
        userRoles: AccessManagementJson,
        data: null,
        error: null,
      },
      dashboard: {
        dashboardData: ServiceabilityData,
        navbarData: {
          ...roleObjectData,
          role_management: [{
            screen_mapping_name: "Access_Management",
            access: {
              read_write: false
            }
          }]
        },
      },
    }));
    
    render(<RoleManagementComponent />);
    
    // Simulate selecting a functionality to set sidebar
    const functionalityItems = screen.getAllByTestId(/onfunctional_/);
    fireEvent.click(functionalityItems[0]);
    
    // Radio buttons should be disabled when no write permission
    const radioGroups = screen.getAllByTestId('onchange');
    expect(radioGroups[0]).toHaveClass('ant-radio-disabled');
  });

  // Add more test cases for edge cases and error scenarios
});
