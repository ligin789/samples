import React, { memo, useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  Input,
  Form,
  Select,
  Button,
  Modal,
  Tag,
  Checkbox,
} from "antd";
import VirtualTable from "../virtualization";
import { Sorter, filterData, filterDataRoles} from "../helper";
import { EditFilled } from "@ant-design/icons";
import ServiceabilityData from "../../store/dashboard/data.json";
import Tooltip from "antd/lib/tooltip";
import "./UserManagement.scss";
import UserDetailsJson from "../../store/UserManagement/data.json";
import roleObjectData from "../../store/dashboard/roleObject.json"
import {
  UserManagementActions,
  errorReset,
} from "../../store/UserManagement/actions";
// import { resolveOnChange } from "antd/lib/input/Input";
// import { MenuItem } from '@mui/material';
 
const inputStyle = {
  width: "12.2rem",
  height: "1.9rem",
  borderRadius: "9px",
  borderColor: "white",
  padding: "8px",
  fontSize: "16px",
  background: "#1E4180",
  color: "white",
};
// let UserManagementData = null
const UserManagement = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [addModal, setAddModal] = useState(false);
  // const [form] = Form.useForm();
  const handleReset = () => {
      setwin2kIdError(false);
      setroleError(false)
      setemailError(false)
      setdepartmentError(false)
    //form.resetFields();
    setUserName("");
    setWin2kId("");
    setEmail("");
    setStaffId("");
    setDepartment("");
    setRole([]);
    setCostCenter("");
    // setAction("")
  };
  const dispatch = useDispatch();
 
  const restructuringData=(data)=>{
    // const allowedRoles=["Engineer","Technician"]
    // const filteredData=data && data?.filter(item=>item?.roles?.every(role=>allowedRoles.includes(role))&&item?.roles.length>0)
    let filteredData=data && data?.filter(item=>item?.roles?.some(role=>role==="Engineer"||role==="Technician"))
    console.log("restruct", filteredData)
    const newfilteredData = filteredData?.filter((item)=>{        
      return item?.department === roleObject?.user_profile?.department
    })
    // console.log("restructnew", newfilteredData)
    return newfilteredData
  }
 
  const setRolesDropdown = (roleArray) => {
    //function to change the roles from dashboard api if the logged in user is secondary admin
    Iif(isSecondaryAdmin){
      let roleArrays = roleArray.filter((item)=>{
        if(item==="Engineer"||item==="Technician"){
          return item
        }
      })
      return roleArrays
    }
    else{
      return roleArray
    }
 
  }
 
  const UserManagementPostData = useSelector(
    (state) => state.UserDetailsSource.data
  );
  
 
  const error = useSelector((state) => state.UserDetailsSource.error);
  
  const UserManagementDataObj = UserDetailsJson;
  // const UserManagementDataObj = useSelector((state) => state.UserDetailsSource.userDetails)
 
  // const dashboardData = useSelector((state) => state.dashboard.dashboardData);     //dashboard data from tx dashboard is used here
  const dashboardData = ServiceabilityData; //data from json
 
  // const roleObject = useSelector((state) => state.dashboard.navbarData);
  const roleObject = roleObjectData
 
  const [UserManagementData, setUserManagementData] = useState(UserManagementDataObj)
  const [username, setUserName] = useState("");
  const [win2kId, setWin2kId] = useState("");
  const [win2kIdError, setwin2kIdError] = useState(false);
  const [roleError,setroleError]=useState(false)
  const [emailError,setemailError] =useState(false)
  const [departmentError,setdepartmentError] =useState(false)
  const [email, setEmail] = useState("");
  const [staffId, setStaffId] = useState("");
  const [department, setDepartment] = useState("");
  const [costCenter, setCostCenter] = useState("")
  const [role, setRole] = useState([]);
  const [sortedInfo, SetSortedInfo] = useState(null);
  const [filteredResults, SetFilteredResults] = useState(null);
  const [filteredInfo, SetFilteredInfo] = useState(null);
  const [writePermission, setWritePermission] = useState(null)
  const [deleteModal, setDeleteModal] = useState(false);
  const [isSecondaryAdmin, setIsSecondaryAdmin] = useState(false); //for secondary admin login case
  const [action, setAction] = useState(null)
  const roles = [];
  let NewUserDetails;
  
  
  
useEffect(()=>{
 
 
  roleObject?.role_management?.forEach((item) => 
  // setNavigationLink(item?.access_list, item?.screen_name, item?.screen_mapping_name)
  {
    console.log("writePermission", item)
    if(item.screen_mapping_name==="User_Management"){
      // item.access_list.forEach((data)=>{
        console.log("writePermission", item.access.read_write)
        if (item.access.read_write===true){
          setWritePermission(true)
        }
        else E{
          setWritePermission(false)
        }
      // })
    }
  }
  )
},[])
 
useEffect(()=>{
  Iif(roleObject.user_profile.roles.includes("Secondary Admin") && !roleObject.user_profile.roles.includes("Admin") ) {  //for secondary admin login case
    setUserManagementData(restructuringData(UserManagementDataObj))
    setIsSecondaryAdmin(true)
   }
   else{
     setUserManagementData(UserManagementDataObj)
   }
 
},[UserManagementDataObj])
   
let rolesDropdown = setRolesDropdown(dashboardData.role) ;
  const handleChange = (event) => {
    setUserName(event.target.value);
  };
  // const handleDropdownChange = (e) => {
  //   console.log("Dropdown value change::", e, e.key)
  // }
  const handleChangeTable = (
    pagination,
    filters,
    sorter,
    { currentDataSource }
  ) => {
    console.log("filters in handle", filters)
    SetFilteredInfo(filters);
    SetSortedInfo(sorter);
    SetFilteredResults(currentDataSource);
  };
  useEffect(() => {
    dispatch(errorReset());
    dispatch(UserManagementActions.requestUserDetails());
  }, [dispatch, UserManagementPostData]);
 
  useEffect(() => {
    // let filterTemp;
 
    Eif (!error && UserManagementData) {
      SetFilteredResults(UserManagementData);
      SetFilteredInfo(UserManagementData);
    }
  }, [UserManagementData]);
 
  const showModal = () => {
    setAction("add")
    setIsModalOpen(true);
    console.log("action change add", action);
  };
  const handleDone = () => {
    console.log("post req handledone", NewUserDetails);
    // setAction("add")
    if (!win2kId?.length) {
      setwin2kIdError(true);
    }
    if (!role?.length) {
      setroleError(true);
    }
    if (!email?.length) {
      setemailError(true);
    }
    if (!department?.length) {
      setdepartmentError(true);
    }
    
 
    if(!win2kId?.length || !role?.length || !email?.length || !department?.length){
      return;
    }
    setIsModalOpen(false);
 
    console.log( "post req check outside",win2kId, username, staffId, email, department,role );
    if (win2kId && email && department && role) {
      setAddModal(true)
      console.log( "post req check", NewUserDetails );
      dispatch(UserManagementActions.postUserDetails(NewUserDetails));
    }
    handleReset();
  };
 
  const handleDeleteUser = () =>{
 
      // setAction("delete");
          console.log("action change", action)
    // if (!win2kId?.length) {
    //   setwin2kIdError(true);
    // }
    // if (!role?.length) {
    //   setroleError(true);
    // }
    // if (!email?.length) {
    //   setemailError(true);
    // }
    // if (!department?.length) {
    //   setdepartmentError(true);
    // }    
 
    // if(!win2kId?.length || !role?.length || !email?.length || !department?.length){
    //   return;
    // }
    setIsModalOpen(false);
    setDeleteModal(false);
 
    // if (win2kId && email && department && role) {
      // setAddModal(true)
      console.log( "post req check delete", NewUserDetails );
      dispatch(UserManagementActions.postUserDetails(NewUserDetails));
      
    // }
    handleReset();
  }
 
  const handleCancel = () => {
      setwin2kIdError(false)
      setroleError(false)
      setemailError(false)
      setdepartmentError(false)
      setIsModalOpen(false);
    // setIsModal2Open(false)
  };
  const handleDeleteModal = () => {
    setAction("delete")
    setDeleteModal(true)
  }
  const handleEdit = (record) => {
    console.log("Editing record:", record);
    setAction("add")
    setDepartment(record.department);
    setCostCenter(record.division);
    setEmail(record.email_id);
    setStaffId(record.staff_id);
    setWin2kId(record.win2k_id);
    setRole(record.roles);
    setUserName(record.staff_name);
    setIsModalOpen(true);
    console.log("action change", action)
  };
 
  const handleClose = () => {
    console.log("close")
    setAddModal(false)
  }
  const handleCloseDeleteModal = () => {
    console.log("close")
    setDeleteModal(false)
  }
 
  const dataWithEditColumn = UserManagementData?.map((record) => ({
    ...record,
    operation: writePermission && <EditFilled onClick={() => handleEdit(record)} data-testid = "editbutton"/>,
  }));
 
  const sortOrderCompareFunction = (val1 , val2) => { 
    console.log(" ", val1, "order", val2);
   return val1 && val2
  }
 
  const columns = [
    {
      title: "USER NAME",
      dataIndex: "staff_name",
      key: "staff_name",
      sorter: (a, b) => Sorter.DEFAULT(a.staff_name, b.staff_name),
      sortOrder: sortOrderCompareFunction(sortedInfo?.columnKey === "staff_name" ,sortedInfo?.order),
      filters: filterData(filteredResults, (item) => item.staff_name),
      filteredValue: filteredInfo?.staff_name || null,
      onFilter: (value, source) => {
        return source.staff_name === value;
      },
      filterSearch: true,
      // filterMode: "tree",
      responsive: ["xs", "sm", "md", "lg"],
      ellipsis: true,
      //width: -20,
    },
    {
      title: "WIN2KID",
      dataIndex: "win2k_id",
      key: "win2k_id",
      sorter: (a, b) => Sorter.DEFAULT(a.win2k_id, b.win2k_id),
      sortOrder: sortOrderCompareFunction(sortedInfo?.columnKey === "win2k_id" , sortedInfo?.order),
      filters: filterData(filteredResults, (item) => item.win2k_id),
      filteredValue: filteredInfo?.win2k_id || null,
      onFilter: (value, source) => {
        return source.win2k_id === value;
      },
      filterSearch: true,
      // filterMode: "tree",
      responsive: ["xs", "sm", "md", "lg"],
      ellipsis: true,
      //width: -20,
    },
    {
      title: "EMAIL",
      dataIndex: "email_id",
      key: "email_id",
      sorter: (a, b) => Sorter.DEFAULT(a.email_id, b.email_id),
      sortOrder: sortOrderCompareFunction(sortedInfo?.columnKey === "email_id" , sortedInfo?.order),
      filters: filterData(filteredResults, (item) => item.email_id),
      filteredValue: filteredInfo?.email_id || null,
      onFilter: (value, source) => {
        return source.email_id === value;
      },
      filterSearch: true,
      // filterMode: "tree",
      responsive: ["xs", "sm", "md", "lg"],
      ellipsis: true,
      //width: -20,
    },
    {
      title: "STAFF ID",
      dataIndex: "staff_id",
      key: "staff_id",
      sorter: (a, b) => Sorter.DEFAULT(a.staff_id, b.staff_id),
      sortOrder: sortOrderCompareFunction(sortedInfo?.columnKey === "staff_id" , sortedInfo?.order),
      filters: filterData(filteredResults, (item) => item.staff_id),
      filteredValue: filteredInfo?.staff_id || null,
      onFilter: (value, source) => {
        return source.staff_id === value;
      },
      filterSearch: true,
      // filterMode: "tree",
      responsive: ["xs", "sm", "md", "lg"],
      ellipsis: true,
      //width: -20,
    },
    {
      title: "DEPARTMENT",
      dataIndex: "department",
      key: "department",
      sorter: (a, b) => Sorter.DEFAULT(a.department, b.department),
      sortOrder: sortOrderCompareFunction(sortedInfo?.columnKey === "department" , sortedInfo?.order),
      filters: filterData(filteredResults, (item) => item.department),
      filteredValue: filteredInfo?.department || null,
      onFilter: (value, source) => {
        return source.department === value;
      },
      filterSearch: true,
      // filterMode: "tree",
      responsive: ["xs", "sm", "md", "lg"],
      ellipsis: true,
      //width: -20,
    },
    {
      title: "COST CENTER",
      dataIndex: "division",
      key: "division",
      sorter: (a, b) => Sorter.DEFAULT(a.division, b.division),
      sortOrder: sortOrderCompareFunction(sortedInfo?.columnKey === "division" , sortedInfo?.order),
      filters: filterData(filteredResults, (item) =>{ 
        // console.log("filteredinfo div", filteredInfo)
        return item.division}),
      filteredValue: filteredInfo?.division || null,
      onFilter: (value, source) => {
        // console.log("filter source div", source, value)
        return source.division === value;
      },
      filterSearch: true,
      // filterMode: "tree",
      responsive: ["xs", "sm", "md", "lg"],
      ellipsis: true,
      //width: -20,
    },
    {
      title: "ROLE",
      dataIndex: "roles",
      key: "roles",
      sorter: (a, b) => Sorter.ARRAY(a.roles, b.roles),
      sortOrder: sortOrderCompareFunction(sortedInfo?.columnKey === "roles" ,sortedInfo?.order),
      filters: filterDataRoles(filteredResults, (item) => {
        // console.log("filteredinfo roles",filteredInfo)
        // console.log("roles in filter", item.roles);
        return item.roles}),
      filteredValue: filteredInfo?.roles || null,
      onFilter: (value, source) => {
        // console.log("filter source", source, value)
        // console.log("filter source check", source.roles?.[0]===value)
        // let roleString = source.roles.toString();
        // console.log("filter source str",roleString,"check", roleString.includes(value))
        // return roleString.includes(value)
 
        
        // let ret
        // source.roles.map((item, index)=>{
        //   console.log( "map role", source.roles?.[index]===value)
        
        //   if(source.roles?.[index]===value){
        //     ret=source.roles[index]
        //   }
        // })
        // let len = source.roles.length
        // for(var i =0;i<len;i++)
        // {
        //   return source.roles?.[i]===value
        // }
        return source.roles?.[0]===value || source.roles?.[1]===value || source.roles?.[2]===value;
       
      },
      // filterSearch: true,
      // filterMode: "tree",
      responsive: ["xs", "sm", "md", "lg"],
      ellipsis: true,
      //width: -20,
    },
    {
      title: "operation",
      dataIndex: "operation",
    },
    // {
    //   title: "STATUS",
    //   dataIndex: "status",
    //   key: "status",
    //   sorter: (a, b) => Sorter.DEFAULT(a.status, b.status),
    //   sortOrder: sortedInfo?.columnKey === "status" && sortedInfo.order,
    //   filters: filterData(filteredResults, (item) => item.status),
    //   filteredValue: filteredInfo?.status || null,
    //   onFilter: (value, source) => {
    //     return source.status === value;
    //   },
    //   filterSearch: true,
    //   filterMode: "tree",
    //   responsive: ["xs", "sm", "md", "lg"],
    //   ellipsis: true,
    //   //width: -20,
    // },
  ];
 
   NewUserDetails = JSON.stringify({
    "win2k_id": win2kId,
    "staff_name": username,
    "staff_id": staffId,
    "job_description": "",
    "email_id": email,
    "division": costCenter,
    "department": department,
    "roles": role,
    "action": action
  });
 
  const Tooltips = (arr, columnIndex) => {
    Iif (columnIndex === 7){return ''}
    Iif (Array.isArray(arr) && arr.length > 0) {
      return arr.reduce((total, val) => `${total},${val}`);
    } else {
      return arr;
    }
  };
  const TableRow = (value, columnIndex, style, widthCSS, row) => {
    console.log("TableRowTableRow", value, columnIndex);
    return (
      <Tooltip title={Tooltips(value, columnIndex)}>
        {columnIndex === 2 ? (
          <div
            className="virtual-table-cell"
            style={{ ...style, paddingLeft: "1px" }}
          >
            {value}
          </div>
        ) : columnIndex === 6 ? (
          <div
            className="virtual-table-cell"
            style={{ ...style, paddingLeft: "1px" }}
          >
            {value?.toString()}
          </div>
        ):
        (
          <div
            className={`virtual-table-cell ${widthCSS}`}
            style={{ ...style, paddingLeft: "25px" }}
          >
            {value}
          </div>
        )}
       
        {/* <div className={`virtual-table-cell ${widthCSS}`} style={style}>
          {value?.split(" ") ?
          !Array.isArray(value) ?
            value?.split(" ").length > 2 ?
               <>{value?.split(' ')?.[0]}<br />{value?.split(' ')?.[1]} {value?.split(' ')?.[2]}</>
              :
              value
            :
            value
            :
            null
          }
          <></>
        </div> */}
      </Tooltip>
    );
  };
  const tagRender = (props) => {
    const { label, closable, onClose } = props;
    return (
      <Tag
        color="rgb(30, 65, 128)"
        closable={closable}
        onClose={onClose}
        style={{
          marginRight: 3,
        }}
      >
        {label}
      </Tag>
    );
  };
 
  return (
    <div test-id= "userManagementPage">
      <div style={{ background: "#161d35" }}>
        <div style={{ padding: "11px" }}>
          <Form layout="inline">
            <Form layout="vertical">
              <Form.Item
                label={<span style={{ color: "gray" }}>USER NAME</span>}
              >
                <Input
                  placeholder="Enter"
                  style={inputStyle}
                  value={username}
                  onChange={handleChange}
                  data-testid = "username"
                />
              </Form.Item>
            </Form>
            <Form layout="vertical">
              <Form.Item label={<span style={{ color: "gray" }}>WIN2KID*</span>}>
                <Input
                  placeholder="Enter"
                  style={inputStyle}
                  value={win2kId}
                  onChange={(e) => setWin2kId(e.target.value)}
                  data-testid = "win2kid"
                />
              </Form.Item>
            </Form>
            <Form layout="vertical">
              <Form.Item label={<span style={{ color: "gray" }}>EMAIL*</span>}>
                <Input
                  placeholder="Enter"
                  style={inputStyle}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  data-testid = "email"
                />
              </Form.Item>
            </Form>
            <Form layout="vertical">
              <Form.Item
                label={<span style={{ color: "gray" }}>STAFF ID</span>}
              >
                <Input
                  placeholder="Enter"
                  style={inputStyle}
                  value={staffId}
                  onChange={(e) => setStaffId(e.target.value)}
                  data-testid = "staffid"
                />
              </Form.Item>
            </Form>
          </Form>
        </div>
        <div style={{ padding: "20px", paddingLeft: "6.5px" }}>
          <Form layout="inline">
            <Form layout="vertical">
              <Form.Item
                label={<span style={{ color: "gray" }}>DEPARTMENT*</span>}
              >
                <Select
                  placeholder="Select"
                  className="custom-select"
                  style={{ width: "12rem", height: "-7rem" }}
                  value={department}
                  onChange={(value) => setDepartment(value)}
                  data-testid = "selectButtondept"
                >
                  <option value="" disabled selected>
                    SELECT
                  </option>
                  {dashboardData?.department?.map((item, index) => {
                    return <option key={item}>{item}</option>;
                  })}
                </Select>
              </Form.Item>
            </Form>
            <Form layout="vertical">
              <Form.Item
                label={<span style={{ color: "gray" }}>COST CENTER</span>}
              >
                <Select
                  placeholder="Select"
                  className="custom-select"
                  style={{ width: "12rem", height: "-7rem" }}
                  onChange={(value) => setCostCenter(value)}
                  data-testid = "selectButtoncost"
                >
                  <option value="" disabled selected>
                    SELECT
                  </option>
                </Select>
              </Form.Item>
            </Form>
            <Form layout="vertical">
              <Form.Item
                label={<span style={{ color: "gray" }}>ROLE(USER TYPE)*</span>}
              >
                <Select
                  className="custom-select"
                  style={{ width: "12rem", height: "-7rem" }}
                  placeholder="Select"
                  value={role}
                  onChange={(value) => setRole(value)}
                  mode="multiple"
                  tagRender={tagRender}
                  showArrow = {true}
                  optionLabelProp="label"
                  data-testid = "selectButtonrole"
                >
                  {(rolesDropdown)?.map((item) => {
                    return (
                      <option key={item} value={item} label={item}>
                        <Checkbox checked={role?.includes(item)}>
                          {item}
                        </Checkbox>
                      </option>
                    );
                  })}
                </Select>
              </Form.Item>
            </Form>
            { writePermission && <Button
              style={{
                borderRadius: "1rem",
                background: "#1E4180",
                color: "white",
                marginTop: "28.5px",
                marginLeft: "80px",
                paddingRight: "42px",
                paddingLeft: "42px",
              }}
              onClick={showModal}
              data-testid = "addbutton"
            >
              Add
            </Button>}
            <Modal
              title={
                <span style={{ color: "gray" }}>Edit User:{username}</span>
              }
              open={isModalOpen}
              closable={true}
              onCancel={handleCancel}
              data-testid = "cancelModal"
              className="custom-modal"
              footer={[
               !isSecondaryAdmin && <Button
                  style={{
                    borderRadius: "1rem",
                    background: "#1E4180",
                    color: "white",
                    marginTop: "28.5px",
                    marginLeft: "20px",
                  }}
                  key="delete"
                  onClick={handleDeleteModal}
                >
                  Delete User
                </Button>,
                <Button
                  style={{
                    borderRadius: "1rem",
                    background: "#1E4180",
                    color: "white",
                    marginTop: "28.5px",
                    marginLeft: "20px",
                  }}
                  key="reset"
                  onClick={handleReset}
                  data-testid = "resetButton"
                >
                  Reset
                </Button>,
                <Button
                  style={{
                    borderRadius: "1.2rem",
                    background: "#1E4180",
                    color: "white",
                    marginTop: "28.5px",
                    marginLeft: "20px",
                  }}
                  key="done"
                  onClick={handleDone}
                >
                  Done
                </Button>,
              ]}
            >
              <div style={{ padding: "13.5px", backgroundColor: "#161d35" }}>
                <Form layout="inline">
                  <Form layout="vertical">
                    <Form.Item
                      label={<span style={{ color: "gray" }}>USER NAME</span>}
                    >
                      <Input
                        placeholder="Enter"
                        style={inputStyle}
                        value={username}
                        onChange={handleChange}
                      />
                    </Form.Item>
                  </Form>
                  <Form layout="vertical">
                    <Form.Item
                      label={<span style={{ color: "gray" }}>WIN2KID*</span>}
                    >
                      <Input
                        placeholder="Enter"
                        style={inputStyle}
                        value={win2kId}
                        onChange={(e) => setWin2kId(e.target.value)}
                      />
                      {/* {win2kIdError && (
                        <label style={{ color: "white" }}>
                          WIN2KID is required
                        </label>
                      )} */}
                    </Form.Item>
                  </Form>
                </Form>
                <Form layout="inline">
                  <Form layout="vertical">
                    <Form.Item
                      label={<span style={{ color: "gray" }}>EMAIL*</span>}
                    >
                      <Input
                        placeholder="Enter"
                        style={inputStyle}
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                      />
                       {/* {emailError && (
                        <label style={{ color: "white" }}>
                          Email is required
                        </label>
                      )} */}
                    </Form.Item>
                  </Form>
                  <Form layout="vertical">
                    <Form.Item
                      label={<span style={{ color: "gray" }}>STAFF ID</span>}
                    >
                      <Input
                        placeholder="Enter"
                        style={inputStyle}
                        value={staffId}
                        onChange={(e) => setStaffId(e.target.value)}
                      />
                    </Form.Item>
                  </Form>
                </Form>
              </div>
              <div style={{ padding: "0.5rem", backgroundColor: "#161d35" }}>
                <Form layout="inline">
                  <Form layout="vertical">
                    <Form.Item
                      label={<span style={{ color: "gray" }}>DEPARTMENT*</span>}
                    >
                      <Select
                        placeholder="Select"
                        className="custom-select"
                        style={{ width: "12rem", height: "-7rem" }}
                        value={department}
                        onChange={(value) => setDepartment(value)}
                      >
                        <option value="" disabled selected>
                          SELECT
                        </option>
                        {dashboardData.department?.map((item, index) => {
                          return <option key={item}>{item}</option>;
                        })}
                      </Select>
                      {/* {departmentError && (
                        <label style={{ color: "white" }}>
                            Department is required
                        </label>
                      )} */}
                    </Form.Item>
                  </Form>
                  <div className="form-modal">
                    <Form layout="vertical">
                      <Form.Item
                        label={
                          <span style={{ color: "gray" }}>COST CENTER</span>
                        }
                      >
                        <Select
                          placeholder="Select"
                          className="custom-select"
                          style={{ width: "12rem", height: "-7rem" }}
                          onChange={(value) => setCostCenter(value)}
                        >
                          <option value="" disabled selected>
                            SELECT
                          </option>
                        </Select>
                       
                      </Form.Item>
                    </Form>
                  </div>
                </Form>
                <Form layout="inline">
                  <Form layout="vertical">
                    <Form.Item
                      label={
                        <span style={{ color: "gray" }}>ROLE(USER TYPE)*</span>
                      }
                    >
                      <Select
                        className="custom-select"
                        style={{ width: "12rem", height: "-7rem" }}
                        placeholder="Select"
                        value={role}
                        onChange={(value) => setRole(value)}
                        mode="multiple"
                        tagRender={tagRender}
                        showArrow = {true}
                        optionLabelProp="label"
                      >
                        {(rolesDropdown)?.map((item) => {
                          return (
                            <option key={item} value={item} label={item}>
                              <Checkbox checked={role?.includes(item)}>
                                {item}
                              </Checkbox>
                            </option>
                          );
                        })}
                      </Select>
                      {/* {roleError && (
                        <label style={{ color: "white" }}>
                          Role is required
                        </label>
                      )} */}
                    </Form.Item>
                  </Form>
                </Form>
              </div>
              {(win2kIdError || emailError || roleError || departmentError) && (
                        <label style={{ color: "Red",paddingLeft:"200px" }}>
                           Fill All Mandatory Fields Marked With *
                        </label>
                      )}
            </Modal>
          </Form>
          
          <Modal open={addModal} closable={true} onCancel={handleClose} className="role-modal" footer={[<Button style={{ borderRadius: "1.2rem", background: "#1E4180", color: "white", marginTop: "5px", marginLeft: "5px" }} key="done" onClick={handleClose}>Close</Button>]}>
          <div style={{ color: "black"}} className="role-modal">User Records Updated</div>
        </Modal>
 
        <Modal open={deleteModal} closable={true} onCancel={handleCloseDeleteModal} className="role-modal" 
        footer={<><Button style={{ borderRadius: "1.2rem", background: "#1E4180", color: "white", marginTop: "5px", marginLeft: "5px" }} key="done" 
        onClick={handleCloseDeleteModal}>Close</Button>
        <Button style={{ borderRadius: "1.2rem", background: "#1E4180", color: "white", marginTop: "5px", marginLeft: "5px" }} key="done" 
        onClick={handleDeleteUser}>Yes</Button></>}>
          <div style={{ color: "black"}} className="role-modal">Are you sure you want to delete this user?</div>
        </Modal>
          
        </div>
      </div>
      <div>
        <VirtualTable
          TableRow={TableRow}
          columns={columns}
          dataSource={dataWithEditColumn}
          loading={setLoadingIconFunction(error, UserManagementData)}
          rowKey="id"
          size="small"
          scroll={{
            y: 300,
            x: "100vw",
          }}
          delHeight={220}
          onChange={handleChangeTable}
        />
      </div>
    </div>
  );
};
function setLoadingIconFunction(error, UserManagementData) {
  return !error && !Array.isArray(UserManagementData);
}
export default memo(UserManagement);
