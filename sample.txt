i will give current notifcation code and its current testcase its only 62 now make it 100%

import React, { useEffect, useState } from "react";
import DynamicRender from "../dynamicrenderer";
import NotificationJson from "../../assets/jsons/notification.json";
import CloseButton from "../../assets/images/closeButton.svg"
import "./index.css"
import { t } from "i18next";
import Colors from "../../global/Color";

const Notification = (props: any) => {
  const [jsonData, setJsonData] = useState(NotificationJson);
  const [selectedCategoryOption, setSelectedCategoryOption]: any = useState(null);
  const [filteredArr, setFilteredArr] = useState([])
  const [snoozeIconClicked, setSnoozeIconClicked] = useState(false)
  const [selectedStatus, setSelectedStatus] = useState('open')
  let dropdownData = Array.from(new Set(NotificationJson?.map(item => item?.widgetAttributes?.notificationCategory)))
  useEffect(() => {
    let statusFilteredArr: any = jsonData?.filter((item: any) => {
      if(selectedCategoryOption===null){
      return item.widgetAttributes.notificationStatus === selectedStatus
      }else{
        return item.widgetAttributes.notificationCategory===selectedCategoryOption&&item.widgetAttributes.notificationStatus === selectedStatus
      }
      
    })
    console.log("statusFilteredArr",statusFilteredArr)
    setFilteredArr(statusFilteredArr)
  }, [selectedStatus,jsonData])

  const mapFunctions = {
    closeButtonClick: () => {
      props.setNotificationClick(false);
    },
    acknowledgeIconClick: (data: any) => {
      let { widgetAttributes, mainListIndex } = data;
      let array = JSON.parse(JSON.stringify(jsonData))
      array = array.map((item: any, index: any) => {
        if (index == mainListIndex) {
          item.widgetAttributes.acknowledgeIconClicked = true
        }
        return item
      })
      setJsonData(array);
    },
    snoozeIconClick: (data: any) => {
      let { widgetAttributes, mainListIndex, childComponent } = data;
      let array = JSON.parse(JSON.stringify(jsonData))
      array = array.map((item: any, index: any) => {
        if (index == mainListIndex) {
          item.widgetAttributes.snoozeIconClicked = true
        }
        return item
      })
      setJsonData(array);
    },
    timeButton: (data: any) => {
      let { widgetAttributes, mainListIndex } = data;
      let array = JSON.parse(JSON.stringify(jsonData))
      array[mainListIndex].widgetAttributes.snoozeIconClicked = false
      console.log("timebuttondata", data)
      console.log("array", array)
      array = array.map((item: any, index: any) => {
        if (index == mainListIndex) {
          item.widgetAttributes.selectedTimeValue = data.widgetAttributes.timeValue
        }
        return item
      })
      setJsonData(array)
      // array[mainListIndex].widgetAttributes.reminderList = array?.[mainListIndex]?.widgetAttributes?.reminderList.map(
      //   (remainderElement: any) => {
      //     remainderElement.isSelected =remainderElement.timeValue === widgetAttributes?.timeValue;
      //     return remainderElement;
      //   }
      // );
      // setJsonData(array)
      return array;
    },
    resolveButton: (data: any) => {
      let { widgetAttributes, mainListIndex, childComponent } = data;
      let array = JSON.parse(JSON.stringify(jsonData))
      array = array.map((item: any, index: any) => {
        if (index == mainListIndex) {
          item.widgetAttributes.notificationStatus = "resolved"

        }
        return item
      })
      setJsonData(array)
      // childComponent?.children?.map((item:any,index:any)=>{
      //   if(item.key=="resolveLabel"){
      //     item.props.text.value="resolved"
      //   }
      //   return item
      // })
      // return childComponent

    },
    showMoreButtonClick: (data: any) => {
      let { widgetAttributes, mainListIndex } = data;
      let array = JSON.parse(JSON.stringify(jsonData))
      array = array.map((item: any, index: any) => {
        if (index == mainListIndex) {
          item.widgetAttributes.showMoreClicked = !item.widgetAttributes.showMoreClicked
        }
        return item
      })
      setJsonData(array)
    }
  };

  let OpenClickHandler = () => {
    setSelectedStatus("open")
  }

  let ResolveClickHandler = () => {
    setSelectedStatus('resolved')
  }
  let closeClickHandler = () => {
    setSelectedStatus('closed')
  }
  const handleCategoryChange = (event: any) => {
    setSelectedCategoryOption(event.target.value);
  };
  const handleStatusChange = (event: any) => {
    setSelectedStatus(event.target.value);
  };
  const handleSnoozeContainer = () => {
    let array = JSON.parse(JSON.stringify(jsonData))
    array = jsonData?.map((item: any, index: any) => {
      item.widgetAttributes.snoozeIconClicked = false
      return item
    })
    setJsonData(array)
  }

  return (
    <div style={{ position: "absolute", zIndex: 99, top: "20%", right: "12px", zoom: 'var(--zoomPercentage)' }}>
      <div className="NotificationView" onClick={(e: any) => { handleSnoozeContainer() }} style={{ background: Colors.notificationsBackground }}>
        <div className="NotificationHeader">
          <label className="NotificationLabel" style={{ color: Colors.notificationHeaderTextColor }}>{t("notifications")}</label>
          <img src={CloseButton} alt="CloseButton" style={{ cursor: "pointer", width: 29, height: 29 }} onClick={() => props.setNotificationClick(false)} />
        </div>
        <div className="FilterView">
          <div className="CategoryFilterView">
            <div style={{ display: "flex", flexDirection: "column" }}>
              <label htmlFor="dropdown" className="ByCategoryLabel" style={{ color: Colors.notificationFilterLabel }}>
                {t("byCategory")}
              </label>
              <select
                id="dropdown"
                value={selectedCategoryOption}
                onChange={handleCategoryChange}
                aria-placeholder="Select"
                className="DropDownSelected"
              >
                <option value="" disabled selected hidden>
                  {t("select")}
                </option>
                {
                  dropdownData?.map((item: any, index: any) => {
                    return (
                      <option key={index} value={item?.value}>
                        {item}
                      </option>
                    );
                  })
                }
              </select>
            </div>
          </div>
          <div className="StatusFilterView">
            <label className="byStatusLabel" style={{ color: Colors.notificationFilterLabel }}>{t("byStatus")}</label>
            <div style={{ display: "flex", flexDirection: "row" }}>
              <div className={selectedStatus == "open" ? "OpenButtonSelected" : "OpenButtonNotSelected"} style={selectedStatus == "open" ? { background: Colors.notificationSelectedButtonColor, color: Colors.notificationSelectedStatusTextColor } : { background: Colors.notificationUnselectedButtonColor, color: Colors.notificationUnSelectedStatusTextColor }} onClick={OpenClickHandler}>
                <label className="OpenLabel" >{t("open")}</label>
              </div>
              <div className={selectedStatus == "closed" ? "CloseButtonSelected" : "CloseButtonNotSelected"} style={selectedStatus == "closed" ? { background: Colors.notificationSelectedButtonColor, color: Colors.notificationSelectedStatusTextColor } : { background: Colors.notificationUnselectedButtonColor, color: Colors.notificationUnSelectedStatusTextColor }} onClick={closeClickHandler}>
                <label className="ClosedLabel" >{t("closed")}</label>
              </div>
              <div className={selectedStatus == "resolved" ? "ResolveButtonSelected" : "ResolveButtonNotSelected"} style={selectedStatus == "resolved" ? { background: Colors.notificationSelectedButtonColor, color: Colors.notificationSelectedStatusTextColor } : { background: Colors.notificationUnselectedButtonColor, color: Colors.notificationUnSelectedStatusTextColor }} onClick={ResolveClickHandler}>
                <label className="ResolvedLabel" >{t("resolved")}</label>
              </div>

            </div>
          </div>
        </div>
        <div className="ListOuterContainer">
          {/* {jsonData && selectedStatus == "Open" && jsonData?.map((item: any, index: any) => {

            if (selectedCategoryOption == null) {
              return (
                item.widgetAttributes.notificationStatus == "open" && <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} />
              )
            } else {
              return (
                item.widgetAttributes.notificationStatus == "open" && (item.widgetAttributes.notificationCategory == selectedCategoryOption) && <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} />
              )
            }

          })}
          {jsonData && selectedStatus == "resolved" && jsonData?.map((item: any, index: any) => {
            if (selectedCategoryOption == null) {
              return (
                item.widgetAttributes.notificationStatus == "resolved" && <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} />
              )
            } else {
              return (
                item.widgetAttributes.notificationStatus == "resolved" && (item.widgetAttributes.notificationCategory == selectedCategoryOption) && <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} />
              )
            }
          })}
          {jsonData && selectedStatus == "closed" && jsonData?.map((item: any, index: any) => {
            if (selectedCategoryOption == null) {
              return (
                item.widgetAttributes.notificationStatus == "closed" && <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} />
              )
            } else {
              return (
                item.widgetAttributes.notificationStatus == "closed" && (item.widgetAttributes.notificationCategory == selectedCategoryOption) && <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} />
              )
            }
          })} */}
          {
            filteredArr?.length ?
            jsonData?.map((item: any, index: number) => {
              if (item.widgetAttributes.notificationStatus === selectedStatus) {
                return (
                  (selectedCategoryOption === null) ?
                    <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} /> :
                    item.widgetAttributes.notificationCategory === selectedCategoryOption ?
                      <DynamicRender data={item} mainListIndex={index} mappedFunctions={mapFunctions} />
                      : null
                )
              }

            })
            : <div style={{ marginTop:"40%",textAlign: "center", color: "#FFFFFF", font: "normal normal normal 19px/15px Roboto" }}>No New Notifications</div>

          }
        </div>
      </div>

    </div>
  );
};

export default Notification;



import React from "react";
import { render, screen } from "@testing-library/react";
import Notification from "../../../src/components/notification";

 
// Mock props
const mockSetNotificationClick = jest.fn();
 
// Mock DynamicRender and capture props
let dynamicRenderProps: any = {};
 
jest.mock("../../../src/components/dynamicrenderer", () => {
  return jest.fn((props) => {
    dynamicRenderProps = props;
    return <div data-testid="dynamic-renderer" />;
  });
});
 
describe("Notification Component", () => {
  beforeEach(() => {
    render(<Notification setNotificationClick={mockSetNotificationClick} />);
  });
 
  it("should render the Notification component", () => {
    expect(screen.getByTestId("dynamic-renderer")).toBeDefined();
  });
 
  it("should call closeButtonClick and hide notification", () => {
    dynamicRenderProps.mappedFunctions.closeButtonClick();
    expect(mockSetNotificationClick).toHaveBeenCalledWith(false);
  });
 
  it("should mark acknowledgeIconClick as clicked", () => {
    dynamicRenderProps.mappedFunctions.acknowledgeIconClick({
      widgetAttributes: {},
    });
    expect(dynamicRenderProps.data.widgetAttributes.acknowledgeIconClicked).toBeUndefined();
  });
 
  it("should update snoozeIconClicked when snoozeIconClick is called", () => {
    dynamicRenderProps.mappedFunctions.snoozeIconClick({
      widgetAttributes: { id: 1 },
    });
 
    const updatedItem = dynamicRenderProps.data.widgetAttributes.list.find(
(item: any) => item.id === 1
    );
    expect(updatedItem.snoozeIconClicked).toBe(true);
  });
 
  it("should update time selection when timeButton is clicked", () => {
    dynamicRenderProps.mappedFunctions.timeButton({
      widgetAttributes: { id: 1, timeValue: "10:00 AM" },
    });
 
    const updatedItem = dynamicRenderProps.data.widgetAttributes.list.find(
(item: any) => item.id === 1
    );
    expect(updatedItem.snoozeIconClicked).toBe(false);
 
    const selectedReminder = updatedItem.reminderList.find(
      (reminder: any) => reminder.timeValue === "10:00 AM"
    );
    expect(selectedReminder.isSelected).toBe(true);
  });
 
  it("should log resolveButtonClicked when resolveButton is called", () => {
    const consoleSpy = jest.spyOn(console, "log").mockImplementation(() => {});
 
    dynamicRenderProps.mappedFunctions.resolveButton();
 
    expect(consoleSpy).toHaveBeenCalledWith("resolveButtonClicked");
 
    consoleSpy.mockRestore();
  });
});


