import "./style.css";
import React, { useRef, useEffect, useState } from "react";
import mapboxgl from "mapbox-gl"; // eslint-disable-line import/no-webpack-loader-syntax
import 'mapbox-gl/dist/mapbox-gl.css';
import * as turf from '@turf/turf';
mapboxgl.accessToken =
  "pk.eyJ1IjoicHJhdmVlbmFtYmFkeSIsImEiOiJjbGkydmlzdTMwOXFzM2VtdnUyMnpyOGQ4In0.bWuINnmssNAZbp1zdLkhhg";
let allMarkers = [];
const MapboxMap = () => {
  const mapContainer = useRef(null);
  const map = useRef(null);
  const pointRef = useRef(null);
  const originRef = useRef(null);
  const routeRef = useRef(null);
  const [disabled, setDisabled] = useState(false);
  const steps = 500;
  let counter = 0;
 
  function handleClick() {
    pointRef.current.features[0].geometry.coordinates = originRef.current;
    map.current.getSource('point').setData(pointRef.current);
    animate(0);
    setDisabled(true);
  }
 
  function animate() {
    const start =
      routeRef.current.features[0].geometry.coordinates[
        counter >= steps ? counter - 1 : counter
      ];
    const end =
      routeRef.current.features[0].geometry.coordinates[
        counter >= steps ? counter : counter + 1
      ];
      if (!start || !end) {
        setDisabled(false);
        return;
      }
 
    pointRef.current.features[0].geometry.coordinates =
      routeRef.current.features[0].geometry.coordinates[counter];
    pointRef.current.features[0].properties.bearing = turf.bearing(
      turf.point(start),
      turf.point(end)
    );
 
    map.current.getSource('point').setData(pointRef.current);
 
    if (counter < steps) {
      requestAnimationFrame(animate);
    }
 
    counter = counter + 1;
  }
useEffect(() => {
    if (map.current) return; // initialize map only once
    map.current = new mapboxgl.Map({
      container: mapContainer.current,
    style: 'mapbox://styles/mapbox/satellite-streets-v12',
    center: [-96, 37.8],
    zoom: 4,
    pitch: 40,
    bearing: 172.5,
    antialias: true
    });
    const origin = [-122.414, 37.776];
    originRef.current = origin;
 
    const destination = [-77.032, 38.913];
 
    const route = {
      type: 'FeatureCollection',
      features: [
        {
          type: 'Feature',
          geometry: {
            type: 'LineString',
            coordinates: [origin, destination]
          }
        }
      ]
    };
    routeRef.current = route;
 
    const point = {
      type: 'FeatureCollection',
      features: [
        {
          type: 'Feature',
          properties: {},
          geometry: {
            type: 'Point',
            coordinates: origin
          }
        }
      ]
    };
    pointRef.current = point;
 
    const lineDistance = turf.length(route.features[0]);
    const arc = [];
 
    for (let i = 0; i < lineDistance; i += lineDistance / steps) {
      const segment = turf.along(route.features[0], i);
      arc.push(segment.geometry.coordinates);
    }
 
    route.features[0].geometry.coordinates = arc;
   
    map.current.on('load', () => {
      map.current.addSource('route', {
        type: 'geojson',
        data: route
      });
 
      map.current.addSource('point', {
        type: 'geojson',
        data: point
      });
 
      map.current.addLayer({
        id: 'route',
        source: 'route',
        type: 'line',
        paint: {
          'line-width': 2,
          'line-color': '#007cbf'
        }
      });
 
      map.current.addLayer({
        id: 'point',
        source: 'point',
        type: 'symbol',
        layout: {
          'icon-image': 'airport',
          'icon-size': 1.5,
          'icon-rotate': ['get', 'bearing'],
          'icon-rotation-alignment': 'map',
          'icon-allow-overlap': true,
          'icon-ignore-placement': true
        }
      });
 
      animate(counter);
    });
 
    // Cleanup function
    //return () => map.current.remove();
  }, []);
 
 
 
 
  return (
    <div style={{position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100vh",
      zIndex: 0,
      opacity: 0.7,}}>
       <div ref={mapContainer} className="map-container" />
      <div
        style={{
          position: 'absolute',
          top: '10px',
          left: '10px',
          zIndex:9
        }}
      >
        <button
          disabled={disabled}
          style={{
            backgroundColor: disabled ? '#f5f5f5' : '#3386c0',
            color: disabled ? '#c3c3c3' : '#fff',
            display: 'inline-block',
            margin: '0',
            padding: '10px 20px',
            border: 'none',
            cursor: 'pointer',
            borderRadius: '3px',
            zIndex:9
          }}
          onClick={handleClick}
          id="replay"
        >
          Replay
        </button>
      </div>
    </div>
  );
};
 
export default MapboxMap;
