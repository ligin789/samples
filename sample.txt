ProvFuel SAGAS › should dispatch SUCCESS_PROVISIONAL_FUEL on successful API call

    expect(received).toEqual(expected) // deep equality

    - Expected  - 8
    + Received  + 1

    - Array [
    -   Object {
    -     "payload": Object {
    -       "some": "data",
    -     },
    -     "type": "SUCCESS_PROVISIONAL_FUEL",
    -   },
    - ]
    + Array []

      130 |     ).done;
      131 |  
    > 132 |     expect(dispatched).toEqual([
          |                        ^
      133 |       ProvisionalFuelAction.getProvisionalFuelMonitoringData(mockResponse),
      134 |     ]);
      135 |   });

      at _callee$ (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:132:24)
      at tryCatch (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.<anonymous> (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at asyncGeneratorStep (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at _next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)

  ● ProvFuel SAGAS › should dispatch FAILED_PROVISIONAL_FUEL on failed API call

    TypeError: Cannot read properties of undefined (reading 'type')

      155 |     ).done;
      156 |  
    > 157 |     expect(dispatched[0].type).toBe(ProvFuelConstants.FAILED_PROVISIONAL_FUEL);
          |                          ^
      158 |   });
      159 | });

      at _callee2$ (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:157:26)
      at tryCatch (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.<anonymous> (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at asyncGeneratorStep (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at _next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
