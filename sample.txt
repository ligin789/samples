import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import DomainAddEdit from './DomainAddEdit';
import moment from 'moment';

const mockStore = configureStore([]);

describe('DomainAddEdit Component', () => {
    let store;
    let props;

    beforeEach(() => {
        store = mockStore({});
        props = {
            domain: 'MGT',
            cancelHandel: jest.fn(),
            selectedObject: {},
            selectedType: 'Add',
            insertMgtData: jest.fn(),
            updateMgtData: jest.fn(),
            retrieveMgtData: jest.fn(),
            insertAirportData: jest.fn(),
            updateAirportData: jest.fn(),
            insertPaxData: jest.fn(),
            insertCrewData: jest.fn(),
            updateCrewData: jest.fn(),
            updatePaxData: jest.fn(),
            setShowDetail: jest.fn(),
        };
    });

    test('renders MGT domain form correctly', () => {
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        expect(screen.getByTestId('AircraftTypeInput')).toBeInTheDocument();
        expect(screen.getByTestId('FSeatsCapacityInput')).toBeInTheDocument();
        expect(screen.getByTestId('BSeatsCapacityInput')).toBeInTheDocument();
        expect(screen.getByTestId('ESeatsCapacityInput')).toBeInTheDocument();
        expect(screen.getByTestId('overallPayloadInput')).toBeInTheDocument();
        expect(screen.getByTestId('cargoPayloadInput')).toBeInTheDocument();
        expect(screen.getByTestId('MGTInput')).toBeInTheDocument();
    });

    test('handles input changes for MGT domain', () => {
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByTestId('AircraftTypeInput'), { target: { value: 'Boeing 737' } });
        fireEvent.change(screen.getByTestId('FSeatsCapacityInput'), { target: { value: '100' } });
        fireEvent.change(screen.getByTestId('BSeatsCapacityInput'), { target: { value: '50' } });
        fireEvent.change(screen.getByTestId('ESeatsCapacityInput'), { target: { value: '200' } });
        fireEvent.change(screen.getByTestId('overallPayloadInput'), { target: { value: '5000' } });
        fireEvent.change(screen.getByTestId('cargoPayloadInput'), { target: { value: '2000' } });
        fireEvent.change(screen.getByTestId('MGTInput'), { target: { value: '3000' } });

        expect(screen.getByTestId('AircraftTypeInput').value).toBe('Boeing 737');
        expect(screen.getByTestId('FSeatsCapacityInput').value).toBe('100');
        expect(screen.getByTestId('BSeatsCapacityInput').value).toBe('50');
        expect(screen.getByTestId('ESeatsCapacityInput').value).toBe('200');
        expect(screen.getByTestId('overallPayloadInput').value).toBe('5000');
        expect(screen.getByTestId('cargoPayloadInput').value).toBe('2000');
        expect(screen.getByTestId('MGTInput').value).toBe('3000');
    });

    test('calls insertMgtData when Done is clicked for MGT domain in Add mode', () => {
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByTestId('AircraftTypeInput'), { target: { value: 'Boeing 737' } });
        fireEvent.change(screen.getByTestId('FSeatsCapacityInput'), { target: { value: '100' } });
        fireEvent.change(screen.getByTestId('BSeatsCapacityInput'), { target: { value: '50' } });
        fireEvent.change(screen.getByTestId('ESeatsCapacityInput'), { target: { value: '200' } });
        fireEvent.change(screen.getByTestId('overallPayloadInput'), { target: { value: '5000' } });
        fireEvent.change(screen.getByTestId('cargoPayloadInput'), { target: { value: '2000' } });
        fireEvent.change(screen.getByTestId('MGTInput'), { target: { value: '3000' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.insertMgtData).toHaveBeenCalledWith({
            aircraftType: 'Boeing 737',
            fSeatsCapacity: 100,
            bSeatsCapacity: 50,
            eSeatsCapacity: 200,
            overallPayload: 5000,
            cargoPayload: 2000,
            MGT: 3000,
        });
    });

    test('calls updateMgtData when Done is clicked for MGT domain in Edit mode', () => {
        props.selectedType = 'Edit';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByTestId('AircraftTypeInput'), { target: { value: 'Boeing 737' } });
        fireEvent.change(screen.getByTestId('FSeatsCapacityInput'), { target: { value: '100' } });
        fireEvent.change(screen.getByTestId('BSeatsCapacityInput'), { target: { value: '50' } });
        fireEvent.change(screen.getByTestId('ESeatsCapacityInput'), { target: { value: '200' } });
        fireEvent.change(screen.getByTestId('overallPayloadInput'), { target: { value: '5000' } });
        fireEvent.change(screen.getByTestId('cargoPayloadInput'), { target: { value: '2000' } });
        fireEvent.change(screen.getByTestId('MGTInput'), { target: { value: '3000' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.updateMgtData).toHaveBeenCalledWith({
            aircraftType: 'Boeing 737',
            fSeatsCapacity: 100,
            bSeatsCapacity: 50,
            eSeatsCapacity: 200,
            overallPayload: 5000,
            cargoPayload: 2000,
            MGT: 3000,
        });
    });

    test('renders Airports domain form correctly', () => {
        props.domain = 'Airports';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        expect(screen.getByPlaceholderText('Enter')).toBeInTheDocument();
        expect(screen.getByText('Select Country')).toBeInTheDocument();
        expect(screen.getByText('Select City')).toBeInTheDocument();
        expect(screen.getByText('Select Airport')).toBeInTheDocument();
    });

    test('handles input changes for Airports domain', () => {
        props.domain = 'Airports';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: 'LIS' } });
        fireEvent.change(screen.getByText('Select Country'), { target: { value: 'Portugal' } });
        fireEvent.change(screen.getByText('Select City'), { target: { value: 'Lisbon' } });
        fireEvent.change(screen.getByText('Select Airport'), { target: { value: 'Humberto Delgado Airport' } });

        expect(screen.getByPlaceholderText('Enter').value).toBe('LIS');
        expect(screen.getByText('Select Country').value).toBe('Portugal');
        expect(screen.getByText('Select City').value).toBe('Lisbon');
        expect(screen.getByText('Select Airport').value).toBe('Humberto Delgado Airport');
    });

    test('calls insertAirportData when Done is clicked for Airports domain in Add mode', () => {
        props.domain = 'Airports';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: 'LIS' } });
        fireEvent.change(screen.getByText('Select Country'), { target: { value: 'Portugal' } });
        fireEvent.change(screen.getByText('Select City'), { target: { value: 'Lisbon' } });
        fireEvent.change(screen.getByText('Select Airport'), { target: { value: 'Humberto Delgado Airport' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.insertAirportData).toHaveBeenCalledWith({
            iata: 'LIS',
            country: 'Portugal',
            city: 'Lisbon',
            airport: 'Humberto Delgado Airport',
            icao: '',
        });
    });

    test('calls updateAirportData when Done is clicked for Airports domain in Edit mode', () => {
        props.domain = 'Airports';
        props.selectedType = 'Edit';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: 'LIS' } });
        fireEvent.change(screen.getByText('Select Country'), { target: { value: 'Portugal' } });
        fireEvent.change(screen.getByText('Select City'), { target: { value: 'Lisbon' } });
        fireEvent.change(screen.getByText('Select Airport'), { target: { value: 'Humberto Delgado Airport' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.updateAirportData).toHaveBeenCalledWith({
            iata: 'LIS',
            country: 'Portugal',
            city: 'Lisbon',
            airport: 'Humberto Delgado Airport',
            icao: '',
        });
    });

    test('renders Crew MCT domain form correctly', () => {
        props.domain = 'Crew MCT';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        expect(screen.getByPlaceholderText('Enter')).toBeInTheDocument();
        expect(screen.getByText('Select')).toBeInTheDocument();
    });

    test('handles input changes for Crew MCT domain', () => {
        props.domain = 'Crew MCT';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: '60' } });
        fireEvent.change(screen.getByText('Select'), { target: { value: 'Cabin Crew' } });

        expect(screen.getByPlaceholderText('Enter').value).toBe('60');
        expect(screen.getByText('Select').value).toBe('Cabin Crew');
    });

    test('calls insertCrewData when Done is clicked for Crew MCT domain in Add mode', () => {
        props.domain = 'Crew MCT';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: '60' } });
        fireEvent.change(screen.getByText('Select'), { target: { value: 'Cabin Crew' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.insertCrewData).toHaveBeenCalledWith({
            mct: 60,
            crewType: 'Cabin Crew',
            arrStn: '',
            conxStatus: '',
            depStn: '',
            rangeStart: 0,
            rangeEnd: 0,
            effFrom: '',
            effTo: '',
            arrTerminal: '',
            depTerminal: '',
        });
    });

    test('calls updateCrewData when Done is clicked for Crew MCT domain in Edit mode', () => {
        props.domain = 'Crew MCT';
        props.selectedType = 'Edit';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: '60' } });
        fireEvent.change(screen.getByText('Select'), { target: { value: 'Cabin Crew' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.updateCrewData).toHaveBeenCalledWith({
            id: undefined,
            mct: 60,
            crewType: 'Cabin Crew',
            arrStn: '',
            conxStatus: '',
            depStn: '',
            rangeStart: 0,
            rangeEnd: 0,
            effFrom: '',
            effTo: '',
            arrTerminal: '',
            depTerminal: '',
        });
    });

    test('renders PAX MCT domain form correctly', () => {
        props.domain = 'PAX MCT';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        expect(screen.getByPlaceholderText('Enter')).toBeInTheDocument();
        expect(screen.getByText('Select')).toBeInTheDocument();
    });

    test('handles input changes for PAX MCT domain', () => {
        props.domain = 'PAX MCT';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: '60' } });
        fireEvent.change(screen.getByText('Select'), { target: { value: 'Y' } });

        expect(screen.getByPlaceholderText('Enter').value).toBe('60');
        expect(screen.getByText('Select').value).toBe('Y');
    });

    test('calls insertPaxData when Done is clicked for PAX MCT domain in Add mode', () => {
        props.domain = 'PAX MCT';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: '60' } });
        fireEvent.change(screen.getByText('Select'), { target: { value: 'Y' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.insertPaxData).toHaveBeenCalledWith({
            id: undefined,
            mct: 60,
            arrStn: '',
            depStn: '',
            conxStatus: '',
            arrCarrier: '',
            arrCodeShareIND: '',
            arrCodeShareOP: '',
            arrFltRangeStart: '',
            arrFltRangeEnd: '',
            depCarrier: '',
            depCodeShareIND: '',
            depCodeShareOP: '',
            depFltRangeStart: '',
            depFltRangeEnd: '',
            prevCountry: '',
            nextCountry: '',
            effFrom: '',
            effTo: '',
            arrTerminal: '',
            depTerminal: '',
        });
    });

    test('calls updatePaxData when Done is clicked for PAX MCT domain in Edit mode', () => {
        props.domain = 'PAX MCT';
        props.selectedType = 'Edit';
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.change(screen.getByPlaceholderText('Enter'), { target: { value: '60' } });
        fireEvent.change(screen.getByText('Select'), { target: { value: 'Y' } });

        fireEvent.click(screen.getByText('Done'));

        expect(props.updatePaxData).toHaveBeenCalledWith({
            id: undefined,
            mct: 60,
            arrStn: '',
            depStn: '',
            conxStatus: '',
            arrCarrier: '',
            arrCodeShareIND: '',
            arrCodeShareOP: '',
            arrFltRangeStart: '',
            arrFltRangeEnd: '',
            depCarrier: '',
            depCodeShareIND: '',
            depCodeShareOP: '',
            depFltRangeStart: '',
            depFltRangeEnd: '',
            prevCountry: '',
            nextCountry: '',
            effFrom: '',
            effTo: '',
            arrTerminal: '',
            depTerminal: '',
        });
    });

    test('calls cancelHandel when Cancel is clicked', () => {
        render(
            <Provider store={store}>
                <DomainAddEdit {...props} />
            </Provider>
        );

        fireEvent.click(screen.getByText('Cancel'));

        expect(props.cancelHandel).toHaveBeenCalled();
    });
});
