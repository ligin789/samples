
  ● ProvFuel SAGAS › requestProvisionalFuel › should make successful API call

    TypeError: (0 , _actions.requestProvisionalFuel) is not a function

      139 |       service.get.mockImplementation(() => Promise.resolve(mockResponse));
      140 |  
    > 141 |       const result = await requestProvisionalFuel(payload);
          |                                                  ^
      142 |  
      143 |       expect(service.get).toHaveBeenCalledWith({
      144 |         url: expect.any(String),

      at _callee$ (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:141:50)
      at tryCatch (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.<anonymous> (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at asyncGeneratorStep (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at _next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1
      at Object.<anonymous> (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)

  ● ProvFuel SAGAS › requestProvisionalFuel › should handle API error

    TypeError: (0 , _actions.requestProvisionalFuel) is not a function

      162 |       errorHandler.mockImplementation(() => "Processed error");
      163 |  
    > 164 |       await expect(requestProvisionalFuel(payload)).rejects.toEqual("Processed error");
          |                                          ^
      165 |       expect(errorAlert).toHaveBeenCalledWith({
      166 |         title: "Request Failed",
      167 |         content: "Processed error"

      at _callee2$ (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:164:42)
      at tryCatch (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.<anonymous> (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at Generator.next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at asyncGeneratorStep (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at _next (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)
      at src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1
      at Object.<anonymous> (src/store/ProvisionalFuelData/ProvisionalFuelStore.test.js:2:1)

  ● ProvFuel SAGAS › getMonitoringDataProvisionalFuel › should handle failed data fetching

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"payload": [Error: API Error], "type": "FAILED_PROVISIONAL_FUEL"}
    Received array: [{"payload": "Processed error", "type": "FAILED_PROVISIONAL_FUEL"}]

      218 |       ).toPromise();
      219 |  
    > 220 |       expect(dispatchedActions).toContainEqual(
          |                                 ^
      221 |         ProvisionalFuelAction.requestFailedToFetchDataProvisionalFuel(mockError)
      222 |       );
      223 |     });
