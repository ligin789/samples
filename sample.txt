import ProvisionalFuelReducer from "./reducer";
import { ProvFuelConstants } from "./constants";
import { takeLatest } from "redux-saga/effects";
import service from "../../services/http/service";
import { runSaga } from "redux-saga";
import ProvisionalFuelSaga, { ProvisionalFuelAction ,getMonitoringDataProvisionalFuel, errorReset} from "./actions";
import ProvisionalFuelData from "./data.json";

const initialState = {
  ProvisionalFuel: [],
  error: null,
};

describe("ProvFuel reducer", () => {
  it("returns the initial state", () => {
    expect(ProvisionalFuelReducer(undefined, {})).toEqual(initialState);
  });

  it("handles Message  data request", () => {
    expect(
      ProvisionalFuelReducer(initialState, {
        type: ProvFuelConstants.SUCCESS_PROVISIONAL_FUEL,
        payload: ProvisionalFuelData,
      })
    ).toEqual({
      ProvisionalFuelData:ProvisionalFuelData,
      error: null,
    });
  });

  it("handles Prov Fuel error request", () => {
    expect(
      ProvisionalFuelReducer(initialState, {
        type:ProvFuelConstants.FAILED_PROVISIONAL_FUEL ,
        payload: { dummyJson: "" },
      })
    ).toEqual({
      ...initialState,
      error: { dummyJson: "" },
    });
  });
    it("handles prov error reset", () => {
      expect(
        ProvisionalFuelReducer(initialState, {
          type:ProvFuelConstants.PROVISIONAL_FUEL_ERROR_RESET ,
          payload: { dummyJson: "" },
        })
      ).toEqual({
        ...initialState,
        error: null,
      });
  });

  describe("Dispatch ProvFuel ACTIONS", () => {
    
    it("should create an action with requestmessage", () => {
      const expectedAction = {
        type:ProvFuelConstants.REQUEST_PROVISIONAL_FUEL ,
      };
      expect(ProvisionalFuelAction.requestProvisionalFuelData()).toEqual(expectedAction);
    });
    it("should create an action with get prov fuel", () => {
      const expectedAction = {
        type:ProvFuelConstants.SUCCESS_PROVISIONAL_FUEL,
      };
      expect(ProvisionalFuelAction.getProvisionalFuelMonitoringData()).toEqual(expectedAction);
    });
    it("should create an action with fetchFailure", () => {
      const expectedAction = {
        type: ProvFuelConstants.FAILED_PROVISIONAL_FUEL,
      };
      expect(ProvisionalFuelAction.requestFailedToFetchDataProvisionalFuel()).toEqual(expectedAction);
    });
    it("should create an action with error reset", () => {
      const expectedAction = {
        type: ProvFuelConstants.PROVISIONAL_FUEL_ERROR_RESET,
      };
      expect(errorReset()).toEqual(expectedAction);
    });
   
  });

  describe("ProvFuel SAGAS", () => {
    it('should dispatch action "Request prov fuel details"', () => {
      const generator = ProvisionalFuelSaga();
      expect(generator.next().value).toEqual(
        takeLatest(ProvFuelConstants.REQUEST_PROVISIONAL_FUEL, getMonitoringDataProvisionalFuel)
      );
    });

    it('should dispatch action "SUCCESS_"', async () => {
      const dispatchedActions = [];
      const mockResponse = {
        status: 200,
      };
      service.get = jest.fn(() => Promise.resolve(mockResponse));
      const fakeStore = {
        dispatch: (action) => dispatchedActions.push(action),
      };
      console.log(mockResponse);
      await runSaga(fakeStore,getMonitoringDataProvisionalFuel ).done;
      
    });
    it('should dispatch action "FALURE_"', async () => {
      const dispatchedActions = [];
      const mockResponse = {
        status: 403,
      };
      service.get = jest.fn(() => Promise.resolve(mockResponse));
      const fakeStore = {
        dispatch: (action) => dispatchedActions.push(action),
      };
      await runSaga(fakeStore, getMonitoringDataProvisionalFuel).done;
      
    });
  });
});

