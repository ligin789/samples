import Styles from "./Styles";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlus , faMinus } from "@fortawesome/free-solid-svg-icons";
import React from "react";
import moment from "moment";

const FlightLineGraph = (props:any) => {
    // const {graphData, graphStartTime} = props;
    const {graphData, graphStartTime, frozonTime, currentTime, totalScoreShow,totalTime,setTotalTime} = props;
    console.log("FlightLineGraph", props)
    //graphStartTime : graph start point ,frozonTime : graph frozon point ,currentTime : current time on graph

    // let allTime = 0
    // if(graphData.length>0){
    //     allTime = ((Date.UTC(0,0,0,Number(graphData[graphData.length-1]?.time?.split(':')[0]),Number(graphData[graphData.length-1]?.time?.split(':')[1]))-Date.UTC(0,0,0,Number(graphStartTime.split(':')[0]),Number(graphStartTime.split(':')[1])))/60000)+(20-((Date.UTC(0,0,0,Number(graphData[graphData.length-1]?.time?.split(':')[0]),Number(graphData[graphData.length-1]?.time?.split(':')[1]))-Date.UTC(0,0,0,Number(graphStartTime.split(':')[0]),Number(graphStartTime.split(':')[1])))/60000)%20)
    // }
    // let totalTime = 720
    // const [totalTime,setTotalTime]=React.useState(600);
    // let totalTime = 600
    let numberOfLine = 20
    // let timeIntervel = allTime/numberOfLine
    // let timeIntervel = (totalTime)/numberOfLine
    let timeIntervel = 30;
    console.log("timeIntervel", totalTime)

    // const [xPart,setXPart] = React.useState(130);
    // const [xPart,setXPart] = React.useState(200);
    // const [xPart,setXPart] = React.useState(0);
    // const [xPart,setXPart] = React.useState(440);
    // const [xPart,setXPart] = React.useState(totalTime);
    // const [xPart,setXPart] = React.useState(allTime);
    // const [xPart,setXPart] = React.useState(430);
    // let xPart = 130
    // let yPart = 100

    // if(xPart===0&&allTime){
    //     setXPart(allTime)
    // }

    let xPart = totalTime
    // let yPart = 120
    let yPart = totalScoreShow
    let startTimeStamp = (Number(graphStartTime.split(':')[0])*60)+(Number(graphStartTime.split(':')[1]))
    let frozonTimeStamp = (Date.UTC(0,0,0,Number(frozonTime.split(':')[0]),Number(frozonTime.split(':')[1]))-Date.UTC(0,0,0,Number(graphStartTime.split(':')[0]),Number(graphStartTime.split(':')[1])))/60000
    let currentTimeStamp = (Date.UTC(0,0,0,Number(currentTime.split(':')[0]),Number(currentTime.split(':')[1]))-Date.UTC(0,0,0,Number(graphStartTime.split(':')[0]),Number(graphStartTime.split(':')[1])))/60000
    let graphEndTime = '';
    xPart>0&&( graphEndTime = `${Number((startTimeStamp+xPart)/60).toString().length>1?Math.floor((startTimeStamp+xPart)/60):`0${Math.floor((startTimeStamp+xPart)/60)}`}:${Number((startTimeStamp+xPart)%60).toString().length>1?(startTimeStamp+xPart)%60:`0${(startTimeStamp+xPart)%60}`}`)

    const setXPart = (data:number)=>{
        xPart = data
    }
    // let data = graphData;
    let data :any = [];
    let xData :any = []
    let yData :any = []
    for(let i=1;i<=xPart;i++){xData.push(i)}
    for(let i=yPart;i>=1;i--){yData.push(i)}
    graphData.length>0&&graphData.map((el:any,i:number)=>{
        if(Date.UTC(0,0,0,Number(graphEndTime.split(':')[0]),Number(graphEndTime.split(':')[1]))>=Date.UTC(0,0,0,Number(el.time.split(':')[0]),Number(el.time.split(':')[1]))){
            data.push(el)
        }else if((Date.UTC(0,0,0,Number(graphEndTime.split(':')[0]),Number(graphEndTime.split(':')[1]))<Date.UTC(0,0,0,Number(el?.time?.split(':')[0]),Number(el?.time?.split(':')[1])))&&data[data.length-1]?.time!=graphEndTime){
            let tempObj = el;
            tempObj.time = graphEndTime;
            tempObj.timeStamp = (Date.UTC(0,0,0,Number(graphEndTime.split(':')[0]),Number(graphEndTime.split(':')[1]))-Date.UTC(0,0,0,Number(data[data.length-1]?.time?.split(':')[0]),Number(data[data.length-1]?.time?.split(':')[1])))/60000
            // tempObj['isEnd'] = false
            data.push(el);
        }
    })

    console.log('check frozonTimeStamp ==> ',totalTime,timeIntervel,frozonTimeStamp,graphData, graphStartTime,data,graphEndTime,totalScoreShow)
    return(
        <div style={Styles.graphMainBox}>
            <div style={Styles.graphVerticalMainBox}>
                <div style={{width:'40px'}}></div>
                <div style={Styles.graphVerticalPlotBox}>
                    {xData.map((el:number)=>{
                        console.log("xData", Math.floor((startTimeStamp+el)/60))
                        return(

                    // <div style={{width:`${(1760-14)/130}px`,borderRight:`${((el)%10===0)&&'1px solid #C4C4C4'}`,height:'400px'}}>
                    // <div style={{width:`${(1760-(xPart/10))/xPart}px`,borderRight:`${((el)%10===0)&&'1px solid #C4C4C4'}`,height:'400px'}}>
                    <div style={{width:`${(1760-(xPart/timeIntervel))/xPart}px`,borderRight:`${((el)%timeIntervel===0)&&'1px solid #C4C4C4'}`,height:'400px'}}>
                        {/* {((el)%5===0)&& */}
                        {/* {((el)%10===0)&& */}
                        {((el)%timeIntervel===0)&&
                        <div style={{...Styles.graohVerticalPlot,...{width:'45px',position:'absolute',marginTop:`${400+7}px`}}}>
                            {`
                            ${Math.floor((startTimeStamp+el)/60).toString().length===1?`0${Math.floor((startTimeStamp+el)/60)}`
                                :Math.floor((startTimeStamp+el)/60)>=24 ? `${(Math.floor((startTimeStamp+el)/60)%24).toString().length===1&&'0'}${Math.floor((startTimeStamp+el)/60)%24}`
                                :`${Math.floor((startTimeStamp+el)/60)}`}
                            :
                            ${((startTimeStamp+el)%60).toString().length===1?`0${((startTimeStamp+el)%60)}`:`${((startTimeStamp+el)%60)}`}
                            `}
                        </div>}
                    </div>
                    )})}
                </div>
            </div>
            <div style={{...Styles.graphHorizontalMainBox,...{position:'absolute'}}}>
                <div style={Styles.graphHorizontalBox}>
                    <div style={Styles.graphHorizontalTitleBox}>
                        <div style={{...Styles.graphHorizontalTitle,...{position:'absolute'}}}>{'FLIGHT VALUE'}</div>
                    </div>
                    <div style={Styles.graphHorizontalNumberBox}>
                        {yData.map((el:number)=>{return(<>
                        {el%10===0?
                        // <div style={{width:'25px',height:`${(400)/100}px`}}>
                        <div style={{width:'25px',height:`${(400)/yPart}px`}}>
                            <div style={{...Styles.graphHorizontalNumber,...{position:'absolute',textAlign:'right'}}}>{el}</div>
                        </div>
                        :
                        // <div style={{width:'25px',height:`${(400)/100}px`}}></div>
                        <div style={{width:'25px',height:`${(400)/yPart}px`}}></div>
                        }
                        </>)})}
                    </div>
                    <div style={Styles.graphHorizontalRightBox}></div>
                </div>
            </div>
            <div style={{...Styles.graphPlotMainBox,...{position:'absolute'}}}>
                <div style={Styles.graphPlotBox}>
                    <div style={{width:'40px',height:'400px'}}></div>
                    <div style={Styles.graphPlot}>
                        {data.map((el:any,i:number)=>{return(<>
                        {console.log('check the el?.value<data[i-1]?.value =>',Number(data[i-1]?.value)>Number(el?.value) , el?.value , data[i-1]?.value)}
                        <div style={{
                            // width:`${((1760/130)*el.timeStamp)-2}px`,
                            width:`${((1760/xPart)*el.timeStamp)-2}px`,
                            // height:`${i===0?`${((400/100)*(100-el.value))-2}px`:`${((400/100)*(el.value>data[i-1].value?(el.value-data[i-1].value):(data[i-1].value-el.value)))-2}px`}`,
                            height:`${i===0?
                                // `${((400/yPart)*(yPart-el.value))-2}px`
                                "0px"
                                :
                                `${((400/yPart)*(Number(el.value)>Number(data[i-1].value)?
                                    (el.value-data[i-1].value)
                                    :
                                    (data[i-1].value-el.value)
                                // ))-2}px`}`,
                                ))}px`}`,
                            // height:`${i===0?`${((400/100)*(100-el.value))-2}px`:`${((400/100)*(data[i-1].value<el.value?(data[i-1].value-el.value):(el.value-data[i-1].value)))-2}px`}`,

                            //for left and bottom show
                            // borderBottom: `${(Number(el?.value)<Number(data[i-1]?.value)||i===0)&&'2px solid #335188'}`,
                            // borderLeft:`${i!==0&&'2px solid #335188'}`,
                            //fro right and top show
                            borderTop: i===0?"":`${(Number(el?.value)<Number(data[i-1]?.value)||i===0)&&'2px solid #335188'}`,
                            borderBottom: i===0?"":`${(Number(el?.value)>Number(data[i-1]?.value)||i===0)&&'2px solid #335188'}`,
                            borderRight:i===0?"":'2px solid #335188',
                            
                            // borderTop:`${Number(el?.value)>Number(data[i-1]?.value)&&'2px solid #335188'}`,

                            // marginTop:`${i!==0&&((400/100)*(100-(el?.value>data[i-1]?.value? el.value: data[i-1].value)))-2}px`
                            marginTop:`${i!==0&&((400/yPart)*(yPart-(Number(el?.value)>Number(data[i-1]?.value)? el.value: data[i-1].value)))-2}px`
                        }}>
                            {i===0&&<div style={{position:'absolute',width:`${((1760/xPart)*el.timeStamp)-5}px`,marginTop:`${((400/yPart)*(yPart-el.value)-2)}px`,border:'1px solid #335188'}}></div>}
                            <div style={{
                                position:'absolute',
                                // height:'40px',
                                display:'flex',
                                // marginLeft:`${((1760/130)*el.timeStamp)-5}px`,
                                marginLeft:`${((1760/xPart)*el.timeStamp)-5}px`,
                                // marginTop:`${i===0?`${((400/100)*(100-el.value))-26}px`:`${((400/100)*(data[i-1].value-el.value))-26}px`}`,
                                // marginTop:`${i===0?`${((400/100)*(100-el.value))-26}px`:`${((400/100)*(el.value>data[i-1].value?(el.value-data[i-1].value):(data[i-1].value-el.value)))-26}px`}`,
                                // marginTop:`${i===0?`${((400/100)*(100-el.value))-26}px`:`${((400/100)*(el.value>data[i-1].value?(0):(data[i-1].value-el.value)))-26}px`}`,
                                marginTop:`${i===0?
                                    // `${((400/yPart)*(yPart-el.value))-26}px`
                                    `${((400/yPart)*(yPart-el.value))-5}px`
                                    :
                                    // `${((400/yPart)*(Number(el.value)>Number(data[i-1].value)?(0):(data[i-1].value-el.value)))-26-10}px`}`,
                                    `${((400/yPart)*(Number(el.value)>Number(data[i-1].value)?(0):(data[i-1].value-el.value)))-8}px`}`,
                                
                            }}>
                                <>{console.log('check the time and score =>',el,i>0&&moment(el.time,'HH:mm').diff(moment(data[i-1].time,'HH:mm'))/60000)}</>
                                <div style={{...Styles.graphPlotDot}}></div>
                                {/* <div style={{...Styles.graphPlotText,...{marginTop:`${i%2===0?'10px':''}`}}}>{`${el.time} (${Number(el.value).toFixed(2)})`}</div> */}
                                <div
                                    // style={{...Styles.graphPlotText,...{ alignItems: `${i % 2 === 0 ? "center" : ""}` },marginTop: i %2===0&&i!=0 ? "10px" :i===0?'-10px':"0px",height:i %2===0&&i!=0?'20px':'30px'}}
                                    // style={{...Styles.graphPlotText,...{ alignItems: "center"},marginTop: i===0?'-10px':"10px",height:'20px'}}
                                    style={{...Styles.graphPlotText,...{ alignItems: "center"},height:'20px',
                                    marginLeft: i>0&&moment(el.time,'HH:mm').diff(moment(data[i-1].time,'HH:mm'))/60000<3&&data[i-1].value-el.value<3?'-80px':`-3px`,
                                    marginTop:Number(el.value)>=Number(data[i+(data?.length-1===i?0:1)].value)?
                                    i>0&&moment(el.time,'HH:mm').diff(moment(data[i-1].time,'HH:mm'))/60000<3&&data[i-1].value-el.value<3?'0px':
                                    i>0&&moment(el.time,'HH:mm').diff(moment(data[i-1].time,'HH:mm'))/60000<5?'-10px':'-15px':'10px'}}
                                >
                                    {/* {`${el.time} (${Number(el.value).toFixed(2)})`} */}
                                    {`${el.time} (${
                                        // Number(el.value).toFixed(2)
                                        (el.value-Math.floor(el.value))>0.50?Math.ceil(el.value):Math.floor(el.value)
                                    })`}
                                </div>
                                {/* <div style={{...Styles.graphPlotDot,...{marginTop:`${i%2===0?'-10px':''}`}}}></div> */}
                                {/* <div style={{...Styles.graphPlotDot}}></div> */}
                            </div>
                        </div>
                        {/* {data.length-1===i&&<div style={{width:'2px',height:`${(400/100)*el.value}px`,marginTop:`${(400/100)*(100-el.value)}px`,backgroundColor:'#335188'}}></div>} */}
                        {data.length-1===i&&<div style={{width:'2px',height:`${(400/yPart)*el.value}px`,marginTop:`${(400/yPart)*(yPart-el.value)}px`,backgroundColor:'#335188'}}></div>}
                        </>)})}
                    </div>
                </div>
            </div>
            <div style={{...Styles.currentTimeBox,...{position:'absolute'}}}>
                <div style={Styles.currentTimeBoxLeft}></div>
                {/* <div style={{width:`${(1760/130)*frozonTimeStamp}px`,height:'420px'}}> */}
                <div style={{width:`${(1760/xPart)*frozonTimeStamp}px`,height:'420px'}}>
                    <div style={Styles.currentTime}>
                        {/* <div style={{position:'absolute',marginTop:'393px',marginLeft:`${((1760/130)*currentTimeStamp)-7}px`}}> */}
                        <div style={{position:'absolute',marginTop:'393px',marginLeft:`${((1760/xPart)*currentTimeStamp)-7}px`}}>
                            <div style={Styles.currentTimeDot}></div>
                        </div>
                    </div>
                    <div style={Styles.zoomBox}>
                        {/* <div style={{...Styles.zoomBottun,...{cursor:xPart<130?'pointer':'auto'}}} onClick={()=>{xPart<130&&setXPart(xPart+10)}}> */}
                        {/* <div style={{...Styles.zoomBottun,...{cursor:xPart<130?'pointer':'auto'}}} onClick={()=>{setXPart(xPart+10)}}> */}
                        <div style={{...Styles.zoomBottun,...{cursor:xPart<130?'pointer':'auto'}}} onClick={()=>{setTotalTime(totalTime+30)}}>
                            <FontAwesomeIcon icon={faMinus} style={{margin:'auto',width:'12px'}}/>
                        </div>
                        {/* <div style={{...Styles.zoomBottun,...{cursor:xPart>70?'pointer':'auto'}}} onClick={()=>{xPart>70&&setXPart(xPart-10)}}> */}
                        {/* <div style={{...Styles.zoomBottun,...{cursor:xPart>70?'pointer':'auto'}}} onClick={()=>{setXPart(xPart-10)}}> */}
                        <div style={{...Styles.zoomBottun,...{cursor:xPart>70?'pointer':'auto'}}} onClick={()=>{setTotalTime(totalTime-30)}}>
                            <FontAwesomeIcon icon={faPlus} style={{margin:'auto',width:'12px'}}/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}
export default FlightLineGraph;

import { useState, useEffect } from "react";
import Highcharts from 'highcharts';
import "./FlightGraphStyles.css"; 
import { flightIcon, flightDelayIcon } from "./FlightIcon";
const FlightScoreGraph = (flightDetailData:any) => {
  const {currentTimeData,predictionData} = flightDetailData;
  let allData:any[] = []
  currentTimeData&&currentTimeData.map((el:any)=>{
    let temp = [
      Date.UTC(
        Number(`${el.eventcreationTimeLcl?el.eventcreationTimeLcl.substring(0,4):'00'}`),
        Number(`${el.eventcreationTimeLcl?el.eventcreationTimeLcl.substring(5,7):'00'}`),
        Number(`${el.eventcreationTimeLcl?el.eventcreationTimeLcl.substring(8,10):'00'}`),
        Number(`${el.eventcreationTimeLcl?el.eventcreationTimeLcl.split('T')[1].substring(0,2):'00'}`),
        Number(`${el.eventcreationTimeLcl?el.eventcreationTimeLcl.split('T')[1].split(':')[1].substring(0,2):'00'}`)
      ),Number(el.finalScore?el.finalScore:'')
    ]
    allData.push(temp)
  })
  predictionData&&predictionData.map((el:any)=>{
    let temp = [
      Date.UTC(
        Number(`${el.utcTime?el.utcTime.substring(0,4):'00'}`),
        Number(`${el.utcTime?el.utcTime.substring(5,7):'00'}`),
        Number(`${el.utcTime?el.utcTime.substring(8,10):'00'}`),
        Number(`${el.label?el.label.substring(0,2):'00'}`),
        Number(`${el.label?el.label.substring(3,5):'00'}`)
      ),Number(el.fltValue?el.fltValue:'00')
    ]
    allData.push(temp)
  })
  let currentPosition:any[]=[];
  let tempValue = currentTimeData?currentTimeData[currentTimeData.length-1]:{};
  currentPosition.push(Date.UTC(
    Number(`${tempValue.eventcreationTimeLcl?tempValue.eventcreationTimeLcl.substring(0,4):'00'}`),
        Number(`${tempValue.eventcreationTimeLcl?tempValue.eventcreationTimeLcl.substring(5,7):'00'}`),
        Number(`${tempValue.eventcreationTimeLcl?tempValue.eventcreationTimeLcl.substring(8,10):'00'}`),
        Number(`${tempValue.eventcreationTimeLcl?tempValue.eventcreationTimeLcl.split('T')[1].substring(0,2):'00'}`),
        Number(`${tempValue.eventcreationTimeLcl?tempValue.eventcreationTimeLcl.split('T')[1].split(':')[1].substring(0,2):'00'}`)
  )) 
  currentPosition.push(Number(tempValue.finalScore?tempValue.finalScore:'00'))

  let diff = allData.length>0?Math.ceil(((Math.abs(allData[0][0]-allData[allData.length-1][0]))/60000)/allData.length):2

  let currentTime = allData.length>0?((allData[currentTimeData.length-2][0]+allData[currentTimeData.length-1][0])/2):Date.UTC(2024, 1, 1, 1, 1)

  console.log('check FlightScoreGraph data ===>',flightDetailData,currentTimeData,predictionData,allData,currentPosition,currentTime)
    // const defaultTickIntervalTime: number = 5;
    const defaultTickIntervalTime: number = diff;
    useEffect(() => {
      // @ts-ignore
        let chart: any = Highcharts.chart('arrivalScoreChart', {
          chart: {
            backgroundColor: "#FFFFFF00",
            events: {
              render: function() {
                const chart = this;
                // let xValue:any = chart.xAxis[0].toValue(Date.UTC(2024, 5, 22, 8, 50))
                // let xValue:any = chart.xAxis[0].toPixels(Date.UTC(2024, 5, 22, 8, 50),false)
                // let yValue:any = chart.yAxis[0].toPixels((55),true)
                let xValue:any = chart.xAxis[0].toPixels(currentPosition[0],false)
                let yValue:any = chart.yAxis[0].toPixels((currentPosition[1]),true)
                // let xValue:any = (this.xAxis[0].toPixels(Date.UTC(2024, 5, 22, 8, 50)));
                console.log("xValue", xValue, yValue)
                this.renderer.image(flightIcon, xValue,yValue)
                  .add();
              }
            },
            
        },
        plotOptions: {
          series: {
            marker: 
            {
              enabled: false
            }
          }
        },
            title: {
              text: ''
            },
            xAxis: [
              {
                startOnTick: true,
                endOnTick: true,
                showLastLabel: true,
                visible: true,
                gridLineColor: "#B1B1B1",
                gridLineWidth: 1,
                type: "datetime",
                tickInterval: 1000 * 60 * defaultTickIntervalTime,
                tickLength: 1,
                currentDateIndicator: true,
                lineColor: '#00000052',
                showFirstLabel: false,
                labels: {
                  style: {
                    color: "#335188",
                  },
                },
                plotBands: [
                  {
                    from: 0,
                    // to: Date.UTC(2024, 5, 22, 8, 31),
                    // to: currentPosition[0],
                    to: currentTime,
                    color: "#0000000A",
                  },
                ],
                
              },
            ],
            yAxis: [
              {
                gridLineColor: "transparent",
                lineColor: '#0000000A',
                title: {
                  text: 'FLIGHT VALUE',
                  style: {
                    color: "#000000",
                    fontWeight: "500",
                    fontSize: "11px",
                  },
                },
                lineWidth: 2,
              },
              {
                title: {
                  text: "",
                },
              },
            ],
            series: [{
              // data: [[Date.UTC(2024, 5, 22, 8, 5), 50],
              // [Date.UTC(2024, 5, 22, 8, 15), 80],
              // [Date.UTC(2024, 5, 22, 8, 20), 20],
              // [Date.UTC(2024, 5, 22, 8, 25), 40],
              // [Date.UTC(2024, 5, 22, 8, 50), 55],
              // [Date.UTC(2024, 5, 22, 8, 55), 130],
              // [Date.UTC(2024, 5, 22, 9, 25), 120],
              // [Date.UTC(2024, 5, 22, 9, 15), 70],
              // [Date.UTC(2024, 5, 22, 9, 20), 40]],
              data:allData,
              zoneAxis: 'x',
              showInLegend: false,
              color:'#335188',
              zones: [{
                // value:  Date.UTC(2024, 5, 22, 8, 50),
                value:  currentPosition[0],
                
              }, {
                dashStyle: 'dot'
              }]
            },
            {
              type:'scatter',
              symbol: 'circle',
              showInLegend: false,
              marker: {
                radius: 5
              },
              // data: [[Date.UTC(2024, 5, 22, 8, 15), 0]]
              data: [[currentTime, 0]]
            }
            // {
            //   type: "scatter",
            //   showInLegend: false,
            //   enableMouseTracking: false,
            //   marker: {
            //     symbol: "circle",
            //     radius: 5
            //   },
            //   data: [[currentTime, 0]],
            //   allowPointSelect: false,
            //   states: {
            //     hover: {enabled: false},
            //     inactive: {enabled: false}
            //   }
            // },
            // {
            //   type: "scatter",
            //   showInLegend: false,
            //   enableMouseTracking: false,
            //   marker: {
            //     symbol: "circle",
            //     radius: 5,
            //   },
            //   data: [[Date.UTC(2024, 0, 2, 6, 20), 0]],
            //   allowPointSelect: false,
            //   states: {
            //     hover: {
            //       enabled: false,
            //     },
            //     inactive: {
            //       enabled: false,
            //     },
            //   },
            // },

          ],
          credits:{enabled:false},
          exporting:{enabled:false},
            });
    });
  return (
    <div>
      <div id="arrivalScoreChart"></div>
    </div>
  );
};

interface FlightScoreGraphProps {
    flightDetailData: any;
  }

export default FlightScoreGraph;

import React from "react";
import './flightsTable.css';
import moment from "moment";
import { useDispatch } from "react-redux";
import { flightCardViewAction } from "../../store/flightcardview/action";
const PopUpOverride = (props:any)=>{
    const dispatch = useDispatch();
    const {data,widgetConversationId}=props;
    const [isShowDropDown,setIsShowDropDown]=React.useState(false);
    const [requestBody,setRequestBody]=React.useState({});
    const [selectedLclEstArrValue,setSelectedLclEstArrValue]=React.useState('');
    const [selectedGmtEstArrValue,setSelectedGmtEstArrValue]=React.useState('');
    const [selectedGateNumValue,setSelectedGateNumValue]=React.useState('');

    React.useEffect(()=>{
        let tempObj = {
            "eventTimeUTC":new Date().toISOString(),
            "iaoAdvisedGate":selectedGateNumValue,
            "widgetConversationId":widgetConversationId,
            "status":"override",
            "iaoOldGate":data?.flight?.iaoAdvisedGate,
            "iaoLclEstArrDtTm": selectedLclEstArrValue,
            "iaoGmtEstArrDtTm": selectedGmtEstArrValue,
            "iaoGateWaitingTime": `${data?.flight?.iaoGateWaitingTime}`,
            "iaoArrPrdctGmt": data?.flight?.iaoArrPrdctGmt,
            "iaoArrPrdctLcl": data?.flight?.iaoArrPrdctLcl,
            "simulationId":data?.flight?.simulationId,
            "simulationTimeStamp":data?.flight?.simulationTimeStamp
        }
        setRequestBody(tempObj);
    },[props]);

    const onChangeHandel = (e:any,)=>{
        console.log("checking ValueSetter", e)
        let selectedObj = JSON.parse(e)
        console.log("onChangeHandel", selectedObj.iaoLclEstArrDtTm, e)
        setSelectedLclEstArrValue(selectedObj.iaoLclEstArrDtTm);
        setSelectedGmtEstArrValue(selectedObj.iaoGmtEstArrDtTm);
        setSelectedGateNumValue(selectedObj.gateNum);
        let tempObj :any= requestBody;
        tempObj.iaoAdvisedGate = selectedObj.gateNum
        tempObj.iaoLclEstArrDtTm = selectedObj.iaoLclEstArrDtTm
        tempObj.iaoGmtEstArrDtTm = selectedObj.iaoGmtEstArrDtTm
        setRequestBody(tempObj);
    }

    const onSubmitHandel = (data:any)=>{
        dispatch(flightCardViewAction.widgetUpdate(data))
    }

    let optionValueRefer = [
        {
          "gateNum": "C12",
          "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T12:00:00Z"
        },
        {
          "gateNum": "C9",
          "iaoGmtEstArrDtTm": "2024-12-30T21:30:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T16:30:00Z"
        },
        {
          "gateNum": "C3",
          "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T12:00:00Z"
        },
        {
          "gateNum": "C12",
          "iaoGmtEstArrDtTm": "2024-12-30T21:30:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T16:30:00Z"
        },
        {
          "gateNum": "C2",
          "iaoGmtEstArrDtTm": "2024-12-30T18:25:00Z",
          "iaoLclEstArrDtTm": "2024-12-30T13:25:00Z"
        },
        {
            "gateNum": "C12",
            "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
            "iaoLclEstArrDtTm": "2024-12-30T12:00:00Z"
          },
          {
            "gateNum": "C9",
            "iaoGmtEstArrDtTm": "2024-12-30T21:30:00Z",
            "iaoLclEstArrDtTm": "2024-12-30T16:30:00Z"
          },
          {
            "gateNum": "C3",
            "iaoGmtEstArrDtTm": "2024-12-30T17:00:00Z",
            "iaoLclEstArrDtTm": "2024-12-30T12:00:00Z"
          },
          {
            "gateNum": "C12",
            "iaoGmtEstArrDtTm": "2024-12-30T21:30:00Z",
            "iaoLclEstArrDtTm": "2024-12-30T16:30:00Z"
          },
          {
            "gateNum": "C2",
            "iaoGmtEstArrDtTm": "2024-12-30T18:25:00Z",
            "iaoLclEstArrDtTm": "2024-12-30T13:25:00Z"
          }
      ]
    const optionValue :any = data?.flight?.gateCompactability? data.flight.gateCompactability : [];
    console.log('check the PopUpOverride PopUpOverride =>',data)
    return(
        <div>
            <div className='flight-override-button' style={{font: 'normal normal bold 18px/24px Roboto'}} onClick={()=>{setIsShowDropDown(!isShowDropDown)}}>Override</div>
            <div>
                {isShowDropDown===true&&<div style={{width:'0px',height:'0px',position:'relative',zIndex:2}}><div style={{textAlign:'center',backgroundColor:'#FFFFFF',width:'150px',marginLeft:'-0px',marginTop:'5px',boxShadow:'0px 0px 10px #0000005F',borderRadius:'10px'}}>
                    <div style={{height:'200px',overflow:'scroll'}}>
                        {/* {optionValueRefer?.length>0&&optionValueRefer.map((el:any)=>{ */}
                        {optionValue?.length>0&&optionValue.map((el:any)=>{
                            return(
                                <div style={{display:'flex',justifyContent:'space-evenly',paddingTop:'5px',paddingBottom:'5px',marginLeft:'10px',borderBottom:'1px solid #DDDDDD',"color":"#666666"}} 
                                 onClick={()=>{onChangeHandel(JSON.stringify(el))}}
                                >
                                    <input type="radio" value={JSON.stringify(el)} name="radioGroup"/>
                                    {/* <div>{`${el?.gateNum}, ${moment.utc(el.iaoLclEstArrDtTm).format('HH:mm')}`}</div> */}
                                    <div>{`${el?.gateNum}, ${moment(el.iaoLclEstArrDtTm,'YYYY-MM-DDTHH:mm:SS').format('HH:mm')}`}</div>
                                </div>
                            )
                        })}
                    </div>
                    <div style={{display:'flex',justifyContent:'space-around',height:'40px',alignItems:'center',font:'normal normal normal 15px/20px Roboto',color:'#0780FC'}}>
                        <div style={{width:'50%',cursor:'pointer'}}  onClick={()=>{setIsShowDropDown(false)}}>Cancel</div>
                        {/* <div style={{width:'50%',cursor:optionValueRefer?.length>0?'pointer':'no-drop',borderLeft:'1px solid #DDDDDD',height:'100%'}} */}
                        <div style={{width:'50%',cursor:optionValue?.length>0?'pointer':'no-drop',borderLeft:'1px solid #DDDDDD',height:'100%'}}
                            onClick={()=>{setIsShowDropDown(false);
                            onSubmitHandel([requestBody])
                            }}
                        >
                        {/* <div style={{width:'50%',cursor:'pointer',borderLeft:'1px solid #DDDDDD',height:'100%'}} onClick={()=>{setIsShowDropDown(false);onSubmitHandel(requestBody)}}> */}
                            <div style={{marginTop:'10px'}}>Submit</div>
                        </div>
                    </div>
                </div>
                </div>
                }
            </div>
        </div>
    )
}
export default PopUpOverride;
