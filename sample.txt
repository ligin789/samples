import Tippy from "@tippyjs/react";
import { HyperLinkPopup } from "../../hyperlinkPopUp";
import WeatherHoverPopup from "../../weatherHoverPopup";
import { useState } from "react";
import { getFlightLegId } from "../../../utils/GetFlightLegId";

const RenderLink = (props: any) => {
    const {
        handleArrClick,
        flightNoValue,
        carrierCodeValue,
        setCriticalPopupVisible,
        setFlightFeedClick,
        createAlertClicked,
        setCreateAlertClicked,
        gridDataIdValue,
        overlayPosition,
        userConfirmAlert,
        setUserConfirmAlert,
        crewPopup,
        setCrewPopup,
        connectionsPopup,
        setConnectionsPopup,
        setFocusClick,
        setGridDataIdValue,
        setFlightNoValue,
        setCarrierCodeValue,
        handlePaxMisConnectIbClick,
        handlePaxMisConnectObClick,
        chatClickHandler
    } = props;
    const [weatherHover, setWeatherHover] = useState(false);
    const [flightInfoClick, setFlightInfoClick] = useState(false);
    const [criticalObject, setCriticalObject] = useState(null)

    const flightNoOnClickHandler = (p: any) => {
        setFlightNoValue(p?.value)
        const flightLegId = getFlightLegId(p.node.rowIndex)
        setCriticalObject(p?.data["CRITICAL"])
        setGridDataIdValue(flightLegId)
        setCarrierCodeValue(p.data["carriata"]?.value)
        setFlightInfoClick(true)
    }

    if (props?.value === "—" || !props?.value) {
        return <span>{"—"}</span>;
    }
    if (props?.colDef.key == "arrob") {
        return (
            <Tippy
                content={(
                    <WeatherHoverPopup flightOb={props.data["flightob"].value}/>
                )}
                visible={(weatherHover && props.data["flightob"].value.startsWith('1907')) || (weatherHover && props.data["flightob"].value.startsWith('261'))  }
                allowHTML={true}
                arrow={false}
                appendTo={document.body}
                interactive={true}
                placement='bottom'
            >
                <div onClick={()=>handleArrClick(props)} onMouseEnter={(e: any) => { setWeatherHover(true)}} onMouseLeave={() => {setWeatherHover(false)}} style={{ cursor: 'pointer' }}>
                    <a href="" style={{ pointerEvents: "none", color: "#0000EE", }}>{props?.value} </a>
                </div>
            </Tippy>
        );
    }
    if (props?.colDef.key == "flightib" || props?.colDef.key == "flightob") {
        return (
            <Tippy
                content={(
                    <HyperLinkPopup
                        flightNoValue={props?.value}
                        carrierCodeValue={props.data["carriata"]?.value}
                        setFlightInfoClick={setFlightInfoClick}
                        setCriticalPopupVisible={setCriticalPopupVisible}
                        setFlightFeedClick={setFlightFeedClick}
                        createAlertClicked={createAlertClicked}
                        setCreateAlertClicked={setCreateAlertClicked}
                        gridDataIdValue={gridDataIdValue}
                        criticalObject={criticalObject}
                        position={overlayPosition}
                        userConfirmAlert={userConfirmAlert}
                        setUserConfirmAlert={setUserConfirmAlert}
                        crewPopup={crewPopup}
                        setCrewPopup={setCrewPopup}
                        connectionsPopup={connectionsPopup}
                        setConnectionsPopup={setConnectionsPopup}
                        setFocusClick={setFocusClick}
                        chatClickHandler={chatClickHandler}
                    />
                )
                }
                onClickOutside={() => setFlightInfoClick(false)}
                visible={flightInfoClick}
                allowHTML={true}
                arrow={false}
                appendTo={document.body}
                interactive={true}
                placement='bottom'
            >
                <div onClick={(e: any) => { flightNoOnClickHandler(props) }} style={{ cursor: 'pointer' }}>
                    <a href="" style={{ pointerEvents: "none", color: "#0000EE", }}>{props?.value} </a>
                </div>
            </Tippy>
        );
    }
    if (props?.colDef.key === 'paxmisconxib') {
        return <div onClick={handlePaxMisConnectIbClick} style={{ cursor: 'pointer' }}>
            <a href="" style={{ pointerEvents: "none", color: "#0000EE", }}>{props?.value}</a>
        </div>
    }
    if (props?.colDef.key === 'paxmisconxob') {
        return <div onClick={handlePaxMisConnectObClick} style={{ cursor: 'pointer' }}>
            <a href="" style={{ pointerEvents: "none", color: "#0000EE", }}>{props?.value} </a>
        </div>
    }
    return (
        <a href="" style={{ pointerEvents: "none", color: "#0000EE" }}>{props?.value} </a>
    );
};

export default RenderLink
