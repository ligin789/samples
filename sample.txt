import React, { useEffect, useMemo, useState } from "react";
import "./styles.css";
import Header from "../../components/Header/Header";
import FocusFlight from "../../components/focusFlights";
import FirstHeader from "../../components/Header/firstHeader";
import ReferenceData from "../../components/referenceData";
import SecondHeader from "../../components/Header/secondHeader";
import ThirdHeader from "../../components/Header/thirdHeader/index";
import InfiniteScrollGrid from "../../components/table";
// import Data from "../../assets/jsons/data.json";
import FlightFeed from "../../components/flightFeed";
import Notification from "../../components/notification";
import { getLocalTimeAndGMT } from "../../utils/GetLocalTime";

import { referenceViewAction } from '../../redux/referenceData/action'
import moment from "moment";
import { useDispatch, useSelector, connect } from "react-redux";
import { getRequest } from "../../utils/GetRequest";
import CreateAlert from "../../components/createAlert";
import AddNotes from "../../components/addNotes";
import HyperLinkPopup from "../../components/hyperlinkPopUp";
import CriticalPopup from "../../components/criticalPopup";


const Home = (props: any) => {
  const dispatch = useDispatch();
  const referenceData = useSelector((state: any) => state?.HomeScreenReducer?.data);
  const gridData = useSelector((state: any) => state?.FlightReducer?.gridData);
  const isSearchByPatternError = useSelector((state: any) => state?.HomeScreenReducer?.isSearchByPatternError);
  const isSearchByPatternComplete = useSelector((state: any) => state?.HomeScreenReducer?.isSearchByPatternComplete);
  const showLoader = useSelector((state: any) => state?.HomeScreenReducer?.showGridDataLoader)
  
  const [focusClick, setFocusClick] = useState(false);
  const [displayTime, setDisplayTime] = useState<any>(null);
  const [isUTCToggled, setIsUTCToggled] = useState<boolean>(false);
  const [selectedTab, setSelectedTab] = useState(0);
  const [menuModalDisplay, setMenuModalDisplay] = useState(false);
  const [gridSelected, setGridSelected] = useState(false);

  const [modalDisplay,setModalDisplay]=useState({item:"",isSelected:false})
  const [searchFlightModalDisplay, setsearchFlightModalDisplay] = useState(false);
  const [ViewFlightModalDisplay, setViewFlightModalDisplay] = useState(false);
  const [fliterFlightModalDisplay, setFliterFlightModalDisplay] = useState(false);
  const [addRemoveModalDisplay, setAddRemoveModalDisplay] = useState(false);
  const [quickMenuModalDisplay, setQuickMenuModalDisplay] = useState(false);

  const [periodMenuModalDisplay, setPeriodMenuModalDisplay] = useState(false);
  const [depMenuModalDisplay, setDepMenuModalDisplay] = useState(false);
  const [arrMenuModalDisplay, setArrMenuModalDisplay] = useState(false);
  
  const [flightFeedClick, setFlightFeedClick] = useState(false);
  const [notificationClick, setNotificationClick] = useState(false);
  const [isButtonDisable, setIsButtonDisable] = useState(false)
  const [selectedCount, setSelectedCount] = useState(0)
  const [searchPatternText,setSearchPatternText]=useState('')
  
  const [userPreference, setUserPreference] = useState<any>({})

  const [refreshData, setRefreshData] = useState(false);
  const [getDataRequestObj, setGetDataRequestObj] = useState<any>(null)

  const [selectedDepartureStation, setSelectedDepartureStation] = useState("ALL");
  const [selectedArrivalStation, setSelectedArrivalStation] = useState("ALL");
  const [selectedPeriod, setSelectedPeriod] = useState("2 Hours");
  const [selectedStart, setSelectedStart] = useState(moment.utc(new Date()).format('YYYY-MM-DD'));
  const [selectedEnd, setSelectedEnd] = useState(moment.utc(new Date()).format('YYYY-MM-DD'))

  const [selectedStartTime, setSelectedStartTime] = useState('00:00')
  const [selectedEndTime, setSelectedEndTime] = useState('23:59')

  const [selectedColumnsArray, setSelectedColumnsArray] = useState([])
  const [noOfRowsSelected, setNoOfRowsSelected] = useState(0);
  const [colSearchText, setColSearchText] = useState('')
  const [createAlertClicked,setCreateAlertClicked] = useState(false)
  const [addNotesClicked,setAddNotesClicked] = useState(false)
  const [criticalPopupVisible,setCriticalPopupVisible]=useState(false)
  const [flightLinkModal,setFlightLinkModel]=useState(false)
  const [flightNoValue,setFlightNoValue]=useState(null)

  const [dropDownIndex,setDropDownIndex] = useState(-1);

  const menuArray = [ "IOCC Discovery", "Reference Data", "Chrono", "Settings", "Logout"];
  const viewArray = ["Grid View", "Gantt View", "Map View"];

  useEffect(() => {
    dispatch(referenceViewAction.referenceDataRequest())
  }, [])

  useEffect(() => {
    if (refreshData) {
      handleGetGridData()
      setRefreshData(false)
    }
  }, [refreshData])

  useEffect(()=>{
    if (referenceData !== null && JSON.stringify(userPreference) !== JSON.stringify(referenceData)) {
      setUserPreference(referenceData)
      const filterArr = referenceData?.search_filters || []
      const requestObj = getRequest({ filterArr, selectedDepartureStation, selectedArrivalStation, selectedPeriod })
      setGetDataRequestObj(requestObj)
      setRefreshData(true)
    }
  },[referenceData])

  useEffect(()=>{
    if (referenceData !== null) {
      getGridRequest()
    }
  },[selectedDepartureStation,selectedArrivalStation,selectedPeriod])


  useEffect(() => {
    const id = setInterval(() => {
      const iso = new Date().toISOString();
      const { localStringValue = "", gmtString = "" } = getLocalTimeAndGMT(iso)
      const val = isUTCToggled ? `LIS  |  UTC ${moment.utc(iso).format('HH:mm')} (${gmtString})` : `LIS  |  LOCAL ${localStringValue} (${gmtString})`
      setDisplayTime(val);
    }, 1000)
    return () => clearInterval(id);
  }, [isUTCToggled]);

  const handleLoader = (value:boolean) => {
    dispatch(referenceViewAction.updateLoaderStatus(value))
  }
  
  const handleGetGridData = () => {
    dispatch(referenceViewAction.getGridData(getDataRequestObj))
  }
  
  const handleCancel = () => {
    setNoOfRowsSelected(0)
  }

  const handleMarkCritical = () => {
    alert("mark critical clicked")
  }

  const handleRemoveCritical = () => {
    alert("Remove critical clicked")
  }

  const handleDownload = () => {
    alert("Download Clicked")
  }

  const handlePatternSearch=()=>{
    if(searchPatternText.trim().length){
      dispatch(referenceViewAction.getGridByText({text:searchPatternText}))
      return
    }
    alert('Please enter some text')
  }

  const clearPatternSearchError = () => {
    setSearchPatternText('');
    dispatch(referenceViewAction.clearPatternSearchError())
    handleDoneFlightsBy()
  }

  const handleCancelPatternSearch = () => {
    setSearchPatternText('');
    dispatch(referenceViewAction.updatePatternSearchStatus())
    handleDoneFlightsBy()
  }

  const getGridRequest = () => {
    const filterArr = userPreference?.search_filters || []
    let requestObj
    if (selectedPeriod !== 'Custom') {
      requestObj = getRequest({ filterArr, selectedDepartureStation, selectedArrivalStation, selectedPeriod })
    } else {
      const selectedStartPeriod = moment.utc(selectedStart).format(`YYYY-MM-DDT${selectedStartTime}:00`) + 'Z'
      const selectedEndPeriod = moment.utc(selectedEnd).format(`YYYY-MM-DDT${selectedEndTime}:00`) + 'Z'
      const diff = Math.floor(moment(selectedEndPeriod).diff(moment(selectedStartPeriod)) / (1000))
      if (diff < 1) {
        alert('Please check')
        return
      } else {
        requestObj = getRequest({ filterArr, selectedDepartureStation, selectedArrivalStation, selectedPeriod, selectedStartPeriod, selectedEndPeriod })
      }
    }
    handleLoader(true)
    setGetDataRequestObj(requestObj)
    setRefreshData(true)
  }
  
  const handleDoneFlightsBy = () => {
    getGridRequest()
  }

  const customDateRangeSelection = () => {
    getGridRequest()
  }

  const handleResetFlightsBy = () => {
    alert('click')
  }

  const handleNotesClick= (data:any) =>{
    setAddNotesClicked(true)
  }
  const handleNotesClose= (data:any) =>{
    setAddNotesClicked(false)
  }

  const handleDropDownIndex = (index:number) => {
    setDropDownIndex((prevIndex)=>index===prevIndex?-1:index)
  }
  
  const getTabScreenOnSelect = () => {
    if (selectedTab === 0) {
      return (
        <>
          <SecondHeader
            isSidebarVisible={focusClick}
            setSidebarVisible={setFocusClick}
            notificationVisible={setNotificationClick}
            setNotificationVisible={setNotificationClick}
            searchFlightModalDisplay={searchFlightModalDisplay}
            setsearchFlightModalDisplay={setsearchFlightModalDisplay}
            periodMenuModalDisplay={periodMenuModalDisplay}
            setPeriodMenuModalDisplay={setPeriodMenuModalDisplay}
            depMenuModalDisplay={depMenuModalDisplay}
            setDepMenuModalDisplay={setDepMenuModalDisplay}
            arrMenuModalDisplay={arrMenuModalDisplay}
            setArrMenuModalDisplay={setArrMenuModalDisplay}
            isToggled={isUTCToggled}
            setIsToggled={setIsUTCToggled}
            viewArray={viewArray}
            referenceData={userPreference}
            setUserPreference={setUserPreference}
            handlePatternSearch={handlePatternSearch}
            searchPatternText={searchPatternText}
            setSearchPatternText={setSearchPatternText}
            handleDoneFlightsBy={handleDoneFlightsBy}
            handleResetFlightsBy={handleResetFlightsBy}
            selectedDepartureStation={selectedDepartureStation}
            setSelectedDepartureStation={setSelectedDepartureStation}
            selectedArrivalStation={selectedArrivalStation}
            setSelectedArrivalStation={setSelectedArrivalStation}
            selectedPeriod={selectedPeriod}
            setSelectedPeriod={setSelectedPeriod}
            isSearchByPatternError={isSearchByPatternError}
            clearPatternSearchError={clearPatternSearchError}
            isSearchByPatternComplete={isSearchByPatternComplete}
            handleCancelPatternSearch={handleCancelPatternSearch}
            selectedStart={selectedStart}
            setSelectedStart={setSelectedStart}
            selectedEnd={selectedEnd}
            setSelectedEnd={setSelectedEnd}
            selectedStartTime={selectedStartTime}
            setSelectedStartTime={setSelectedStartTime}
            selectedEndTime={selectedEndTime}
            setSelectedEndTime={setSelectedEndTime}
            customDateRangeSelection={customDateRangeSelection}
            modalDisplay={modalDisplay}
            setModalDisplay={setModalDisplay}
            handleLoader={handleLoader}
            dropDownIndex={dropDownIndex}
            handleDropDownIndex={handleDropDownIndex}
          />
          <ThirdHeader
            addRemoveModalDisplay={addRemoveModalDisplay}
            setAddRemoveModalDisplay={setAddRemoveModalDisplay}
            quickMenuModalDisplay={quickMenuModalDisplay}
            setQuickMenuModalDisplay={setQuickMenuModalDisplay}
            isSidebarVisible={focusClick}
            userPreference={userPreference}
            setUserPreference={setUserPreference}
            gridSelected={gridSelected}
            setGridSelected={setGridSelected}
            isButtonDisable={isButtonDisable}
            selectedCount={selectedCount}
            noOfRowsSelected={noOfRowsSelected}
            handleCancel={handleCancel}
            handleMarkCritical={handleMarkCritical}
            handleRemoveCritical={handleRemoveCritical}
            handleDownload={handleDownload}
            selectedColumnsArray={selectedColumnsArray}
            setSelectedColumnsArray={setSelectedColumnsArray}
            modalDisplay={modalDisplay}
            setModalDisplay={setModalDisplay}
            colSearchText={colSearchText}
            setColSearchText={setColSearchText}
            dropDownIndex={dropDownIndex}
            handleDropDownIndex={handleDropDownIndex}
          />
          <InfiniteScrollGrid 
            data={gridData} 
            userPreference={userPreference} 
            noOfRowsSelected={noOfRowsSelected} 
            setNoOfRowsSelected={setNoOfRowsSelected} 
            isUTCToggled={isUTCToggled} 
            setIsUTCToggled={setIsUTCToggled}
            showLoader={showLoader}
            handleLoader={handleLoader}
            handleNotesClick={handleNotesClick}
            setCriticalPopupVisible={setCriticalPopupVisible}
            setFlightLinkModel={setFlightLinkModel}
            flightNoValue={flightNoValue}
            setFlightFeedClick={setFlightFeedClick}
            setFlightNoValue={setFlightNoValue}
            flightLinkModal={flightLinkModal}
            createAlertClicked={createAlertClicked}
            setCreateAlertClicked={setCreateAlertClicked}
            dropDownIndex={dropDownIndex}
            handleDropDownIndex={handleDropDownIndex}
            />
        </>
      )} else if (selectedTab === 1) {
      return (
        <ReferenceData />
      )} else if (selectedTab === 2) {
      return (
        <div>chrono</div>
      )} else if (selectedTab == 3) {
      return (
        <div>Settings</div>
      )} else return (<div>logout</div>)
  }
  return (
    <>
      <div style={{ width: focusClick ? "77%" : "100%" }}>
        <div>
          <FirstHeader
            isSidebarVisible={focusClick}
            referenceData={userPreference}
            selectedTab={selectedTab}
            setSidebarVisible={setFocusClick}
            setSelectedTab={setSelectedTab}
            displayTime={displayTime}
            menuModalDisplay={menuModalDisplay}
            setMenuModalDisplay={setMenuModalDisplay}
            menuArray={menuArray}
            modalDisplay={modalDisplay}
            setModalDisplay={setModalDisplay}
            dropDownIndex={dropDownIndex}
            handleDropDownIndex={handleDropDownIndex}
          />
          {getTabScreenOnSelect()}
        </div>
      </div>
      {focusClick && (
        <div style={{ width: "23%" }}>
          {" "}
          <FocusFlight
            setFocusClick={setFocusClick}
            focusClick={focusClick}
            setFlightFeedClick={setFlightFeedClick}
          />{" "}
        </div>
      )}
      {
        flightFeedClick && (
          // <HyperLinkPopup/>
        <FlightFeed setFlightFeedClick={setFlightFeedClick} />
      )}
      {criticalPopupVisible&&<CriticalPopup setCriticalPopupVisible={setCriticalPopupVisible}/>}
      {
        createAlertClicked && (
        <CreateAlert setCreateAlertClicked={setCreateAlertClicked}/>
      )}
      {
        addNotesClicked && (
        <AddNotes handleNotesClose={handleNotesClose}/>
      )}
      {
        notificationClick && (
        <Notification setNotificationClick={setNotificationClick} />
      )}
    </>
  );
};

export default Home
