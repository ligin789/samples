import React, {useEffect} from 'react';
import {SafeAreaView, Text, View} from 'react-native';
import Header from '../../components/header';
import {stylesForMyTask} from './style';
import tempStorage from '../../assets/jsons/myFlights-Main.json';
import globals from '../../lib/globals';
import Banner from '../../components/banner';

import codeTemplate from '../../assets/jsons/myTasks.json';

import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {getComponent} from '../../lib/WidgetJSONParser';

const MyTasks = (props: any) => {
  console.log(
    'inside myTask before return myTaskData',
    JSON.stringify(props.myTaskData.data),
  );
  let componentJson = codeTemplate;

  const traverseToTaskListScreen = (prop: any) => {
    props.navigation.navigate('MyTasksListScreen', {subData: prop.subdata});
  };
  let widgetParameters = {
    DataValue: props,
    componentJson: componentJson,
    selectedDate: props.selectedDate,
    selectTabIndex: props.selectTabIndex,
    onClickFunction: traverseToTaskListScreen,
  };
  let dataForRender =
    props?.myTaskData?.data?.length !== 0 ? props?.myTaskData?.data : {};
  // let dataForRender= codeTemplate.data

  return (
    <SafeAreaView testID="myTaskView" style={stylesForMyTask.itemContainer}>
      <View style={stylesForMyTask.itemBody}>
        <Header
          isCalenderRequired={false}
          subData={[]}
          componentJson={tempStorage?.template}
          isSortRequired={false}
          headerTitle={globals.HEADER.Tasks}
          headerType={1}
          tabBarIndex={1}
          screenValue={1.1}
        />
        <Banner />
        {props?.myTaskData?.data.assigned &&
          componentJson?.template &&
          componentJson.template?.body &&
          componentJson.template.body?.elements &&
          componentJson.template.body.elements.length > 0 &&
          componentJson.template.body.elements.map(
            (childCmp: any, rowIndex: any) => {
              return (
                (childCmp.componentVisibility ||
                  childCmp.visibilityType === 'always') &&
                getComponent({
                  ...widgetParameters,
                  childCmp: childCmp,
                  subdata: dataForRender,
                })
              );
            },
          )}
        {(props?.myTaskData?.data?.assigned?.length === 0 ||
          props?.myTaskData?.data?.assigned === undefined) && (
          <View style={stylesForMyTask.itemBodyNoData}>
            <Text style={stylesForMyTask.textColor}>No task to display</Text>
          </View>
        )}
      </View>
    </SafeAreaView>
  );
};
const mapStateToProps = (state: any, props: any) => {
  return {
    myTaskData: state?.HomeReducer?.myTaskData,
  };
};

export default connect(mapStateToProps)(MyTasks);
